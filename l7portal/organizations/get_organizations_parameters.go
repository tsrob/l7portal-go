// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrganizationsParams creates a new GetOrganizationsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOrganizationsParams() *GetOrganizationsParams {
	return &GetOrganizationsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganizationsParamsWithTimeout creates a new GetOrganizationsParams object
// with the ability to set a timeout on a request.
func NewGetOrganizationsParamsWithTimeout(timeout time.Duration) *GetOrganizationsParams {
	return &GetOrganizationsParams{
		timeout: timeout,
	}
}

// NewGetOrganizationsParamsWithContext creates a new GetOrganizationsParams object
// with the ability to set a context for a request.
func NewGetOrganizationsParamsWithContext(ctx context.Context) *GetOrganizationsParams {
	return &GetOrganizationsParams{
		Context: ctx,
	}
}

// NewGetOrganizationsParamsWithHTTPClient creates a new GetOrganizationsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOrganizationsParamsWithHTTPClient(client *http.Client) *GetOrganizationsParams {
	return &GetOrganizationsParams{
		HTTPClient: client,
	}
}

/*
GetOrganizationsParams contains all the parameters to send to the API endpoint

	for the get organizations operation.

	Typically these are written to a http.Request.
*/
type GetOrganizationsParams struct {

	/* AccountPlanUUID.

	   Comma separated Rate-Quota UUID's to filter the Organization list. This parameter was formerly known as Account Plan UUID.
	*/
	AccountPlanUUID []string

	/* APIPlanUUID.

	   Comma separated API Plan UUID's to filter the Organization list.
	*/
	APIPlanUUID []string

	/* Name.

	   Name of Organization
	*/
	Name *string

	/* OrgID.

	   Comma separated Organization UUID's to filter the Organization list.
	*/
	OrgID []string

	/* RateQuotaUUID.

	   Comma separated Rate-Quota UUID's to filter the Organization list.
	*/
	RateQuotaUUID []string

	/* Status.

	   Organization Status
	*/
	Status *string

	/* Tag.

	   Comma separated Tag names to filter the Organization list.
	*/
	Tag []string

	/* Type.

	   Organization Type
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get organizations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationsParams) WithDefaults() *GetOrganizationsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get organizations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get organizations params
func (o *GetOrganizationsParams) WithTimeout(timeout time.Duration) *GetOrganizationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organizations params
func (o *GetOrganizationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organizations params
func (o *GetOrganizationsParams) WithContext(ctx context.Context) *GetOrganizationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organizations params
func (o *GetOrganizationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organizations params
func (o *GetOrganizationsParams) WithHTTPClient(client *http.Client) *GetOrganizationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organizations params
func (o *GetOrganizationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountPlanUUID adds the accountPlanUUID to the get organizations params
func (o *GetOrganizationsParams) WithAccountPlanUUID(accountPlanUUID []string) *GetOrganizationsParams {
	o.SetAccountPlanUUID(accountPlanUUID)
	return o
}

// SetAccountPlanUUID adds the accountPlanUuid to the get organizations params
func (o *GetOrganizationsParams) SetAccountPlanUUID(accountPlanUUID []string) {
	o.AccountPlanUUID = accountPlanUUID
}

// WithAPIPlanUUID adds the aPIPlanUUID to the get organizations params
func (o *GetOrganizationsParams) WithAPIPlanUUID(aPIPlanUUID []string) *GetOrganizationsParams {
	o.SetAPIPlanUUID(aPIPlanUUID)
	return o
}

// SetAPIPlanUUID adds the apiPlanUuid to the get organizations params
func (o *GetOrganizationsParams) SetAPIPlanUUID(aPIPlanUUID []string) {
	o.APIPlanUUID = aPIPlanUUID
}

// WithName adds the name to the get organizations params
func (o *GetOrganizationsParams) WithName(name *string) *GetOrganizationsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get organizations params
func (o *GetOrganizationsParams) SetName(name *string) {
	o.Name = name
}

// WithOrgID adds the orgID to the get organizations params
func (o *GetOrganizationsParams) WithOrgID(orgID []string) *GetOrganizationsParams {
	o.SetOrgID(orgID)
	return o
}

// SetOrgID adds the orgId to the get organizations params
func (o *GetOrganizationsParams) SetOrgID(orgID []string) {
	o.OrgID = orgID
}

// WithRateQuotaUUID adds the rateQuotaUUID to the get organizations params
func (o *GetOrganizationsParams) WithRateQuotaUUID(rateQuotaUUID []string) *GetOrganizationsParams {
	o.SetRateQuotaUUID(rateQuotaUUID)
	return o
}

// SetRateQuotaUUID adds the rateQuotaUuid to the get organizations params
func (o *GetOrganizationsParams) SetRateQuotaUUID(rateQuotaUUID []string) {
	o.RateQuotaUUID = rateQuotaUUID
}

// WithStatus adds the status to the get organizations params
func (o *GetOrganizationsParams) WithStatus(status *string) *GetOrganizationsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get organizations params
func (o *GetOrganizationsParams) SetStatus(status *string) {
	o.Status = status
}

// WithTag adds the tag to the get organizations params
func (o *GetOrganizationsParams) WithTag(tag []string) *GetOrganizationsParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the get organizations params
func (o *GetOrganizationsParams) SetTag(tag []string) {
	o.Tag = tag
}

// WithType adds the typeVar to the get organizations params
func (o *GetOrganizationsParams) WithType(typeVar *string) *GetOrganizationsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get organizations params
func (o *GetOrganizationsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountPlanUUID != nil {

		// binding items for accountPlanUuid
		joinedAccountPlanUUID := o.bindParamAccountPlanUUID(reg)

		// query array param accountPlanUuid
		if err := r.SetQueryParam("accountPlanUuid", joinedAccountPlanUUID...); err != nil {
			return err
		}
	}

	if o.APIPlanUUID != nil {

		// binding items for apiPlanUuid
		joinedAPIPlanUUID := o.bindParamAPIPlanUUID(reg)

		// query array param apiPlanUuid
		if err := r.SetQueryParam("apiPlanUuid", joinedAPIPlanUUID...); err != nil {
			return err
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrgID != nil {

		// binding items for orgId
		joinedOrgID := o.bindParamOrgID(reg)

		// query array param orgId
		if err := r.SetQueryParam("orgId", joinedOrgID...); err != nil {
			return err
		}
	}

	if o.RateQuotaUUID != nil {

		// binding items for rateQuotaUuid
		joinedRateQuotaUUID := o.bindParamRateQuotaUUID(reg)

		// query array param rateQuotaUuid
		if err := r.SetQueryParam("rateQuotaUuid", joinedRateQuotaUUID...); err != nil {
			return err
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.Tag != nil {

		// binding items for tag
		joinedTag := o.bindParamTag(reg)

		// query array param tag
		if err := r.SetQueryParam("tag", joinedTag...); err != nil {
			return err
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetOrganizations binds the parameter accountPlanUuid
func (o *GetOrganizationsParams) bindParamAccountPlanUUID(formats strfmt.Registry) []string {
	accountPlanUUIDIR := o.AccountPlanUUID

	var accountPlanUUIDIC []string
	for _, accountPlanUUIDIIR := range accountPlanUUIDIR { // explode []string

		accountPlanUUIDIIV := accountPlanUUIDIIR // string as string
		accountPlanUUIDIC = append(accountPlanUUIDIC, accountPlanUUIDIIV)
	}

	// items.CollectionFormat: ""
	accountPlanUUIDIS := swag.JoinByFormat(accountPlanUUIDIC, "")

	return accountPlanUUIDIS
}

// bindParamGetOrganizations binds the parameter apiPlanUuid
func (o *GetOrganizationsParams) bindParamAPIPlanUUID(formats strfmt.Registry) []string {
	aPIPlanUUIDIR := o.APIPlanUUID

	var aPIPlanUUIDIC []string
	for _, aPIPlanUUIDIIR := range aPIPlanUUIDIR { // explode []string

		aPIPlanUUIDIIV := aPIPlanUUIDIIR // string as string
		aPIPlanUUIDIC = append(aPIPlanUUIDIC, aPIPlanUUIDIIV)
	}

	// items.CollectionFormat: ""
	aPIPlanUUIDIS := swag.JoinByFormat(aPIPlanUUIDIC, "")

	return aPIPlanUUIDIS
}

// bindParamGetOrganizations binds the parameter orgId
func (o *GetOrganizationsParams) bindParamOrgID(formats strfmt.Registry) []string {
	orgIDIR := o.OrgID

	var orgIDIC []string
	for _, orgIDIIR := range orgIDIR { // explode []string

		orgIDIIV := orgIDIIR // string as string
		orgIDIC = append(orgIDIC, orgIDIIV)
	}

	// items.CollectionFormat: ""
	orgIDIS := swag.JoinByFormat(orgIDIC, "")

	return orgIDIS
}

// bindParamGetOrganizations binds the parameter rateQuotaUuid
func (o *GetOrganizationsParams) bindParamRateQuotaUUID(formats strfmt.Registry) []string {
	rateQuotaUUIDIR := o.RateQuotaUUID

	var rateQuotaUUIDIC []string
	for _, rateQuotaUUIDIIR := range rateQuotaUUIDIR { // explode []string

		rateQuotaUUIDIIV := rateQuotaUUIDIIR // string as string
		rateQuotaUUIDIC = append(rateQuotaUUIDIC, rateQuotaUUIDIIV)
	}

	// items.CollectionFormat: ""
	rateQuotaUUIDIS := swag.JoinByFormat(rateQuotaUUIDIC, "")

	return rateQuotaUUIDIS
}

// bindParamGetOrganizations binds the parameter tag
func (o *GetOrganizationsParams) bindParamTag(formats strfmt.Registry) []string {
	tagIR := o.Tag

	var tagIC []string
	for _, tagIIR := range tagIR { // explode []string

		tagIIV := tagIIR // string as string
		tagIC = append(tagIC, tagIIV)
	}

	// items.CollectionFormat: ""
	tagIS := swag.JoinByFormat(tagIC, "")

	return tagIS
}
