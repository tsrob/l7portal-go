// Code generated by go-swagger; DO NOT EDIT.

package api_plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new api plans API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api plans API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAPIPlanUsingPOST(params *CreateAPIPlanUsingPOSTParams, opts ...ClientOption) (*CreateAPIPlanUsingPOSTCreated, error)

	DeleteAPIPlanAPIUsingDELETE1(params *DeleteAPIPlanAPIUsingDELETE1Params, opts ...ClientOption) (*DeleteAPIPlanAPIUsingDELETE1NoContent, error)

	DeleteAPIPlanOrgUsingDELETE(params *DeleteAPIPlanOrgUsingDELETEParams, opts ...ClientOption) (*DeleteAPIPlanOrgUsingDELETEOK, error)

	DeleteAPIPlanUsingDELETE1(params *DeleteAPIPlanUsingDELETE1Params, opts ...ClientOption) (*DeleteAPIPlanUsingDELETE1NoContent, error)

	GetAllAPIPlanApisUsingGET1(params *GetAllAPIPlanApisUsingGET1Params, opts ...ClientOption) (*GetAllAPIPlanApisUsingGET1OK, error)

	GetAllAPIPlanOrgsUsingGET1(params *GetAllAPIPlanOrgsUsingGET1Params, opts ...ClientOption) (*GetAllAPIPlanOrgsUsingGET1OK, error)

	GetAPIPlanAPIUsingGET1(params *GetAPIPlanAPIUsingGET1Params, opts ...ClientOption) (*GetAPIPlanAPIUsingGET1OK, error)

	GetAPIPlanOrgUsingGET1(params *GetAPIPlanOrgUsingGET1Params, opts ...ClientOption) (*GetAPIPlanOrgUsingGET1NoContent, error)

	GetAPIPlanUsingGET1(params *GetAPIPlanUsingGET1Params, opts ...ClientOption) (*GetAPIPlanUsingGET1OK, error)

	GetAPIPlansUsingGET1(params *GetAPIPlansUsingGET1Params, opts ...ClientOption) (*GetAPIPlansUsingGET1OK, error)

	GetNumberOfAPIPlansUsingGET(params *GetNumberOfAPIPlansUsingGETParams, opts ...ClientOption) (*GetNumberOfAPIPlansUsingGETOK, error)

	PutAPIPlanOrgUsingPUT(params *PutAPIPlanOrgUsingPUTParams, opts ...ClientOption) error

	UpdateAPIPlanAPIUsingPUT1(params *UpdateAPIPlanAPIUsingPUT1Params, opts ...ClientOption) error

	UpdateAPIPlanUsingPUT(params *UpdateAPIPlanUsingPUTParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAPIPlanUsingPOST creates an API plan

Create an API Plan that controls how APIs can be consumed by developers within an organization. The API Plan comprises rate limit and/or quota information, along with the public or private APIs that these controls apply to. You can choose which organizations the API Plan applies to, allowing you to set custom access limits per organization for the the same APIs.
*/
func (a *Client) CreateAPIPlanUsingPOST(params *CreateAPIPlanUsingPOSTParams, opts ...ClientOption) (*CreateAPIPlanUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAPIPlanUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createApiPlanUsingPOST",
		Method:             "POST",
		PathPattern:        "/api-management/1.0/api-plans",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAPIPlanUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAPIPlanUsingPOSTCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createApiPlanUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAPIPlanAPIUsingDELETE1 deletes the association between a specific API plan and an API

Delete the association between a specific API Plan and an API.
*/
func (a *Client) DeleteAPIPlanAPIUsingDELETE1(params *DeleteAPIPlanAPIUsingDELETE1Params, opts ...ClientOption) (*DeleteAPIPlanAPIUsingDELETE1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIPlanAPIUsingDELETE1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteApiPlanApiUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/api-management/0.1/api-plans/{plan-uuid}/api/{api-uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIPlanAPIUsingDELETE1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIPlanAPIUsingDELETE1NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteApiPlanApiUsingDELETE_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAPIPlanOrgUsingDELETE deletes the association between a specific API plan and an organization

Delete the association between a specific API Plan and an Organization
*/
func (a *Client) DeleteAPIPlanOrgUsingDELETE(params *DeleteAPIPlanOrgUsingDELETEParams, opts ...ClientOption) (*DeleteAPIPlanOrgUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIPlanOrgUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteApiPlanOrgUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/api-management/0.1/api-plans/{uuid}/organization/{orguuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIPlanOrgUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIPlanOrgUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteApiPlanOrgUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAPIPlanUsingDELETE1 deletes a specific API plan by UUID
*/
func (a *Client) DeleteAPIPlanUsingDELETE1(params *DeleteAPIPlanUsingDELETE1Params, opts ...ClientOption) (*DeleteAPIPlanUsingDELETE1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIPlanUsingDELETE1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteApiPlanUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/api-management/1.0/api-plans/{uuid}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIPlanUsingDELETE1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIPlanUsingDELETE1NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteApiPlanUsingDELETE_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllAPIPlanApisUsingGET1 gets all associated API of API plan

All APIs associated with the specified API Plan will be retrieved.
*/
func (a *Client) GetAllAPIPlanApisUsingGET1(params *GetAllAPIPlanApisUsingGET1Params, opts ...ClientOption) (*GetAllAPIPlanApisUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAPIPlanApisUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllApiPlanApisUsingGET_1",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-plans/{uuid}/apis",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllAPIPlanApisUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAPIPlanApisUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllApiPlanApisUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllAPIPlanOrgsUsingGET1 gets all organizations associated with the specific API plan

Get all organizations associated with the specific API Plan
*/
func (a *Client) GetAllAPIPlanOrgsUsingGET1(params *GetAllAPIPlanOrgsUsingGET1Params, opts ...ClientOption) (*GetAllAPIPlanOrgsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAPIPlanOrgsUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllApiPlanOrgsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/api-management/0.1/api-plans/{uuid}/organizations",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllAPIPlanOrgsUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAPIPlanOrgsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllApiPlanOrgsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIPlanAPIUsingGET1 returns status of the association between an API with the API plan

Returns status of the association between an API with the API Plan.
*/
func (a *Client) GetAPIPlanAPIUsingGET1(params *GetAPIPlanAPIUsingGET1Params, opts ...ClientOption) (*GetAPIPlanAPIUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPlanAPIUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiPlanApiUsingGET_1",
		Method:             "GET",
		PathPattern:        "/api-management/0.1/api-plans/{plan-uuid}/api/{api-uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPlanAPIUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIPlanAPIUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiPlanApiUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIPlanOrgUsingGET1 checks if the specific organization is associated with an API plan

Check if the specific Organization is associated with an API Plan
*/
func (a *Client) GetAPIPlanOrgUsingGET1(params *GetAPIPlanOrgUsingGET1Params, opts ...ClientOption) (*GetAPIPlanOrgUsingGET1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPlanOrgUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiPlanOrgUsingGET_1",
		Method:             "GET",
		PathPattern:        "/api-management/0.1/api-plans/{uuid}/organization/{orguuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPlanOrgUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIPlanOrgUsingGET1NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiPlanOrgUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIPlanUsingGET1 gets specific API plan by UUID

Get Specific API Plan by UUID
*/
func (a *Client) GetAPIPlanUsingGET1(params *GetAPIPlanUsingGET1Params, opts ...ClientOption) (*GetAPIPlanUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPlanUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiPlanUsingGET_1",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-plans/{uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPlanUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIPlanUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiPlanUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIPlansUsingGET1 gets all API plans

All API Plans will be retrieved.
*/
func (a *Client) GetAPIPlansUsingGET1(params *GetAPIPlansUsingGET1Params, opts ...ClientOption) (*GetAPIPlansUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPlansUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiPlansUsingGET_1",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-plans",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPlansUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIPlansUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiPlansUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNumberOfAPIPlansUsingGET gets the number of API plans

Get The number of API Plans
*/
func (a *Client) GetNumberOfAPIPlansUsingGET(params *GetNumberOfAPIPlansUsingGETParams, opts ...ClientOption) (*GetNumberOfAPIPlansUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNumberOfAPIPlansUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNumberOfApiPlansUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-plans/count",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNumberOfAPIPlansUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNumberOfAPIPlansUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNumberOfApiPlansUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutAPIPlanOrgUsingPUT updates a specific API plan to be associated with an organization

Update a specific API Plan to be associated with an Organization
*/
func (a *Client) PutAPIPlanOrgUsingPUT(params *PutAPIPlanOrgUsingPUTParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIPlanOrgUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putApiPlanOrgUsingPUT",
		Method:             "PUT",
		PathPattern:        "/api-management/0.1/api-plans/{uuid}/organization/{orguuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIPlanOrgUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UpdateAPIPlanAPIUsingPUT1 updates a specific API plan to be associated with an API

Update a specific API Plan to be associated with an API.
*/
func (a *Client) UpdateAPIPlanAPIUsingPUT1(params *UpdateAPIPlanAPIUsingPUT1Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAPIPlanAPIUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateApiPlanApiUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/api-management/0.1/api-plans/{plan-uuid}/api/{api-uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAPIPlanAPIUsingPUT1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UpdateAPIPlanUsingPUT updates an API plan

Updates the API Plan associated with the given UUID
*/
func (a *Client) UpdateAPIPlanUsingPUT(params *UpdateAPIPlanUsingPUTParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAPIPlanUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateApiPlanUsingPUT",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/api-plans/{uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAPIPlanUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
