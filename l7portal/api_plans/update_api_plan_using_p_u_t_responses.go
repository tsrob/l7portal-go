// Code generated by go-swagger; DO NOT EDIT.

package api_plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tsrob/l7portal-go/models"
)

// UpdateAPIPlanUsingPUTReader is a Reader for the UpdateAPIPlanUsingPUT structure.
type UpdateAPIPlanUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAPIPlanUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewUpdateAPIPlanUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAPIPlanUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAPIPlanUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateAPIPlanUsingPUTBadRequest creates a UpdateAPIPlanUsingPUTBadRequest with default headers values
func NewUpdateAPIPlanUsingPUTBadRequest() *UpdateAPIPlanUsingPUTBadRequest {
	return &UpdateAPIPlanUsingPUTBadRequest{}
}

/*
UpdateAPIPlanUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request due to a validation error.
*/
type UpdateAPIPlanUsingPUTBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Api plan using p u t bad request response has a 2xx status code
func (o *UpdateAPIPlanUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Api plan using p u t bad request response has a 3xx status code
func (o *UpdateAPIPlanUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Api plan using p u t bad request response has a 4xx status code
func (o *UpdateAPIPlanUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Api plan using p u t bad request response has a 5xx status code
func (o *UpdateAPIPlanUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update Api plan using p u t bad request response a status code equal to that given
func (o *UpdateAPIPlanUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update Api plan using p u t bad request response
func (o *UpdateAPIPlanUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateAPIPlanUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api-management/1.0/api-plans/{uuid}][%d] updateApiPlanUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAPIPlanUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /api-management/1.0/api-plans/{uuid}][%d] updateApiPlanUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAPIPlanUsingPUTBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAPIPlanUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIPlanUsingPUTNotFound creates a UpdateAPIPlanUsingPUTNotFound with default headers values
func NewUpdateAPIPlanUsingPUTNotFound() *UpdateAPIPlanUsingPUTNotFound {
	return &UpdateAPIPlanUsingPUTNotFound{}
}

/*
UpdateAPIPlanUsingPUTNotFound describes a response with status code 404, with default header values.

Entity not found
*/
type UpdateAPIPlanUsingPUTNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Api plan using p u t not found response has a 2xx status code
func (o *UpdateAPIPlanUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Api plan using p u t not found response has a 3xx status code
func (o *UpdateAPIPlanUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Api plan using p u t not found response has a 4xx status code
func (o *UpdateAPIPlanUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Api plan using p u t not found response has a 5xx status code
func (o *UpdateAPIPlanUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update Api plan using p u t not found response a status code equal to that given
func (o *UpdateAPIPlanUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update Api plan using p u t not found response
func (o *UpdateAPIPlanUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateAPIPlanUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /api-management/1.0/api-plans/{uuid}][%d] updateApiPlanUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAPIPlanUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /api-management/1.0/api-plans/{uuid}][%d] updateApiPlanUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAPIPlanUsingPUTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAPIPlanUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIPlanUsingPUTInternalServerError creates a UpdateAPIPlanUsingPUTInternalServerError with default headers values
func NewUpdateAPIPlanUsingPUTInternalServerError() *UpdateAPIPlanUsingPUTInternalServerError {
	return &UpdateAPIPlanUsingPUTInternalServerError{}
}

/*
UpdateAPIPlanUsingPUTInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. Certain fields are missing from the request.
*/
type UpdateAPIPlanUsingPUTInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Api plan using p u t internal server error response has a 2xx status code
func (o *UpdateAPIPlanUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Api plan using p u t internal server error response has a 3xx status code
func (o *UpdateAPIPlanUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Api plan using p u t internal server error response has a 4xx status code
func (o *UpdateAPIPlanUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update Api plan using p u t internal server error response has a 5xx status code
func (o *UpdateAPIPlanUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update Api plan using p u t internal server error response a status code equal to that given
func (o *UpdateAPIPlanUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update Api plan using p u t internal server error response
func (o *UpdateAPIPlanUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateAPIPlanUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api-management/1.0/api-plans/{uuid}][%d] updateApiPlanUsingPUTInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAPIPlanUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api-management/1.0/api-plans/{uuid}][%d] updateApiPlanUsingPUTInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAPIPlanUsingPUTInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAPIPlanUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
