// Code generated by go-swagger; DO NOT EDIT.

package gateway_bundle_deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetGatewayBundleDeploymentsUsingGETParams creates a new GetGatewayBundleDeploymentsUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetGatewayBundleDeploymentsUsingGETParams() *GetGatewayBundleDeploymentsUsingGETParams {
	return &GetGatewayBundleDeploymentsUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetGatewayBundleDeploymentsUsingGETParamsWithTimeout creates a new GetGatewayBundleDeploymentsUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetGatewayBundleDeploymentsUsingGETParamsWithTimeout(timeout time.Duration) *GetGatewayBundleDeploymentsUsingGETParams {
	return &GetGatewayBundleDeploymentsUsingGETParams{
		timeout: timeout,
	}
}

// NewGetGatewayBundleDeploymentsUsingGETParamsWithContext creates a new GetGatewayBundleDeploymentsUsingGETParams object
// with the ability to set a context for a request.
func NewGetGatewayBundleDeploymentsUsingGETParamsWithContext(ctx context.Context) *GetGatewayBundleDeploymentsUsingGETParams {
	return &GetGatewayBundleDeploymentsUsingGETParams{
		Context: ctx,
	}
}

// NewGetGatewayBundleDeploymentsUsingGETParamsWithHTTPClient creates a new GetGatewayBundleDeploymentsUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetGatewayBundleDeploymentsUsingGETParamsWithHTTPClient(client *http.Client) *GetGatewayBundleDeploymentsUsingGETParams {
	return &GetGatewayBundleDeploymentsUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetGatewayBundleDeploymentsUsingGETParams contains all the parameters to send to the API endpoint

	for the get gateway bundle deployments using g e t operation.

	Typically these are written to a http.Request.
*/
type GetGatewayBundleDeploymentsUsingGETParams struct {

	/* Name.

	   Filter by full or partial name of the Gateway bundle.
	*/
	Name *string

	/* Status.

	   Filter by the Gateway bundle deployment status.
	*/
	Status *string

	/* UUID.

	   The Gateway bundle uuid.
	*/
	UUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get gateway bundle deployments using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGatewayBundleDeploymentsUsingGETParams) WithDefaults() *GetGatewayBundleDeploymentsUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get gateway bundle deployments using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGatewayBundleDeploymentsUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get gateway bundle deployments using g e t params
func (o *GetGatewayBundleDeploymentsUsingGETParams) WithTimeout(timeout time.Duration) *GetGatewayBundleDeploymentsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get gateway bundle deployments using g e t params
func (o *GetGatewayBundleDeploymentsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get gateway bundle deployments using g e t params
func (o *GetGatewayBundleDeploymentsUsingGETParams) WithContext(ctx context.Context) *GetGatewayBundleDeploymentsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get gateway bundle deployments using g e t params
func (o *GetGatewayBundleDeploymentsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get gateway bundle deployments using g e t params
func (o *GetGatewayBundleDeploymentsUsingGETParams) WithHTTPClient(client *http.Client) *GetGatewayBundleDeploymentsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get gateway bundle deployments using g e t params
func (o *GetGatewayBundleDeploymentsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the get gateway bundle deployments using g e t params
func (o *GetGatewayBundleDeploymentsUsingGETParams) WithName(name *string) *GetGatewayBundleDeploymentsUsingGETParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get gateway bundle deployments using g e t params
func (o *GetGatewayBundleDeploymentsUsingGETParams) SetName(name *string) {
	o.Name = name
}

// WithStatus adds the status to the get gateway bundle deployments using g e t params
func (o *GetGatewayBundleDeploymentsUsingGETParams) WithStatus(status *string) *GetGatewayBundleDeploymentsUsingGETParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get gateway bundle deployments using g e t params
func (o *GetGatewayBundleDeploymentsUsingGETParams) SetStatus(status *string) {
	o.Status = status
}

// WithUUID adds the uuid to the get gateway bundle deployments using g e t params
func (o *GetGatewayBundleDeploymentsUsingGETParams) WithUUID(uuid string) *GetGatewayBundleDeploymentsUsingGETParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the get gateway bundle deployments using g e t params
func (o *GetGatewayBundleDeploymentsUsingGETParams) SetUUID(uuid string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *GetGatewayBundleDeploymentsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
