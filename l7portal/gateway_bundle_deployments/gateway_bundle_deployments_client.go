// Code generated by go-swagger; DO NOT EDIT.

package gateway_bundle_deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new gateway bundle deployments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for gateway bundle deployments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateGatewayBundleDeploymentUsingPOST(params *CreateGatewayBundleDeploymentUsingPOSTParams, opts ...ClientOption) (*CreateGatewayBundleDeploymentUsingPOSTCreated, error)

	DeleteGatewayBundleDeploymentUsingDELETE(params *DeleteGatewayBundleDeploymentUsingDELETEParams, opts ...ClientOption) (*DeleteGatewayBundleDeploymentUsingDELETENoContent, error)

	GetGatewayBundleDeploymentDetailsUsingGET(params *GetGatewayBundleDeploymentDetailsUsingGETParams, opts ...ClientOption) (*GetGatewayBundleDeploymentDetailsUsingGETOK, error)

	GetGatewayBundleDeploymentsUsingGET(params *GetGatewayBundleDeploymentsUsingGETParams, opts ...ClientOption) (*GetGatewayBundleDeploymentsUsingGETOK, error)

	UpdateGatewayBundleDeploymentUsingPUT(params *UpdateGatewayBundleDeploymentUsingPUTParams, opts ...ClientOption) (*UpdateGatewayBundleDeploymentUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateGatewayBundleDeploymentUsingPOST deploys the gateway bundle to the proxy

The Gateway bundle will be deployed to the specified proxy. If the Gateway Bundle has policy template, it can be consumed by a Portal-published API. The policy must be available on the proxy where the API is deployed.
*/
func (a *Client) CreateGatewayBundleDeploymentUsingPOST(params *CreateGatewayBundleDeploymentUsingPOSTParams, opts ...ClientOption) (*CreateGatewayBundleDeploymentUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGatewayBundleDeploymentUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGatewayBundleDeploymentUsingPOST",
		Method:             "POST",
		PathPattern:        "/deployments/0.1/gateway-bundles/{uuid}/proxies",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGatewayBundleDeploymentUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGatewayBundleDeploymentUsingPOSTCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGatewayBundleDeploymentUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteGatewayBundleDeploymentUsingDELETE uns deploys the gateway bundle from the specified proxy

Un-deploys the Gateway bundle from the specified proxy. Action cannot be completed if the policy template created from the bundle is currently in use by one or more APIs deployed to the specified proxy.
*/
func (a *Client) DeleteGatewayBundleDeploymentUsingDELETE(params *DeleteGatewayBundleDeploymentUsingDELETEParams, opts ...ClientOption) (*DeleteGatewayBundleDeploymentUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGatewayBundleDeploymentUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteGatewayBundleDeploymentUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/deployments/0.1/gateway-bundles/{uuid}/proxies/{proxyUuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGatewayBundleDeploymentUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGatewayBundleDeploymentUsingDELETENoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGatewayBundleDeploymentUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGatewayBundleDeploymentDetailsUsingGET returns the gateway bundle deployment details for the specified proxy

Returns the Gateway bundle deployment details for the specified proxy.
*/
func (a *Client) GetGatewayBundleDeploymentDetailsUsingGET(params *GetGatewayBundleDeploymentDetailsUsingGETParams, opts ...ClientOption) (*GetGatewayBundleDeploymentDetailsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewayBundleDeploymentDetailsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGatewayBundleDeploymentDetailsUsingGET",
		Method:             "GET",
		PathPattern:        "/deployments/0.1/gateway-bundles/{uuid}/proxies/{proxyUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGatewayBundleDeploymentDetailsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewayBundleDeploymentDetailsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatewayBundleDeploymentDetailsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGatewayBundleDeploymentsUsingGET returns the list of proxies and gateway bundle deployment details

Returns the list of proxies and Gateway bundle deployment details, including status, message, and where the Bundle is deployed.
*/
func (a *Client) GetGatewayBundleDeploymentsUsingGET(params *GetGatewayBundleDeploymentsUsingGETParams, opts ...ClientOption) (*GetGatewayBundleDeploymentsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewayBundleDeploymentsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGatewayBundleDeploymentsUsingGET",
		Method:             "GET",
		PathPattern:        "/deployments/0.1/gateway-bundles/{uuid}/proxies",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGatewayBundleDeploymentsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewayBundleDeploymentsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatewayBundleDeploymentsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGatewayBundleDeploymentUsingPUT updates gateway bundle deployment status for a proxy

Updates the specified Gateway bundle's deployment status and message for the specified proxy.
*/
func (a *Client) UpdateGatewayBundleDeploymentUsingPUT(params *UpdateGatewayBundleDeploymentUsingPUTParams, opts ...ClientOption) (*UpdateGatewayBundleDeploymentUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGatewayBundleDeploymentUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGatewayBundleDeploymentUsingPUT",
		Method:             "PUT",
		PathPattern:        "/deployments/0.1/gateway-bundles/{uuid}/proxies/{proxyUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGatewayBundleDeploymentUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGatewayBundleDeploymentUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGatewayBundleDeploymentUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
