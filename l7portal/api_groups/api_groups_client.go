// Code generated by go-swagger; DO NOT EDIT.

package api_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new api groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAPIGroup(params *CreateAPIGroupParams, opts ...ClientOption) (*CreateAPIGroupCreated, error)

	DeleteAPIGroup(params *DeleteAPIGroupParams, opts ...ClientOption) error

	GetAPIGroup(params *GetAPIGroupParams, opts ...ClientOption) (*GetAPIGroupOK, error)

	GetAPIGroupAPIMapping(params *GetAPIGroupAPIMappingParams, opts ...ClientOption) (*GetAPIGroupAPIMappingOK, error)

	GetAPIGroups(params *GetAPIGroupsParams, opts ...ClientOption) (*GetAPIGroupsOK, error)

	UpdateAPIGroup(params *UpdateAPIGroupParams, opts ...ClientOption) error

	UpdateAPIGroupAPIMapping(params *UpdateAPIGroupAPIMappingParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAPIGroup creates an API group

Create an API Group.
*/
func (a *Client) CreateAPIGroup(params *CreateAPIGroupParams, opts ...ClientOption) (*CreateAPIGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAPIGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createApiGroup",
		Method:             "POST",
		PathPattern:        "/api-management/1.0/api-groups",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAPIGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAPIGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createApiGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAPIGroup deletes an existing API group

Delete an existing API Group. If API Group is used by an Application then it cannot be deleted.
*/
func (a *Client) DeleteAPIGroup(params *DeleteAPIGroupParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteApiGroup",
		Method:             "DELETE",
		PathPattern:        "/api-management/1.0/api-groups/{uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetAPIGroup returns a single API group

Returns the API Group with the specified UUID.
*/
func (a *Client) GetAPIGroup(params *GetAPIGroupParams, opts ...ClientOption) (*GetAPIGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiGroup",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-groups/{uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIGroupAPIMapping returns a p is of an API group

Returns a list of API references which have been associated with the specified API Group.
*/
func (a *Client) GetAPIGroupAPIMapping(params *GetAPIGroupAPIMappingParams, opts ...ClientOption) (*GetAPIGroupAPIMappingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIGroupAPIMappingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiGroupApiMapping",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-groups/{uuid}/apis",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIGroupAPIMappingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIGroupAPIMappingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiGroupApiMapping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIGroups returns list of API groups

List of API Groups.
*/
func (a *Client) GetAPIGroups(params *GetAPIGroupsParams, opts ...ClientOption) (*GetAPIGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiGroups",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-groups",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAPIGroup updates an existing API group

Updates the group with the specified UUID. All mandatory group attributes (eg. name, status, etc) are required in the payload. If an optional group attribute (eg. description) was set on the group, but it is not provided in the payload, then it will be reset to empty.
*/
func (a *Client) UpdateAPIGroup(params *UpdateAPIGroupParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAPIGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateApiGroup",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/api-groups/{uuid}",
		ProducesMediaTypes: []string{"text/plain;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAPIGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UpdateAPIGroupAPIMapping associates a p is with the specified API group

Associate APIs with the specified API Group. The previous API associations will be removed if not present in payload.
*/
func (a *Client) UpdateAPIGroupAPIMapping(params *UpdateAPIGroupAPIMappingParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAPIGroupAPIMappingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateApiGroupApiMapping",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/api-groups/{uuid}/apis",
		ProducesMediaTypes: []string{"text/plain;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAPIGroupAPIMappingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
