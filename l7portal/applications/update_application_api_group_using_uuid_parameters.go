// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateApplicationAPIGroupUsingUUIDParams creates a new UpdateApplicationAPIGroupUsingUUIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateApplicationAPIGroupUsingUUIDParams() *UpdateApplicationAPIGroupUsingUUIDParams {
	return &UpdateApplicationAPIGroupUsingUUIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateApplicationAPIGroupUsingUUIDParamsWithTimeout creates a new UpdateApplicationAPIGroupUsingUUIDParams object
// with the ability to set a timeout on a request.
func NewUpdateApplicationAPIGroupUsingUUIDParamsWithTimeout(timeout time.Duration) *UpdateApplicationAPIGroupUsingUUIDParams {
	return &UpdateApplicationAPIGroupUsingUUIDParams{
		timeout: timeout,
	}
}

// NewUpdateApplicationAPIGroupUsingUUIDParamsWithContext creates a new UpdateApplicationAPIGroupUsingUUIDParams object
// with the ability to set a context for a request.
func NewUpdateApplicationAPIGroupUsingUUIDParamsWithContext(ctx context.Context) *UpdateApplicationAPIGroupUsingUUIDParams {
	return &UpdateApplicationAPIGroupUsingUUIDParams{
		Context: ctx,
	}
}

// NewUpdateApplicationAPIGroupUsingUUIDParamsWithHTTPClient creates a new UpdateApplicationAPIGroupUsingUUIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateApplicationAPIGroupUsingUUIDParamsWithHTTPClient(client *http.Client) *UpdateApplicationAPIGroupUsingUUIDParams {
	return &UpdateApplicationAPIGroupUsingUUIDParams{
		HTTPClient: client,
	}
}

/*
UpdateApplicationAPIGroupUsingUUIDParams contains all the parameters to send to the API endpoint

	for the update application Api group using Uuid operation.

	Typically these are written to a http.Request.
*/
type UpdateApplicationAPIGroupUsingUUIDParams struct {

	/* APIGroup.

	   The Api-Group that will replace the application's existing Api-Group.
	*/
	APIGroup UpdateApplicationAPIGroupUsingUUIDBody

	/* AppUUID.

	   Uuid of the Application to be publish.
	*/
	AppUUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update application Api group using Uuid params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateApplicationAPIGroupUsingUUIDParams) WithDefaults() *UpdateApplicationAPIGroupUsingUUIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update application Api group using Uuid params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateApplicationAPIGroupUsingUUIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update application Api group using Uuid params
func (o *UpdateApplicationAPIGroupUsingUUIDParams) WithTimeout(timeout time.Duration) *UpdateApplicationAPIGroupUsingUUIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update application Api group using Uuid params
func (o *UpdateApplicationAPIGroupUsingUUIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update application Api group using Uuid params
func (o *UpdateApplicationAPIGroupUsingUUIDParams) WithContext(ctx context.Context) *UpdateApplicationAPIGroupUsingUUIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update application Api group using Uuid params
func (o *UpdateApplicationAPIGroupUsingUUIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update application Api group using Uuid params
func (o *UpdateApplicationAPIGroupUsingUUIDParams) WithHTTPClient(client *http.Client) *UpdateApplicationAPIGroupUsingUUIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update application Api group using Uuid params
func (o *UpdateApplicationAPIGroupUsingUUIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIGroup adds the aPIGroup to the update application Api group using Uuid params
func (o *UpdateApplicationAPIGroupUsingUUIDParams) WithAPIGroup(aPIGroup UpdateApplicationAPIGroupUsingUUIDBody) *UpdateApplicationAPIGroupUsingUUIDParams {
	o.SetAPIGroup(aPIGroup)
	return o
}

// SetAPIGroup adds the apiGroup to the update application Api group using Uuid params
func (o *UpdateApplicationAPIGroupUsingUUIDParams) SetAPIGroup(aPIGroup UpdateApplicationAPIGroupUsingUUIDBody) {
	o.APIGroup = aPIGroup
}

// WithAppUUID adds the appUUID to the update application Api group using Uuid params
func (o *UpdateApplicationAPIGroupUsingUUIDParams) WithAppUUID(appUUID string) *UpdateApplicationAPIGroupUsingUUIDParams {
	o.SetAppUUID(appUUID)
	return o
}

// SetAppUUID adds the appUuid to the update application Api group using Uuid params
func (o *UpdateApplicationAPIGroupUsingUUIDParams) SetAppUUID(appUUID string) {
	o.AppUUID = appUUID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateApplicationAPIGroupUsingUUIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.APIGroup); err != nil {
		return err
	}

	// path param appUuid
	if err := r.SetPathParam("appUuid", o.AppUUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
