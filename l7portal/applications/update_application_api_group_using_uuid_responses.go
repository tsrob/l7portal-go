// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/tsrob/l7portal-go/models"
)

// UpdateApplicationAPIGroupUsingUUIDReader is a Reader for the UpdateApplicationAPIGroupUsingUUID structure.
type UpdateApplicationAPIGroupUsingUUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateApplicationAPIGroupUsingUUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateApplicationAPIGroupUsingUUIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateApplicationAPIGroupUsingUUIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateApplicationAPIGroupUsingUUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateApplicationAPIGroupUsingUUIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateApplicationAPIGroupUsingUUIDNoContent creates a UpdateApplicationAPIGroupUsingUUIDNoContent with default headers values
func NewUpdateApplicationAPIGroupUsingUUIDNoContent() *UpdateApplicationAPIGroupUsingUUIDNoContent {
	return &UpdateApplicationAPIGroupUsingUUIDNoContent{}
}

/*
UpdateApplicationAPIGroupUsingUUIDNoContent describes a response with status code 204, with default header values.

OK, no Content to show
*/
type UpdateApplicationAPIGroupUsingUUIDNoContent struct {
}

// IsSuccess returns true when this update application Api group using Uuid no content response has a 2xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update application Api group using Uuid no content response has a 3xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update application Api group using Uuid no content response has a 4xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update application Api group using Uuid no content response has a 5xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update application Api group using Uuid no content response a status code equal to that given
func (o *UpdateApplicationAPIGroupUsingUUIDNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update application Api group using Uuid no content response
func (o *UpdateApplicationAPIGroupUsingUUIDNoContent) Code() int {
	return 204
}

func (o *UpdateApplicationAPIGroupUsingUUIDNoContent) Error() string {
	return fmt.Sprintf("[PUT /api-management/1.0/applications/{appUuid}/api-groups][%d] updateApplicationApiGroupUsingUuidNoContent ", 204)
}

func (o *UpdateApplicationAPIGroupUsingUUIDNoContent) String() string {
	return fmt.Sprintf("[PUT /api-management/1.0/applications/{appUuid}/api-groups][%d] updateApplicationApiGroupUsingUuidNoContent ", 204)
}

func (o *UpdateApplicationAPIGroupUsingUUIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateApplicationAPIGroupUsingUUIDBadRequest creates a UpdateApplicationAPIGroupUsingUUIDBadRequest with default headers values
func NewUpdateApplicationAPIGroupUsingUUIDBadRequest() *UpdateApplicationAPIGroupUsingUUIDBadRequest {
	return &UpdateApplicationAPIGroupUsingUUIDBadRequest{}
}

/*
UpdateApplicationAPIGroupUsingUUIDBadRequest describes a response with status code 400, with default header values.

Bad Request due to a validation error.
*/
type UpdateApplicationAPIGroupUsingUUIDBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update application Api group using Uuid bad request response has a 2xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update application Api group using Uuid bad request response has a 3xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update application Api group using Uuid bad request response has a 4xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update application Api group using Uuid bad request response has a 5xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update application Api group using Uuid bad request response a status code equal to that given
func (o *UpdateApplicationAPIGroupUsingUUIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update application Api group using Uuid bad request response
func (o *UpdateApplicationAPIGroupUsingUUIDBadRequest) Code() int {
	return 400
}

func (o *UpdateApplicationAPIGroupUsingUUIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api-management/1.0/applications/{appUuid}/api-groups][%d] updateApplicationApiGroupUsingUuidBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateApplicationAPIGroupUsingUUIDBadRequest) String() string {
	return fmt.Sprintf("[PUT /api-management/1.0/applications/{appUuid}/api-groups][%d] updateApplicationApiGroupUsingUuidBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateApplicationAPIGroupUsingUUIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateApplicationAPIGroupUsingUUIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateApplicationAPIGroupUsingUUIDNotFound creates a UpdateApplicationAPIGroupUsingUUIDNotFound with default headers values
func NewUpdateApplicationAPIGroupUsingUUIDNotFound() *UpdateApplicationAPIGroupUsingUUIDNotFound {
	return &UpdateApplicationAPIGroupUsingUUIDNotFound{}
}

/*
UpdateApplicationAPIGroupUsingUUIDNotFound describes a response with status code 404, with default header values.

Entity not found
*/
type UpdateApplicationAPIGroupUsingUUIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update application Api group using Uuid not found response has a 2xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update application Api group using Uuid not found response has a 3xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update application Api group using Uuid not found response has a 4xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update application Api group using Uuid not found response has a 5xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update application Api group using Uuid not found response a status code equal to that given
func (o *UpdateApplicationAPIGroupUsingUUIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update application Api group using Uuid not found response
func (o *UpdateApplicationAPIGroupUsingUUIDNotFound) Code() int {
	return 404
}

func (o *UpdateApplicationAPIGroupUsingUUIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /api-management/1.0/applications/{appUuid}/api-groups][%d] updateApplicationApiGroupUsingUuidNotFound  %+v", 404, o.Payload)
}

func (o *UpdateApplicationAPIGroupUsingUUIDNotFound) String() string {
	return fmt.Sprintf("[PUT /api-management/1.0/applications/{appUuid}/api-groups][%d] updateApplicationApiGroupUsingUuidNotFound  %+v", 404, o.Payload)
}

func (o *UpdateApplicationAPIGroupUsingUUIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateApplicationAPIGroupUsingUUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateApplicationAPIGroupUsingUUIDInternalServerError creates a UpdateApplicationAPIGroupUsingUUIDInternalServerError with default headers values
func NewUpdateApplicationAPIGroupUsingUUIDInternalServerError() *UpdateApplicationAPIGroupUsingUUIDInternalServerError {
	return &UpdateApplicationAPIGroupUsingUUIDInternalServerError{}
}

/*
UpdateApplicationAPIGroupUsingUUIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. Certain fields are missing from the request.
*/
type UpdateApplicationAPIGroupUsingUUIDInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update application Api group using Uuid internal server error response has a 2xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update application Api group using Uuid internal server error response has a 3xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update application Api group using Uuid internal server error response has a 4xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update application Api group using Uuid internal server error response has a 5xx status code
func (o *UpdateApplicationAPIGroupUsingUUIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update application Api group using Uuid internal server error response a status code equal to that given
func (o *UpdateApplicationAPIGroupUsingUUIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update application Api group using Uuid internal server error response
func (o *UpdateApplicationAPIGroupUsingUUIDInternalServerError) Code() int {
	return 500
}

func (o *UpdateApplicationAPIGroupUsingUUIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api-management/1.0/applications/{appUuid}/api-groups][%d] updateApplicationApiGroupUsingUuidInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateApplicationAPIGroupUsingUUIDInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api-management/1.0/applications/{appUuid}/api-groups][%d] updateApplicationApiGroupUsingUuidInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateApplicationAPIGroupUsingUUIDInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateApplicationAPIGroupUsingUUIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateApplicationAPIGroupUsingUUIDBody update application API group using UUID body
swagger:model UpdateApplicationAPIGroupUsingUUIDBody
*/
type UpdateApplicationAPIGroupUsingUUIDBody struct {

	// sources
	Sources []*models.ApplicationAPIGroupReference `json:"sources"`
}

// Validate validates this update application API group using UUID body
func (o *UpdateApplicationAPIGroupUsingUUIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateApplicationAPIGroupUsingUUIDBody) validateSources(formats strfmt.Registry) error {
	if swag.IsZero(o.Sources) { // not required
		return nil
	}

	for i := 0; i < len(o.Sources); i++ {
		if swag.IsZero(o.Sources[i]) { // not required
			continue
		}

		if o.Sources[i] != nil {
			if err := o.Sources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apiGroup" + "." + "sources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("apiGroup" + "." + "sources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update application API group using UUID body based on the context it is used
func (o *UpdateApplicationAPIGroupUsingUUIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateApplicationAPIGroupUsingUUIDBody) contextValidateSources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Sources); i++ {

		if o.Sources[i] != nil {
			if err := o.Sources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apiGroup" + "." + "sources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("apiGroup" + "." + "sources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateApplicationAPIGroupUsingUUIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateApplicationAPIGroupUsingUUIDBody) UnmarshalBinary(b []byte) error {
	var res UpdateApplicationAPIGroupUsingUUIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
