// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAddOrRemoveApifromApplicationbyUUIDParams creates a new AddOrRemoveApifromApplicationbyUUIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAddOrRemoveApifromApplicationbyUUIDParams() *AddOrRemoveApifromApplicationbyUUIDParams {
	return &AddOrRemoveApifromApplicationbyUUIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAddOrRemoveApifromApplicationbyUUIDParamsWithTimeout creates a new AddOrRemoveApifromApplicationbyUUIDParams object
// with the ability to set a timeout on a request.
func NewAddOrRemoveApifromApplicationbyUUIDParamsWithTimeout(timeout time.Duration) *AddOrRemoveApifromApplicationbyUUIDParams {
	return &AddOrRemoveApifromApplicationbyUUIDParams{
		timeout: timeout,
	}
}

// NewAddOrRemoveApifromApplicationbyUUIDParamsWithContext creates a new AddOrRemoveApifromApplicationbyUUIDParams object
// with the ability to set a context for a request.
func NewAddOrRemoveApifromApplicationbyUUIDParamsWithContext(ctx context.Context) *AddOrRemoveApifromApplicationbyUUIDParams {
	return &AddOrRemoveApifromApplicationbyUUIDParams{
		Context: ctx,
	}
}

// NewAddOrRemoveApifromApplicationbyUUIDParamsWithHTTPClient creates a new AddOrRemoveApifromApplicationbyUUIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewAddOrRemoveApifromApplicationbyUUIDParamsWithHTTPClient(client *http.Client) *AddOrRemoveApifromApplicationbyUUIDParams {
	return &AddOrRemoveApifromApplicationbyUUIDParams{
		HTTPClient: client,
	}
}

/*
AddOrRemoveApifromApplicationbyUUIDParams contains all the parameters to send to the API endpoint

	for the add or remove apifrom applicationby Uuid operation.

	Typically these are written to a http.Request.
*/
type AddOrRemoveApifromApplicationbyUUIDParams struct {

	/* Action.

	   Action to do with Api.
	*/
	Action *string

	/* Apis.

	   The Apis that will replace the Application's existing Apis.
	*/
	Apis AddOrRemoveApifromApplicationbyUUIDBody

	/* AppUUID.

	   The UUID of Application that need to update api.
	*/
	AppUUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the add or remove apifrom applicationby Uuid params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddOrRemoveApifromApplicationbyUUIDParams) WithDefaults() *AddOrRemoveApifromApplicationbyUUIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the add or remove apifrom applicationby Uuid params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddOrRemoveApifromApplicationbyUUIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the add or remove apifrom applicationby Uuid params
func (o *AddOrRemoveApifromApplicationbyUUIDParams) WithTimeout(timeout time.Duration) *AddOrRemoveApifromApplicationbyUUIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add or remove apifrom applicationby Uuid params
func (o *AddOrRemoveApifromApplicationbyUUIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add or remove apifrom applicationby Uuid params
func (o *AddOrRemoveApifromApplicationbyUUIDParams) WithContext(ctx context.Context) *AddOrRemoveApifromApplicationbyUUIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add or remove apifrom applicationby Uuid params
func (o *AddOrRemoveApifromApplicationbyUUIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add or remove apifrom applicationby Uuid params
func (o *AddOrRemoveApifromApplicationbyUUIDParams) WithHTTPClient(client *http.Client) *AddOrRemoveApifromApplicationbyUUIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add or remove apifrom applicationby Uuid params
func (o *AddOrRemoveApifromApplicationbyUUIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the add or remove apifrom applicationby Uuid params
func (o *AddOrRemoveApifromApplicationbyUUIDParams) WithAction(action *string) *AddOrRemoveApifromApplicationbyUUIDParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the add or remove apifrom applicationby Uuid params
func (o *AddOrRemoveApifromApplicationbyUUIDParams) SetAction(action *string) {
	o.Action = action
}

// WithApis adds the apis to the add or remove apifrom applicationby Uuid params
func (o *AddOrRemoveApifromApplicationbyUUIDParams) WithApis(apis AddOrRemoveApifromApplicationbyUUIDBody) *AddOrRemoveApifromApplicationbyUUIDParams {
	o.SetApis(apis)
	return o
}

// SetApis adds the apis to the add or remove apifrom applicationby Uuid params
func (o *AddOrRemoveApifromApplicationbyUUIDParams) SetApis(apis AddOrRemoveApifromApplicationbyUUIDBody) {
	o.Apis = apis
}

// WithAppUUID adds the appUUID to the add or remove apifrom applicationby Uuid params
func (o *AddOrRemoveApifromApplicationbyUUIDParams) WithAppUUID(appUUID string) *AddOrRemoveApifromApplicationbyUUIDParams {
	o.SetAppUUID(appUUID)
	return o
}

// SetAppUUID adds the appUuid to the add or remove apifrom applicationby Uuid params
func (o *AddOrRemoveApifromApplicationbyUUIDParams) SetAppUUID(appUUID string) {
	o.AppUUID = appUUID
}

// WriteToRequest writes these params to a swagger request
func (o *AddOrRemoveApifromApplicationbyUUIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Action != nil {

		// query param action
		var qrAction string

		if o.Action != nil {
			qrAction = *o.Action
		}
		qAction := qrAction
		if qAction != "" {

			if err := r.SetQueryParam("action", qAction); err != nil {
				return err
			}
		}
	}
	if err := r.SetBodyParam(o.Apis); err != nil {
		return err
	}

	// path param appUuid
	if err := r.SetPathParam("appUuid", o.AppUUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
