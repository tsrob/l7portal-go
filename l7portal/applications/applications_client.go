// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new applications API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for applications API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DetectifApplicationNameisUique(params *DetectifApplicationNameisUiqueParams, opts ...ClientOption) (*DetectifApplicationNameisUiqueOK, error)

	AddOrRemoveApifromApplicationbyUUID(params *AddOrRemoveApifromApplicationbyUUIDParams, opts ...ClientOption) (*AddOrRemoveApifromApplicationbyUUIDNoContent, error)

	CreateAPIKeyUsingPOST(params *CreateAPIKeyUsingPOSTParams, opts ...ClientOption) (*CreateAPIKeyUsingPOSTCreated, error)

	DeleteAPIKeyUsingDELETE(params *DeleteAPIKeyUsingDELETEParams, opts ...ClientOption) (*DeleteAPIKeyUsingDELETENoContent, error)

	DeleteApplicationUsingUUID(params *DeleteApplicationUsingUUIDParams, opts ...ClientOption) (*DeleteApplicationUsingUUIDNoContent, error)

	GetAllAPIKeyUsingGET1(params *GetAllAPIKeyUsingGET1Params, opts ...ClientOption) (*GetAllAPIKeyUsingGET1OK, error)

	GetAPIKeyDetailsListUsingGET(params *GetAPIKeyDetailsListUsingGETParams, opts ...ClientOption) (*GetAPIKeyDetailsListUsingGETOK, error)

	GetAPIKeyUsingGET(params *GetAPIKeyUsingGETParams, opts ...ClientOption) (*GetAPIKeyUsingGETOK, error)

	GetApisOfApplicationByUUID(params *GetApisOfApplicationByUUIDParams, opts ...ClientOption) (*GetApisOfApplicationByUUIDOK, error)

	GetApplicationAPIGroupUsingUUID(params *GetApplicationAPIGroupUsingUUIDParams, opts ...ClientOption) (*GetApplicationAPIGroupUsingUUIDOK, error)

	GetApplicationAPIPlanUsingUUID(params *GetApplicationAPIPlanUsingUUIDParams, opts ...ClientOption) (*GetApplicationAPIPlanUsingUUIDOK, error)

	GetApplicationCustomFieldUsingUUID(params *GetApplicationCustomFieldUsingUUIDParams, opts ...ClientOption) (*GetApplicationCustomFieldUsingUUIDOK, error)

	GetApplicationUsingUUID(params *GetApplicationUsingUUIDParams, opts ...ClientOption) (*GetApplicationUsingUUIDOK, error)

	GetApplications(params *GetApplicationsParams, opts ...ClientOption) (*GetApplicationsOK, error)

	PostApplications(params *PostApplicationsParams, opts ...ClientOption) (*PostApplicationsCreated, error)

	PublishApplicationUsingUUID(params *PublishApplicationUsingUUIDParams, opts ...ClientOption) (*PublishApplicationUsingUUIDNoContent, error)

	PutApplicationUsingUUID(params *PutApplicationUsingUUIDParams, opts ...ClientOption) (*PutApplicationUsingUUIDNoContent, error)

	ReplaceApplicationCustomFieldUsingUUID(params *ReplaceApplicationCustomFieldUsingUUIDParams, opts ...ClientOption) (*ReplaceApplicationCustomFieldUsingUUIDNoContent, error)

	UpdateAPIKeyUsingPUT1(params *UpdateAPIKeyUsingPUT1Params, opts ...ClientOption) (*UpdateAPIKeyUsingPUT1NoContent, error)

	UpdateApisOfApplicationByUUID(params *UpdateApisOfApplicationByUUIDParams, opts ...ClientOption) (*UpdateApisOfApplicationByUUIDNoContent, error)

	UpdateApplicationAPIGroupUsingUUID(params *UpdateApplicationAPIGroupUsingUUIDParams, opts ...ClientOption) (*UpdateApplicationAPIGroupUsingUUIDNoContent, error)

	UpdateApplicationAPIPlanUsingUUID(params *UpdateApplicationAPIPlanUsingUUIDParams, opts ...ClientOption) (*UpdateApplicationAPIPlanUsingUUIDNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DetectifApplicationNameisUique returns the result that if the name given is unique

Return the result that if the name given is unique.
*/
func (a *Client) DetectifApplicationNameisUique(params *DetectifApplicationNameisUiqueParams, opts ...ClientOption) (*DetectifApplicationNameisUiqueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetectifApplicationNameisUiqueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DetectifApplicationNameisUique",
		Method:             "GET",
		PathPattern:        "/api-management/0.1/applications/unique-name",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DetectifApplicationNameisUiqueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DetectifApplicationNameisUiqueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DetectifApplicationNameisUique: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddOrRemoveApifromApplicationbyUUID adds or remove api from an application

Add or remove Api from an Application.
*/
func (a *Client) AddOrRemoveApifromApplicationbyUUID(params *AddOrRemoveApifromApplicationbyUUIDParams, opts ...ClientOption) (*AddOrRemoveApifromApplicationbyUUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOrRemoveApifromApplicationbyUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addOrRemoveApifromApplicationbyUuid",
		Method:             "PATCH",
		PathPattern:        "/api-management/1.0/applications/{appUuid}/apis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddOrRemoveApifromApplicationbyUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddOrRemoveApifromApplicationbyUUIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addOrRemoveApifromApplicationbyUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAPIKeyUsingPOST adds an API key to an application

Adds an API key to an application. An API key requires a name and that its parent's applicationUuid is created. You can optionally supply its key, secret, OAuth parameters and specify if it is the default key. Adding an API key and assigning it as the default key unassigns the current default key. Applications can have only one assigned default key. You can manage the default key in the application entity via its key, secret, and OAuth values. If hashed secrets are enabled and configurable as either plain text or hashed, you can supply keySecretHashed to choose a hashed secret (true) or plaintext secret (false). API keys have their own status and are added with the ENABLED state.
*/
func (a *Client) CreateAPIKeyUsingPOST(params *CreateAPIKeyUsingPOSTParams, opts ...ClientOption) (*CreateAPIKeyUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAPIKeyUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createApiKeyUsingPOST",
		Method:             "POST",
		PathPattern:        "/api-management/1.0/applications/{appUuid}/api-keys",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAPIKeyUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAPIKeyUsingPOSTCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createApiKeyUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAPIKeyUsingDELETE deletes an API key from an application

Deletes an API key from an application. The API key must not be deployed to On Demand proxies and it must not be the default API key for the application. If it is, undeploy the API key before deleting it and assign another API key as the default API key for the application.
*/
func (a *Client) DeleteAPIKeyUsingDELETE(params *DeleteAPIKeyUsingDELETEParams, opts ...ClientOption) (*DeleteAPIKeyUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIKeyUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteApiKeyUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/api-management/1.0/applications/{appUuid}/api-keys/{apiKey}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIKeyUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIKeyUsingDELETENoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteApiKeyUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteApplicationUsingUUID deletes an application with given UUID

Delete an Application with given UUID.
*/
func (a *Client) DeleteApplicationUsingUUID(params *DeleteApplicationUsingUUIDParams, opts ...ClientOption) (*DeleteApplicationUsingUUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteApplicationUsingUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteApplicationUsingUuid",
		Method:             "DELETE",
		PathPattern:        "/api-management/1.0/applications/{appUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteApplicationUsingUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApplicationUsingUUIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteApplicationUsingUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllAPIKeyUsingGET1 retrieves a list of all the API keys for an application

Retrieves a paginated list of the API keys for an Application. The entire API key is returned including the key and secret. If keySecretHashed is true, keySecret is returned as a masked string of asterisks. If defaultKey is true, this key is the one returned as part of the application and is the one that the Org Admin can manage when editing the application.
*/
func (a *Client) GetAllAPIKeyUsingGET1(params *GetAllAPIKeyUsingGET1Params, opts ...ClientOption) (*GetAllAPIKeyUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAPIKeyUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllApiKeyUsingGET_1",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/applications/{appUuid}/api-keys",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllAPIKeyUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAPIKeyUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllApiKeyUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIKeyDetailsListUsingGET returns a list of API keys and details for the supplied API key s

Retrieves a list API Key and details for the supplied API Key(s). API Keys returned are accessible by the user's Organization.
*/
func (a *Client) GetAPIKeyDetailsListUsingGET(params *GetAPIKeyDetailsListUsingGETParams, opts ...ClientOption) (*GetAPIKeyDetailsListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIKeyDetailsListUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiKeyDetailsListUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-keys",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIKeyDetailsListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIKeyDetailsListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiKeyDetailsListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIKeyUsingGET retrieves an API key for an application

Retrieves an API Key for an application. The entire API key is returned including the key and secret. If keySecretHashed is true, keySecret is returned as a masked string of asterisks. If defaultKey is true, this key is the one returned as part of the application and is the one the Org Admin can manage when editing the application.
*/
func (a *Client) GetAPIKeyUsingGET(params *GetAPIKeyUsingGETParams, opts ...ClientOption) (*GetAPIKeyUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIKeyUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiKeyUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/applications/{appUuid}/api-keys/{apiKey}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIKeyUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIKeyUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiKeyUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApisOfApplicationByUUID gets apis of the application

Get all the apis of an application.
*/
func (a *Client) GetApisOfApplicationByUUID(params *GetApisOfApplicationByUUIDParams, opts ...ClientOption) (*GetApisOfApplicationByUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApisOfApplicationByUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApisOfApplicationByUuid",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/applications/{appUuid}/apis",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApisOfApplicationByUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApisOfApplicationByUUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApisOfApplicationByUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApplicationAPIGroupUsingUUID gets an application s api group

Get an Application's API Group by its UUID
*/
func (a *Client) GetApplicationAPIGroupUsingUUID(params *GetApplicationAPIGroupUsingUUIDParams, opts ...ClientOption) (*GetApplicationAPIGroupUsingUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationAPIGroupUsingUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplicationApiGroupUsingUuid",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/applications/{appUuid}/api-groups",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationAPIGroupUsingUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationAPIGroupUsingUUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationApiGroupUsingUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApplicationAPIPlanUsingUUID gets all the api plans of an application

Get all the API Plans of an Application, UUID of Apis and API Plans will be returned.
*/
func (a *Client) GetApplicationAPIPlanUsingUUID(params *GetApplicationAPIPlanUsingUUIDParams, opts ...ClientOption) (*GetApplicationAPIPlanUsingUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationAPIPlanUsingUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplicationApiPlanUsingUuid",
		Method:             "GET",
		PathPattern:        "/api-management/0.1/applications/{appUuid}/api-plans",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationAPIPlanUsingUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationAPIPlanUsingUUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationApiPlanUsingUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApplicationCustomFieldUsingUUID gets an application s custom field

Get an Application's custom field by its UUID.
*/
func (a *Client) GetApplicationCustomFieldUsingUUID(params *GetApplicationCustomFieldUsingUUIDParams, opts ...ClientOption) (*GetApplicationCustomFieldUsingUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationCustomFieldUsingUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplicationCustomFieldUsingUuid",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/applications/{appUuid}/custom-fields",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationCustomFieldUsingUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationCustomFieldUsingUUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationCustomFieldUsingUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApplicationUsingUUID gets an application with given UUID

Get the Application with given UUID.
*/
func (a *Client) GetApplicationUsingUUID(params *GetApplicationUsingUUIDParams, opts ...ClientOption) (*GetApplicationUsingUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationUsingUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplicationUsingUuid",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/applications/{appUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationUsingUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationUsingUUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationUsingUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApplications returns a list of all applications

Returns a list of all Applications.

	Mostly Org Admins and Developers work with applications in API Portal. However, Portal Admin and API Owners work with applications to test their APIs and API Portal. All users except Developers can add applications. When you add an application, API Portal auto-generates an API key and shared secret for the application. Org Admins and Developers who want their application to use the APIs in the application must add the API key and shared secret (if using OAuth) to their application.
*/
func (a *Client) GetApplications(params *GetApplicationsParams, opts ...ClientOption) (*GetApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplications",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/applications",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostApplications creates an application

Create an Application.

	Mostly Org Admins and Developers work with applications in API Portal. However, Portal Admin and API Owners work with applications to test their APIs and API Portal. All users except Developers can add applications. When you add an application, API Portal auto-generates an API key and shared secret for the application. Org Admins and Developers who want their application to use the APIs in the application must add the API key and shared secret (if using OAuth) to their application.
*/
func (a *Client) PostApplications(params *PostApplicationsParams, opts ...ClientOption) (*PostApplicationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostApplicationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postApplications",
		Method:             "POST",
		PathPattern:        "/api-management/1.0/applications",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostApplicationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApplicationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postApplications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PublishApplicationUsingUUID publishes an application

Publish an Application with given UUID
*/
func (a *Client) PublishApplicationUsingUUID(params *PublishApplicationUsingUUIDParams, opts ...ClientOption) (*PublishApplicationUsingUUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublishApplicationUsingUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "publishApplicationUsingUuid",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/applications/{appUuid}/publish",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublishApplicationUsingUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PublishApplicationUsingUUIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for publishApplicationUsingUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutApplicationUsingUUID updates an application with given UUID

Update the Application's basic information with given UUID.
*/
func (a *Client) PutApplicationUsingUUID(params *PutApplicationUsingUUIDParams, opts ...ClientOption) (*PutApplicationUsingUUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutApplicationUsingUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putApplicationUsingUuid",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/applications/{appUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutApplicationUsingUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutApplicationUsingUUIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putApplicationUsingUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReplaceApplicationCustomFieldUsingUUID updates an application s custom field

Update an Application's custom field by its UUID.
*/
func (a *Client) ReplaceApplicationCustomFieldUsingUUID(params *ReplaceApplicationCustomFieldUsingUUIDParams, opts ...ClientOption) (*ReplaceApplicationCustomFieldUsingUUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceApplicationCustomFieldUsingUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceApplicationCustomFieldUsingUuid",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/applications/{appUuid}/custom-fields",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceApplicationCustomFieldUsingUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceApplicationCustomFieldUsingUUIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceApplicationCustomFieldUsingUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAPIKeyUsingPUT1 updates an API key for an application

Updates an API key for an application using the values provided. You can update the key's name, secret, OAuth values, and default key setting. If updating the secret, you can supply keySecretHashed to configure a hashed (true) or plaintext (false) secret if hashed secrets are enabled. You can change the API key's state between ENABLED and DISABLED. Disabling an API key prevents it from being used to access the application's APIs.
*/
func (a *Client) UpdateAPIKeyUsingPUT1(params *UpdateAPIKeyUsingPUT1Params, opts ...ClientOption) (*UpdateAPIKeyUsingPUT1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAPIKeyUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateApiKeyUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/applications/{appUuid}/api-keys/{apiKey}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAPIKeyUsingPUT1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAPIKeyUsingPUT1NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateApiKeyUsingPUT_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateApisOfApplicationByUUID updates apis of the application

Replace all the apis of an Application with the ones in the request.
*/
func (a *Client) UpdateApisOfApplicationByUUID(params *UpdateApisOfApplicationByUUIDParams, opts ...ClientOption) (*UpdateApisOfApplicationByUUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateApisOfApplicationByUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateApisOfApplicationByUuid",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/applications/{appUuid}/apis",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateApisOfApplicationByUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateApisOfApplicationByUUIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateApisOfApplicationByUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateApplicationAPIGroupUsingUUID updates API groups of an application

Update API groups of an Application.
*/
func (a *Client) UpdateApplicationAPIGroupUsingUUID(params *UpdateApplicationAPIGroupUsingUUIDParams, opts ...ClientOption) (*UpdateApplicationAPIGroupUsingUUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateApplicationAPIGroupUsingUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateApplicationApiGroupUsingUuid",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/applications/{appUuid}/api-groups",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateApplicationAPIGroupUsingUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateApplicationAPIGroupUsingUUIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateApplicationApiGroupUsingUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateApplicationAPIPlanUsingUUID updates API plan of an application

Update API plan of a specific Application by UUID.
*/
func (a *Client) UpdateApplicationAPIPlanUsingUUID(params *UpdateApplicationAPIPlanUsingUUIDParams, opts ...ClientOption) (*UpdateApplicationAPIPlanUsingUUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateApplicationAPIPlanUsingUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateApplicationApiPlanUsingUuid",
		Method:             "PUT",
		PathPattern:        "/api-management/0.1/applications/{appUuid}/api-plans",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateApplicationAPIPlanUsingUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateApplicationAPIPlanUsingUUIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateApplicationApiPlanUsingUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
