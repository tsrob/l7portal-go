// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetApplicationsParams creates a new GetApplicationsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetApplicationsParams() *GetApplicationsParams {
	return &GetApplicationsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetApplicationsParamsWithTimeout creates a new GetApplicationsParams object
// with the ability to set a timeout on a request.
func NewGetApplicationsParamsWithTimeout(timeout time.Duration) *GetApplicationsParams {
	return &GetApplicationsParams{
		timeout: timeout,
	}
}

// NewGetApplicationsParamsWithContext creates a new GetApplicationsParams object
// with the ability to set a context for a request.
func NewGetApplicationsParamsWithContext(ctx context.Context) *GetApplicationsParams {
	return &GetApplicationsParams{
		Context: ctx,
	}
}

// NewGetApplicationsParamsWithHTTPClient creates a new GetApplicationsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetApplicationsParamsWithHTTPClient(client *http.Client) *GetApplicationsParams {
	return &GetApplicationsParams{
		HTTPClient: client,
	}
}

/*
GetApplicationsParams contains all the parameters to send to the API endpoint

	for the get applications operation.

	Typically these are written to a http.Request.
*/
type GetApplicationsParams struct {

	/* APIGroupUUID.

	   The API Group UUID to filter the list of Applications having this API Group.
	*/
	APIGroupUUID *string

	/* APIPlanUUID.

	   The API Plan UUID to filter the list of Applications having an API that is configured to use this API Plan.
	*/
	APIPlanUUID *string

	/* APIUUID.

	   The API UUID to filter the list of Applications having this API.
	*/
	APIUUID *string

	/* Name.

	   The list of Applications containing this name.
	*/
	Name *string

	/* OrgName.

	   The list of Applications containing this organization name.
	*/
	OrgName *string

	/* Status.

	   The status of the application to filter the list of Applications.
	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get applications params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetApplicationsParams) WithDefaults() *GetApplicationsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get applications params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetApplicationsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get applications params
func (o *GetApplicationsParams) WithTimeout(timeout time.Duration) *GetApplicationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get applications params
func (o *GetApplicationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get applications params
func (o *GetApplicationsParams) WithContext(ctx context.Context) *GetApplicationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get applications params
func (o *GetApplicationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get applications params
func (o *GetApplicationsParams) WithHTTPClient(client *http.Client) *GetApplicationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get applications params
func (o *GetApplicationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIGroupUUID adds the aPIGroupUUID to the get applications params
func (o *GetApplicationsParams) WithAPIGroupUUID(aPIGroupUUID *string) *GetApplicationsParams {
	o.SetAPIGroupUUID(aPIGroupUUID)
	return o
}

// SetAPIGroupUUID adds the apiGroupUuid to the get applications params
func (o *GetApplicationsParams) SetAPIGroupUUID(aPIGroupUUID *string) {
	o.APIGroupUUID = aPIGroupUUID
}

// WithAPIPlanUUID adds the aPIPlanUUID to the get applications params
func (o *GetApplicationsParams) WithAPIPlanUUID(aPIPlanUUID *string) *GetApplicationsParams {
	o.SetAPIPlanUUID(aPIPlanUUID)
	return o
}

// SetAPIPlanUUID adds the apiPlanUuid to the get applications params
func (o *GetApplicationsParams) SetAPIPlanUUID(aPIPlanUUID *string) {
	o.APIPlanUUID = aPIPlanUUID
}

// WithAPIUUID adds the aPIUUID to the get applications params
func (o *GetApplicationsParams) WithAPIUUID(aPIUUID *string) *GetApplicationsParams {
	o.SetAPIUUID(aPIUUID)
	return o
}

// SetAPIUUID adds the apiUuid to the get applications params
func (o *GetApplicationsParams) SetAPIUUID(aPIUUID *string) {
	o.APIUUID = aPIUUID
}

// WithName adds the name to the get applications params
func (o *GetApplicationsParams) WithName(name *string) *GetApplicationsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get applications params
func (o *GetApplicationsParams) SetName(name *string) {
	o.Name = name
}

// WithOrgName adds the orgName to the get applications params
func (o *GetApplicationsParams) WithOrgName(orgName *string) *GetApplicationsParams {
	o.SetOrgName(orgName)
	return o
}

// SetOrgName adds the orgName to the get applications params
func (o *GetApplicationsParams) SetOrgName(orgName *string) {
	o.OrgName = orgName
}

// WithStatus adds the status to the get applications params
func (o *GetApplicationsParams) WithStatus(status *string) *GetApplicationsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get applications params
func (o *GetApplicationsParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetApplicationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIGroupUUID != nil {

		// query param apiGroupUuid
		var qrAPIGroupUUID string

		if o.APIGroupUUID != nil {
			qrAPIGroupUUID = *o.APIGroupUUID
		}
		qAPIGroupUUID := qrAPIGroupUUID
		if qAPIGroupUUID != "" {

			if err := r.SetQueryParam("apiGroupUuid", qAPIGroupUUID); err != nil {
				return err
			}
		}
	}

	if o.APIPlanUUID != nil {

		// query param apiPlanUuid
		var qrAPIPlanUUID string

		if o.APIPlanUUID != nil {
			qrAPIPlanUUID = *o.APIPlanUUID
		}
		qAPIPlanUUID := qrAPIPlanUUID
		if qAPIPlanUUID != "" {

			if err := r.SetQueryParam("apiPlanUuid", qAPIPlanUUID); err != nil {
				return err
			}
		}
	}

	if o.APIUUID != nil {

		// query param apiUuid
		var qrAPIUUID string

		if o.APIUUID != nil {
			qrAPIUUID = *o.APIUUID
		}
		qAPIUUID := qrAPIUUID
		if qAPIUUID != "" {

			if err := r.SetQueryParam("apiUuid", qAPIUUID); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrgName != nil {

		// query param orgName
		var qrOrgName string

		if o.OrgName != nil {
			qrOrgName = *o.OrgName
		}
		qOrgName := qrOrgName
		if qOrgName != "" {

			if err := r.SetQueryParam("orgName", qOrgName); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
