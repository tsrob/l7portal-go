// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateApplicationAPIPlanUsingUUIDParams creates a new UpdateApplicationAPIPlanUsingUUIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateApplicationAPIPlanUsingUUIDParams() *UpdateApplicationAPIPlanUsingUUIDParams {
	return &UpdateApplicationAPIPlanUsingUUIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateApplicationAPIPlanUsingUUIDParamsWithTimeout creates a new UpdateApplicationAPIPlanUsingUUIDParams object
// with the ability to set a timeout on a request.
func NewUpdateApplicationAPIPlanUsingUUIDParamsWithTimeout(timeout time.Duration) *UpdateApplicationAPIPlanUsingUUIDParams {
	return &UpdateApplicationAPIPlanUsingUUIDParams{
		timeout: timeout,
	}
}

// NewUpdateApplicationAPIPlanUsingUUIDParamsWithContext creates a new UpdateApplicationAPIPlanUsingUUIDParams object
// with the ability to set a context for a request.
func NewUpdateApplicationAPIPlanUsingUUIDParamsWithContext(ctx context.Context) *UpdateApplicationAPIPlanUsingUUIDParams {
	return &UpdateApplicationAPIPlanUsingUUIDParams{
		Context: ctx,
	}
}

// NewUpdateApplicationAPIPlanUsingUUIDParamsWithHTTPClient creates a new UpdateApplicationAPIPlanUsingUUIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateApplicationAPIPlanUsingUUIDParamsWithHTTPClient(client *http.Client) *UpdateApplicationAPIPlanUsingUUIDParams {
	return &UpdateApplicationAPIPlanUsingUUIDParams{
		HTTPClient: client,
	}
}

/*
UpdateApplicationAPIPlanUsingUUIDParams contains all the parameters to send to the API endpoint

	for the update application Api plan using Uuid operation.

	Typically these are written to a http.Request.
*/
type UpdateApplicationAPIPlanUsingUUIDParams struct {

	/* APIPlans.

	   The API Plan that will replace the Application's existing API Plan.
	*/
	APIPlans UpdateApplicationAPIPlanUsingUUIDBody

	/* AppUUID.

	   UUID of the Application to be update.
	*/
	AppUUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update application Api plan using Uuid params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateApplicationAPIPlanUsingUUIDParams) WithDefaults() *UpdateApplicationAPIPlanUsingUUIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update application Api plan using Uuid params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateApplicationAPIPlanUsingUUIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update application Api plan using Uuid params
func (o *UpdateApplicationAPIPlanUsingUUIDParams) WithTimeout(timeout time.Duration) *UpdateApplicationAPIPlanUsingUUIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update application Api plan using Uuid params
func (o *UpdateApplicationAPIPlanUsingUUIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update application Api plan using Uuid params
func (o *UpdateApplicationAPIPlanUsingUUIDParams) WithContext(ctx context.Context) *UpdateApplicationAPIPlanUsingUUIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update application Api plan using Uuid params
func (o *UpdateApplicationAPIPlanUsingUUIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update application Api plan using Uuid params
func (o *UpdateApplicationAPIPlanUsingUUIDParams) WithHTTPClient(client *http.Client) *UpdateApplicationAPIPlanUsingUUIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update application Api plan using Uuid params
func (o *UpdateApplicationAPIPlanUsingUUIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIPlans adds the aPIPlans to the update application Api plan using Uuid params
func (o *UpdateApplicationAPIPlanUsingUUIDParams) WithAPIPlans(aPIPlans UpdateApplicationAPIPlanUsingUUIDBody) *UpdateApplicationAPIPlanUsingUUIDParams {
	o.SetAPIPlans(aPIPlans)
	return o
}

// SetAPIPlans adds the apiPlans to the update application Api plan using Uuid params
func (o *UpdateApplicationAPIPlanUsingUUIDParams) SetAPIPlans(aPIPlans UpdateApplicationAPIPlanUsingUUIDBody) {
	o.APIPlans = aPIPlans
}

// WithAppUUID adds the appUUID to the update application Api plan using Uuid params
func (o *UpdateApplicationAPIPlanUsingUUIDParams) WithAppUUID(appUUID string) *UpdateApplicationAPIPlanUsingUUIDParams {
	o.SetAppUUID(appUUID)
	return o
}

// SetAppUUID adds the appUuid to the update application Api plan using Uuid params
func (o *UpdateApplicationAPIPlanUsingUUIDParams) SetAppUUID(appUUID string) {
	o.AppUUID = appUUID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateApplicationAPIPlanUsingUUIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.APIPlans); err != nil {
		return err
	}

	// path param appUuid
	if err := r.SetPathParam("appUuid", o.AppUUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
