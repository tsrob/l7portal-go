// Code generated by go-swagger; DO NOT EDIT.

package api_catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new api catalogs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api catalogs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPICatalogAllAssetFilesAsZipUsingGET(params *GetAPICatalogAllAssetFilesAsZipUsingGETParams, opts ...ClientOption) (*GetAPICatalogAllAssetFilesAsZipUsingGETOK, error)

	GetAPICatalogAssetFileUsingGET(params *GetAPICatalogAssetFileUsingGETParams, opts ...ClientOption) (*GetAPICatalogAssetFileUsingGETOK, error)

	GetAPICatalogAssetsUsingGET(params *GetAPICatalogAssetsUsingGETParams, opts ...ClientOption) (*GetAPICatalogAssetsUsingGETOK, error)

	GetAPICatalogMarkDownAssetByNavTitle(params *GetAPICatalogMarkDownAssetByNavTitleParams, opts ...ClientOption) (*GetAPICatalogMarkDownAssetByNavTitleOK, error)

	GetAPICatalogMarkDownAssetDocs(params *GetAPICatalogMarkDownAssetDocsParams, opts ...ClientOption) (*GetAPICatalogMarkDownAssetDocsOK, error)

	GetAPICatalogSwaggerWithContentUsingGET(params *GetAPICatalogSwaggerWithContentUsingGETParams, opts ...ClientOption) (*GetAPICatalogSwaggerWithContentUsingGETOK, error)

	GetAPICatalogWsdlWithContentUsingGET(params *GetAPICatalogWsdlWithContentUsingGETParams, opts ...ClientOption) (*GetAPICatalogWsdlWithContentUsingGETOK, error)

	GetAPICatalogs(params *GetAPICatalogsParams, opts ...ClientOption) (*GetAPICatalogsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAPICatalogAllAssetFilesAsZipUsingGET downloads all asset files linked to the API as z IP
*/
func (a *Client) GetAPICatalogAllAssetFilesAsZipUsingGET(params *GetAPICatalogAllAssetFilesAsZipUsingGETParams, opts ...ClientOption) (*GetAPICatalogAllAssetFilesAsZipUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPICatalogAllAssetFilesAsZipUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiCatalogAllAssetFilesAsZipUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-catalogs/{apiUuid}/assets/archive",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPICatalogAllAssetFilesAsZipUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPICatalogAllAssetFilesAsZipUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiCatalogAllAssetFilesAsZipUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPICatalogAssetFileUsingGET downloads the asset file linked to the API
*/
func (a *Client) GetAPICatalogAssetFileUsingGET(params *GetAPICatalogAssetFileUsingGETParams, opts ...ClientOption) (*GetAPICatalogAssetFileUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPICatalogAssetFileUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiCatalogAssetFileUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-catalogs/{apiUuid}/assets/{uuid}/file",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPICatalogAssetFileUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPICatalogAssetFileUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiCatalogAssetFileUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPICatalogAssetsUsingGET gets the assets linked to the API

Get the assets linked to the API. A REST API can have an optionally specified WADL, or Swagger JSON file. A SOAP API must have a WSDL specified for it.
*/
func (a *Client) GetAPICatalogAssetsUsingGET(params *GetAPICatalogAssetsUsingGETParams, opts ...ClientOption) (*GetAPICatalogAssetsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPICatalogAssetsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiCatalogAssetsUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-catalogs/{apiUuid}/assets",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPICatalogAssetsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPICatalogAssetsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiCatalogAssetsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPICatalogMarkDownAssetByNavTitle returns a specific document for the associated API

Returns a specific document. Use this endpoint to return the specific document associated with the 'navtitle' and 'locale' combination.
*/
func (a *Client) GetAPICatalogMarkDownAssetByNavTitle(params *GetAPICatalogMarkDownAssetByNavTitleParams, opts ...ClientOption) (*GetAPICatalogMarkDownAssetByNavTitleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPICatalogMarkDownAssetByNavTitleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiCatalogMarkDownAssetByNavTitle",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-catalogs/{apiUuid}/docs/{navtitle}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPICatalogMarkDownAssetByNavTitleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPICatalogMarkDownAssetByNavTitleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiCatalogMarkDownAssetByNavTitle: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPICatalogMarkDownAssetDocs returns a list of available documents for a specific API

Returns the  metadata (excluding the markdown) for each of the documents that is associated with API.
*/
func (a *Client) GetAPICatalogMarkDownAssetDocs(params *GetAPICatalogMarkDownAssetDocsParams, opts ...ClientOption) (*GetAPICatalogMarkDownAssetDocsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPICatalogMarkDownAssetDocsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiCatalogMarkDownAssetDocs",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-catalogs/{apiUuid}/docs",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPICatalogMarkDownAssetDocsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPICatalogMarkDownAssetDocsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiCatalogMarkDownAssetDocs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPICatalogSwaggerWithContentUsingGET gets an API s swagger

If this is a REST API, its swagger asset will be returned.
*/
func (a *Client) GetAPICatalogSwaggerWithContentUsingGET(params *GetAPICatalogSwaggerWithContentUsingGETParams, opts ...ClientOption) (*GetAPICatalogSwaggerWithContentUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPICatalogSwaggerWithContentUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiCatalogSwaggerWithContentUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-catalogs/{apiUuid}/assets/swagger",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPICatalogSwaggerWithContentUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPICatalogSwaggerWithContentUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiCatalogSwaggerWithContentUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPICatalogWsdlWithContentUsingGET gets an API s w s d l

If this is a SOAP API, its WSDL asset will be returned.
*/
func (a *Client) GetAPICatalogWsdlWithContentUsingGET(params *GetAPICatalogWsdlWithContentUsingGETParams, opts ...ClientOption) (*GetAPICatalogWsdlWithContentUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPICatalogWsdlWithContentUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiCatalogWsdlWithContentUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-catalogs/{apiUuid}/assets/wsdl",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPICatalogWsdlWithContentUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPICatalogWsdlWithContentUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiCatalogWsdlWithContentUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPICatalogs lists of a p is in API portal based on the filter parameters

List of APIs in API Portal based on the filter parameters.
*/
func (a *Client) GetAPICatalogs(params *GetAPICatalogsParams, opts ...ClientOption) (*GetAPICatalogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPICatalogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiCatalogs",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/api-catalogs",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPICatalogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPICatalogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiCatalogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
