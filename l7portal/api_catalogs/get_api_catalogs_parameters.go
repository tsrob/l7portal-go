// Code generated by go-swagger; DO NOT EDIT.

package api_catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPICatalogsParams creates a new GetAPICatalogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPICatalogsParams() *GetAPICatalogsParams {
	return &GetAPICatalogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPICatalogsParamsWithTimeout creates a new GetAPICatalogsParams object
// with the ability to set a timeout on a request.
func NewGetAPICatalogsParamsWithTimeout(timeout time.Duration) *GetAPICatalogsParams {
	return &GetAPICatalogsParams{
		timeout: timeout,
	}
}

// NewGetAPICatalogsParamsWithContext creates a new GetAPICatalogsParams object
// with the ability to set a context for a request.
func NewGetAPICatalogsParamsWithContext(ctx context.Context) *GetAPICatalogsParams {
	return &GetAPICatalogsParams{
		Context: ctx,
	}
}

// NewGetAPICatalogsParamsWithHTTPClient creates a new GetAPICatalogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPICatalogsParamsWithHTTPClient(client *http.Client) *GetAPICatalogsParams {
	return &GetAPICatalogsParams{
		HTTPClient: client,
	}
}

/*
GetAPICatalogsParams contains all the parameters to send to the API endpoint

	for the get Api catalogs operation.

	Typically these are written to a http.Request.
*/
type GetAPICatalogsParams struct {

	/* AccessStatus.

	   Access status of an API.
	*/
	AccessStatus *string

	/* APIServiceType.

	   Service Type of an API.
	*/
	APIServiceType *string

	/* Description.

	   Description of an API.
	*/
	Description *string

	/* Name.

	   Name of an API.
	*/
	Name *string

	/* Page.

	   Fetch records of given page number.
	*/
	Page *int64

	/* PortalStatus.

	   API Status to filter the API list.
	*/
	PortalStatus *string

	/* Size.

	   Number of APIs per page to be fetched.
	*/
	Size *int64

	/* Sort.

	   A parameter on which APIs will be sorted.
	*/
	Sort *string

	/* Tags.

	   Comma separated API tags to filter the API list.
	*/
	Tags []string

	/* UUID.

	   Uuid of an API filter the API list.
	*/
	UUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get Api catalogs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPICatalogsParams) WithDefaults() *GetAPICatalogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get Api catalogs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPICatalogsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get Api catalogs params
func (o *GetAPICatalogsParams) WithTimeout(timeout time.Duration) *GetAPICatalogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get Api catalogs params
func (o *GetAPICatalogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get Api catalogs params
func (o *GetAPICatalogsParams) WithContext(ctx context.Context) *GetAPICatalogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get Api catalogs params
func (o *GetAPICatalogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get Api catalogs params
func (o *GetAPICatalogsParams) WithHTTPClient(client *http.Client) *GetAPICatalogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get Api catalogs params
func (o *GetAPICatalogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessStatus adds the accessStatus to the get Api catalogs params
func (o *GetAPICatalogsParams) WithAccessStatus(accessStatus *string) *GetAPICatalogsParams {
	o.SetAccessStatus(accessStatus)
	return o
}

// SetAccessStatus adds the accessStatus to the get Api catalogs params
func (o *GetAPICatalogsParams) SetAccessStatus(accessStatus *string) {
	o.AccessStatus = accessStatus
}

// WithAPIServiceType adds the aPIServiceType to the get Api catalogs params
func (o *GetAPICatalogsParams) WithAPIServiceType(aPIServiceType *string) *GetAPICatalogsParams {
	o.SetAPIServiceType(aPIServiceType)
	return o
}

// SetAPIServiceType adds the apiServiceType to the get Api catalogs params
func (o *GetAPICatalogsParams) SetAPIServiceType(aPIServiceType *string) {
	o.APIServiceType = aPIServiceType
}

// WithDescription adds the description to the get Api catalogs params
func (o *GetAPICatalogsParams) WithDescription(description *string) *GetAPICatalogsParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the get Api catalogs params
func (o *GetAPICatalogsParams) SetDescription(description *string) {
	o.Description = description
}

// WithName adds the name to the get Api catalogs params
func (o *GetAPICatalogsParams) WithName(name *string) *GetAPICatalogsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get Api catalogs params
func (o *GetAPICatalogsParams) SetName(name *string) {
	o.Name = name
}

// WithPage adds the page to the get Api catalogs params
func (o *GetAPICatalogsParams) WithPage(page *int64) *GetAPICatalogsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get Api catalogs params
func (o *GetAPICatalogsParams) SetPage(page *int64) {
	o.Page = page
}

// WithPortalStatus adds the portalStatus to the get Api catalogs params
func (o *GetAPICatalogsParams) WithPortalStatus(portalStatus *string) *GetAPICatalogsParams {
	o.SetPortalStatus(portalStatus)
	return o
}

// SetPortalStatus adds the portalStatus to the get Api catalogs params
func (o *GetAPICatalogsParams) SetPortalStatus(portalStatus *string) {
	o.PortalStatus = portalStatus
}

// WithSize adds the size to the get Api catalogs params
func (o *GetAPICatalogsParams) WithSize(size *int64) *GetAPICatalogsParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get Api catalogs params
func (o *GetAPICatalogsParams) SetSize(size *int64) {
	o.Size = size
}

// WithSort adds the sort to the get Api catalogs params
func (o *GetAPICatalogsParams) WithSort(sort *string) *GetAPICatalogsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get Api catalogs params
func (o *GetAPICatalogsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithTags adds the tags to the get Api catalogs params
func (o *GetAPICatalogsParams) WithTags(tags []string) *GetAPICatalogsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get Api catalogs params
func (o *GetAPICatalogsParams) SetTags(tags []string) {
	o.Tags = tags
}

// WithUUID adds the uuid to the get Api catalogs params
func (o *GetAPICatalogsParams) WithUUID(uuid *string) *GetAPICatalogsParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the get Api catalogs params
func (o *GetAPICatalogsParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPICatalogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessStatus != nil {

		// query param accessStatus
		var qrAccessStatus string

		if o.AccessStatus != nil {
			qrAccessStatus = *o.AccessStatus
		}
		qAccessStatus := qrAccessStatus
		if qAccessStatus != "" {

			if err := r.SetQueryParam("accessStatus", qAccessStatus); err != nil {
				return err
			}
		}
	}

	if o.APIServiceType != nil {

		// query param apiServiceType
		var qrAPIServiceType string

		if o.APIServiceType != nil {
			qrAPIServiceType = *o.APIServiceType
		}
		qAPIServiceType := qrAPIServiceType
		if qAPIServiceType != "" {

			if err := r.SetQueryParam("apiServiceType", qAPIServiceType); err != nil {
				return err
			}
		}
	}

	if o.Description != nil {

		// query param description
		var qrDescription string

		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {

			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PortalStatus != nil {

		// query param portalStatus
		var qrPortalStatus string

		if o.PortalStatus != nil {
			qrPortalStatus = *o.PortalStatus
		}
		qPortalStatus := qrPortalStatus
		if qPortalStatus != "" {

			if err := r.SetQueryParam("portalStatus", qPortalStatus); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int64

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt64(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Tags != nil {

		// binding items for tags
		joinedTags := o.bindParamTags(reg)

		// query array param tags
		if err := r.SetQueryParam("tags", joinedTags...); err != nil {
			return err
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetAPICatalogs binds the parameter tags
func (o *GetAPICatalogsParams) bindParamTags(formats strfmt.Registry) []string {
	tagsIR := o.Tags

	var tagsIC []string
	for _, tagsIIR := range tagsIR { // explode []string

		tagsIIV := tagsIIR // string as string
		tagsIC = append(tagsIC, tagsIIV)
	}

	// items.CollectionFormat: ""
	tagsIS := swag.JoinByFormat(tagsIC, "")

	return tagsIS
}
