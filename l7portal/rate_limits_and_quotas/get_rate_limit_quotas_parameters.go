// Code generated by go-swagger; DO NOT EDIT.

package rate_limits_and_quotas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRateLimitQuotasParams creates a new GetRateLimitQuotasParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRateLimitQuotasParams() *GetRateLimitQuotasParams {
	return &GetRateLimitQuotasParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRateLimitQuotasParamsWithTimeout creates a new GetRateLimitQuotasParams object
// with the ability to set a timeout on a request.
func NewGetRateLimitQuotasParamsWithTimeout(timeout time.Duration) *GetRateLimitQuotasParams {
	return &GetRateLimitQuotasParams{
		timeout: timeout,
	}
}

// NewGetRateLimitQuotasParamsWithContext creates a new GetRateLimitQuotasParams object
// with the ability to set a context for a request.
func NewGetRateLimitQuotasParamsWithContext(ctx context.Context) *GetRateLimitQuotasParams {
	return &GetRateLimitQuotasParams{
		Context: ctx,
	}
}

// NewGetRateLimitQuotasParamsWithHTTPClient creates a new GetRateLimitQuotasParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRateLimitQuotasParamsWithHTTPClient(client *http.Client) *GetRateLimitQuotasParams {
	return &GetRateLimitQuotasParams{
		HTTPClient: client,
	}
}

/*
GetRateLimitQuotasParams contains all the parameters to send to the API endpoint

	for the get rate limit quotas operation.

	Typically these are written to a http.Request.
*/
type GetRateLimitQuotasParams struct {

	/* AssignmentLevel.

	   Assignment Level for Rate Limit & Quota
	*/
	AssignmentLevel *string

	/* HasQuota.

	   If set to true, returns Rate Limits & Quotas that have Quota defined
	*/
	HasQuota *bool

	/* HasRate.

	   If set to true, returns Rate Limits & Quotas that have Rate Limit defined
	*/
	HasRate *bool

	/* Name.

	   Filter by full or partial name of Rate Limit & Quota
	*/
	Name *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get rate limit quotas params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRateLimitQuotasParams) WithDefaults() *GetRateLimitQuotasParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get rate limit quotas params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRateLimitQuotasParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get rate limit quotas params
func (o *GetRateLimitQuotasParams) WithTimeout(timeout time.Duration) *GetRateLimitQuotasParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get rate limit quotas params
func (o *GetRateLimitQuotasParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get rate limit quotas params
func (o *GetRateLimitQuotasParams) WithContext(ctx context.Context) *GetRateLimitQuotasParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get rate limit quotas params
func (o *GetRateLimitQuotasParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get rate limit quotas params
func (o *GetRateLimitQuotasParams) WithHTTPClient(client *http.Client) *GetRateLimitQuotasParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get rate limit quotas params
func (o *GetRateLimitQuotasParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssignmentLevel adds the assignmentLevel to the get rate limit quotas params
func (o *GetRateLimitQuotasParams) WithAssignmentLevel(assignmentLevel *string) *GetRateLimitQuotasParams {
	o.SetAssignmentLevel(assignmentLevel)
	return o
}

// SetAssignmentLevel adds the assignmentLevel to the get rate limit quotas params
func (o *GetRateLimitQuotasParams) SetAssignmentLevel(assignmentLevel *string) {
	o.AssignmentLevel = assignmentLevel
}

// WithHasQuota adds the hasQuota to the get rate limit quotas params
func (o *GetRateLimitQuotasParams) WithHasQuota(hasQuota *bool) *GetRateLimitQuotasParams {
	o.SetHasQuota(hasQuota)
	return o
}

// SetHasQuota adds the hasQuota to the get rate limit quotas params
func (o *GetRateLimitQuotasParams) SetHasQuota(hasQuota *bool) {
	o.HasQuota = hasQuota
}

// WithHasRate adds the hasRate to the get rate limit quotas params
func (o *GetRateLimitQuotasParams) WithHasRate(hasRate *bool) *GetRateLimitQuotasParams {
	o.SetHasRate(hasRate)
	return o
}

// SetHasRate adds the hasRate to the get rate limit quotas params
func (o *GetRateLimitQuotasParams) SetHasRate(hasRate *bool) {
	o.HasRate = hasRate
}

// WithName adds the name to the get rate limit quotas params
func (o *GetRateLimitQuotasParams) WithName(name *string) *GetRateLimitQuotasParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get rate limit quotas params
func (o *GetRateLimitQuotasParams) SetName(name *string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *GetRateLimitQuotasParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AssignmentLevel != nil {

		// query param assignmentLevel
		var qrAssignmentLevel string

		if o.AssignmentLevel != nil {
			qrAssignmentLevel = *o.AssignmentLevel
		}
		qAssignmentLevel := qrAssignmentLevel
		if qAssignmentLevel != "" {

			if err := r.SetQueryParam("assignmentLevel", qAssignmentLevel); err != nil {
				return err
			}
		}
	}

	if o.HasQuota != nil {

		// query param hasQuota
		var qrHasQuota bool

		if o.HasQuota != nil {
			qrHasQuota = *o.HasQuota
		}
		qHasQuota := swag.FormatBool(qrHasQuota)
		if qHasQuota != "" {

			if err := r.SetQueryParam("hasQuota", qHasQuota); err != nil {
				return err
			}
		}
	}

	if o.HasRate != nil {

		// query param hasRate
		var qrHasRate bool

		if o.HasRate != nil {
			qrHasRate = *o.HasRate
		}
		qHasRate := swag.FormatBool(qrHasRate)
		if qHasRate != "" {

			if err := r.SetQueryParam("hasRate", qHasRate); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
