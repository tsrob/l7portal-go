// Code generated by go-swagger; DO NOT EDIT.

package rate_limits_and_quotas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tsrob/l7portal-go/models"
)

// GetRateLimitQuotaReader is a Reader for the GetRateLimitQuota structure.
type GetRateLimitQuotaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRateLimitQuotaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRateLimitQuotaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRateLimitQuotaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRateLimitQuotaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRateLimitQuotaInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRateLimitQuotaOK creates a GetRateLimitQuotaOK with default headers values
func NewGetRateLimitQuotaOK() *GetRateLimitQuotaOK {
	return &GetRateLimitQuotaOK{}
}

/*
GetRateLimitQuotaOK describes a response with status code 200, with default header values.

GetRateLimitQuotaOK get rate limit quota o k
*/
type GetRateLimitQuotaOK struct {
	Payload *models.RateLimitAndQuotaBasic
}

// IsSuccess returns true when this get rate limit quota o k response has a 2xx status code
func (o *GetRateLimitQuotaOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get rate limit quota o k response has a 3xx status code
func (o *GetRateLimitQuotaOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rate limit quota o k response has a 4xx status code
func (o *GetRateLimitQuotaOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get rate limit quota o k response has a 5xx status code
func (o *GetRateLimitQuotaOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get rate limit quota o k response a status code equal to that given
func (o *GetRateLimitQuotaOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get rate limit quota o k response
func (o *GetRateLimitQuotaOK) Code() int {
	return 200
}

func (o *GetRateLimitQuotaOK) Error() string {
	return fmt.Sprintf("[GET /api-management/1.0/rate-quotas/{uuid}][%d] getRateLimitQuotaOK  %+v", 200, o.Payload)
}

func (o *GetRateLimitQuotaOK) String() string {
	return fmt.Sprintf("[GET /api-management/1.0/rate-quotas/{uuid}][%d] getRateLimitQuotaOK  %+v", 200, o.Payload)
}

func (o *GetRateLimitQuotaOK) GetPayload() *models.RateLimitAndQuotaBasic {
	return o.Payload
}

func (o *GetRateLimitQuotaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RateLimitAndQuotaBasic)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRateLimitQuotaBadRequest creates a GetRateLimitQuotaBadRequest with default headers values
func NewGetRateLimitQuotaBadRequest() *GetRateLimitQuotaBadRequest {
	return &GetRateLimitQuotaBadRequest{}
}

/*
GetRateLimitQuotaBadRequest describes a response with status code 400, with default header values.

Bad Request due to Invalid Uuid.
*/
type GetRateLimitQuotaBadRequest struct {
	Payload *models.LongerError
}

// IsSuccess returns true when this get rate limit quota bad request response has a 2xx status code
func (o *GetRateLimitQuotaBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rate limit quota bad request response has a 3xx status code
func (o *GetRateLimitQuotaBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rate limit quota bad request response has a 4xx status code
func (o *GetRateLimitQuotaBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rate limit quota bad request response has a 5xx status code
func (o *GetRateLimitQuotaBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get rate limit quota bad request response a status code equal to that given
func (o *GetRateLimitQuotaBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get rate limit quota bad request response
func (o *GetRateLimitQuotaBadRequest) Code() int {
	return 400
}

func (o *GetRateLimitQuotaBadRequest) Error() string {
	return fmt.Sprintf("[GET /api-management/1.0/rate-quotas/{uuid}][%d] getRateLimitQuotaBadRequest  %+v", 400, o.Payload)
}

func (o *GetRateLimitQuotaBadRequest) String() string {
	return fmt.Sprintf("[GET /api-management/1.0/rate-quotas/{uuid}][%d] getRateLimitQuotaBadRequest  %+v", 400, o.Payload)
}

func (o *GetRateLimitQuotaBadRequest) GetPayload() *models.LongerError {
	return o.Payload
}

func (o *GetRateLimitQuotaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LongerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRateLimitQuotaNotFound creates a GetRateLimitQuotaNotFound with default headers values
func NewGetRateLimitQuotaNotFound() *GetRateLimitQuotaNotFound {
	return &GetRateLimitQuotaNotFound{}
}

/*
GetRateLimitQuotaNotFound describes a response with status code 404, with default header values.

Entity not Found
*/
type GetRateLimitQuotaNotFound struct {
	Payload *models.ErrorEntity
}

// IsSuccess returns true when this get rate limit quota not found response has a 2xx status code
func (o *GetRateLimitQuotaNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rate limit quota not found response has a 3xx status code
func (o *GetRateLimitQuotaNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rate limit quota not found response has a 4xx status code
func (o *GetRateLimitQuotaNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rate limit quota not found response has a 5xx status code
func (o *GetRateLimitQuotaNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get rate limit quota not found response a status code equal to that given
func (o *GetRateLimitQuotaNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get rate limit quota not found response
func (o *GetRateLimitQuotaNotFound) Code() int {
	return 404
}

func (o *GetRateLimitQuotaNotFound) Error() string {
	return fmt.Sprintf("[GET /api-management/1.0/rate-quotas/{uuid}][%d] getRateLimitQuotaNotFound  %+v", 404, o.Payload)
}

func (o *GetRateLimitQuotaNotFound) String() string {
	return fmt.Sprintf("[GET /api-management/1.0/rate-quotas/{uuid}][%d] getRateLimitQuotaNotFound  %+v", 404, o.Payload)
}

func (o *GetRateLimitQuotaNotFound) GetPayload() *models.ErrorEntity {
	return o.Payload
}

func (o *GetRateLimitQuotaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRateLimitQuotaInternalServerError creates a GetRateLimitQuotaInternalServerError with default headers values
func NewGetRateLimitQuotaInternalServerError() *GetRateLimitQuotaInternalServerError {
	return &GetRateLimitQuotaInternalServerError{}
}

/*
GetRateLimitQuotaInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. Certain fields are missing from the request.
*/
type GetRateLimitQuotaInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get rate limit quota internal server error response has a 2xx status code
func (o *GetRateLimitQuotaInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rate limit quota internal server error response has a 3xx status code
func (o *GetRateLimitQuotaInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rate limit quota internal server error response has a 4xx status code
func (o *GetRateLimitQuotaInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get rate limit quota internal server error response has a 5xx status code
func (o *GetRateLimitQuotaInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get rate limit quota internal server error response a status code equal to that given
func (o *GetRateLimitQuotaInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get rate limit quota internal server error response
func (o *GetRateLimitQuotaInternalServerError) Code() int {
	return 500
}

func (o *GetRateLimitQuotaInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api-management/1.0/rate-quotas/{uuid}][%d] getRateLimitQuotaInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRateLimitQuotaInternalServerError) String() string {
	return fmt.Sprintf("[GET /api-management/1.0/rate-quotas/{uuid}][%d] getRateLimitQuotaInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRateLimitQuotaInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRateLimitQuotaInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
