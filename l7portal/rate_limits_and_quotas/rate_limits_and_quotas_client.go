// Code generated by go-swagger; DO NOT EDIT.

package rate_limits_and_quotas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new rate limits and quotas API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rate limits and quotas API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRateLimitQuotas(params *CreateRateLimitQuotasParams, opts ...ClientOption) (*CreateRateLimitQuotasCreated, error)

	DeleteRateLimitQuotas(params *DeleteRateLimitQuotasParams, opts ...ClientOption) (*DeleteRateLimitQuotasNoContent, error)

	GetRateLimitQuota(params *GetRateLimitQuotaParams, opts ...ClientOption) (*GetRateLimitQuotaOK, error)

	GetRateLimitQuotas(params *GetRateLimitQuotasParams, opts ...ClientOption) (*GetRateLimitQuotasOK, error)

	UpdateRateLimitQuotas(params *UpdateRateLimitQuotasParams, opts ...ClientOption) (*UpdateRateLimitQuotasNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateRateLimitQuotas creates a new rate limit and quota

Create a new Rate Limit & Quota. The required fields are name, assignment level (API, ORGANIZATION or API_ORGANIZATION). Either the rateLimit or quota must be specified. For the Organization assignment level, the quota's interval can be (DAY, MONTH). For all other assignment levels, the quota's interval can be (HOUR, DAY, MONTH). The description parameter is optional.
*/
func (a *Client) CreateRateLimitQuotas(params *CreateRateLimitQuotasParams, opts ...ClientOption) (*CreateRateLimitQuotasCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRateLimitQuotasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRateLimitQuotas",
		Method:             "POST",
		PathPattern:        "/api-management/1.0/rate-quotas",
		ProducesMediaTypes: []string{"text/plain;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRateLimitQuotasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRateLimitQuotasCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRateLimitQuotas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRateLimitQuotas deletes an existing rate limit and quota configuration

Delete an existing Rate Limit & Quota. Rate Limit & Quota cannot be deleted if being used by an API or Organization.
*/
func (a *Client) DeleteRateLimitQuotas(params *DeleteRateLimitQuotasParams, opts ...ClientOption) (*DeleteRateLimitQuotasNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRateLimitQuotasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRateLimitQuotas",
		Method:             "DELETE",
		PathPattern:        "/api-management/1.0/rate-quotas/{uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRateLimitQuotasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRateLimitQuotasNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRateLimitQuotas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRateLimitQuota returns a single rate limits and quota configuration

Returns a single Rate Limit & Quota with the specified UUID.
*/
func (a *Client) GetRateLimitQuota(params *GetRateLimitQuotaParams, opts ...ClientOption) (*GetRateLimitQuotaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRateLimitQuotaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRateLimitQuota",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/rate-quotas/{uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRateLimitQuotaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRateLimitQuotaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRateLimitQuota: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRateLimitQuotas lists all rate limits and quotas for all assignment levels

Lists all Rate Limits & Quotas. Includes all assignment levels(API, ORGANIZATION or API_ORGANIZATION). The 'ORGANIZATION' assignment level Rate Limit and Quota was formerly known as 'Account Plans'.
*/
func (a *Client) GetRateLimitQuotas(params *GetRateLimitQuotasParams, opts ...ClientOption) (*GetRateLimitQuotasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRateLimitQuotasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRateLimitQuotas",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/rate-quotas",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRateLimitQuotasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRateLimitQuotasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRateLimitQuotas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRateLimitQuotas updates an existing rate limit and quota configuration

Update an existing Rate Limit & Quota. Name is required. Assignment level cannot be modified once created. Either the rateLimit or quota must be specified. For the Organization assignment level, the quota's interval can be (DAY, MONTH). For all other assignment levels, the quota's interval can be (HOUR, DAY, MONTH). The description parameter is optional.
*/
func (a *Client) UpdateRateLimitQuotas(params *UpdateRateLimitQuotasParams, opts ...ClientOption) (*UpdateRateLimitQuotasNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRateLimitQuotasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRateLimitQuotas",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/rate-quotas/{uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRateLimitQuotasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRateLimitQuotasNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRateLimitQuotas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
