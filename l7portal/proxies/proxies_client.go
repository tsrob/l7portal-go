// Code generated by go-swagger; DO NOT EDIT.

package proxies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new proxies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for proxies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateProxyUsingPOST(params *CreateProxyUsingPOSTParams, opts ...ClientOption) (*CreateProxyUsingPOSTCreated, error)

	DeleteProxyUsingDELETE(params *DeleteProxyUsingDELETEParams, opts ...ClientOption) (*DeleteProxyUsingDELETENoContent, error)

	GetAPIPlanDeploymentsByProxyUUID(params *GetAPIPlanDeploymentsByProxyUUIDParams, opts ...ClientOption) (*GetAPIPlanDeploymentsByProxyUUIDOK, error)

	GetDeploymentTypesUsingGET1(params *GetDeploymentTypesUsingGET1Params, opts ...ClientOption) (*GetDeploymentTypesUsingGET1OK, error)

	GetOrgRateQuotaDeploymentsByProxyUUID(params *GetOrgRateQuotaDeploymentsByProxyUUIDParams, opts ...ClientOption) (*GetOrgRateQuotaDeploymentsByProxyUUIDOK, error)

	GetProxiesUsingGET1(params *GetProxiesUsingGET1Params, opts ...ClientOption) (*GetProxiesUsingGET1OK, error)

	GetProxyAPIKeysUsingGET(params *GetProxyAPIKeysUsingGETParams, opts ...ClientOption) (*GetProxyAPIKeysUsingGETOK, error)

	GetProxyApisUsingGET(params *GetProxyApisUsingGETParams, opts ...ClientOption) (*GetProxyApisUsingGETOK, error)

	GetProxyConfigUsingGET(params *GetProxyConfigUsingGETParams, opts ...ClientOption) (*GetProxyConfigUsingGETOK, error)

	GetProxyOrganizationsUsingGET(params *GetProxyOrganizationsUsingGETParams, opts ...ClientOption) (*GetProxyOrganizationsUsingGETOK, error)

	GetProxyUsingGET(params *GetProxyUsingGETParams, opts ...ClientOption) (*GetProxyUsingGETOK, error)

	UpdateDeploymentTypeUsingPUT(params *UpdateDeploymentTypeUsingPUTParams, opts ...ClientOption) (*UpdateDeploymentTypeUsingPUTNoContent, error)

	UpdateProxyConfigUsingPUT(params *UpdateProxyConfigUsingPUTParams, opts ...ClientOption) (*UpdateProxyConfigUsingPUTOK, error)

	UpdateProxyOrganizationUsingPUT(params *UpdateProxyOrganizationUsingPUTParams, opts ...ClientOption) (*UpdateProxyOrganizationUsingPUTNoContent, error)

	UpdateProxyUsingPUT(params *UpdateProxyUsingPUTParams, opts ...ClientOption) (*UpdateProxyUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateProxyUsingPOST creates an enrollment URL for a proxy

A proxy is a runtime environment where APIs, Applications, and Account Plans are deployed. Proxies are initially created in a pending state with a new enrollment URL. Each proxy has a deployment type setting which can be set as AUTOMATIC, ON_DEMAND or MANUAL. A proxy with a pending status is ready to be enrolled with the Portal. Once enrolled a proxy transitions to an active state and is ready to use.
*/
func (a *Client) CreateProxyUsingPOST(params *CreateProxyUsingPOSTParams, opts ...ClientOption) (*CreateProxyUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProxyUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProxyUsingPOST",
		Method:             "POST",
		PathPattern:        "/deployments/1.0/proxies",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProxyUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProxyUsingPOSTCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProxyUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProxyUsingDELETE deletes a specific proxy

A proxy can be deleted which will prevent any entities from being deployed to it essentially breaking its connection to the Portal. The last proxy enrolled with the Portal cannot be deleted.
*/
func (a *Client) DeleteProxyUsingDELETE(params *DeleteProxyUsingDELETEParams, opts ...ClientOption) (*DeleteProxyUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProxyUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProxyUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/deployments/1.0/proxies/{uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProxyUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProxyUsingDELETENoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProxyUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIPlanDeploymentsByProxyUUID returns the API plan deployment details for the given proxy

Returns the API Plan deployment details for the given proxy, including the number of API Plans deployed.
*/
func (a *Client) GetAPIPlanDeploymentsByProxyUUID(params *GetAPIPlanDeploymentsByProxyUUIDParams, opts ...ClientOption) (*GetAPIPlanDeploymentsByProxyUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPlanDeploymentsByProxyUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiPlanDeploymentsByProxyUuid",
		Method:             "GET",
		PathPattern:        "/deployments/1.0/proxies/{uuid}/api-plans",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPlanDeploymentsByProxyUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIPlanDeploymentsByProxyUUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiPlanDeploymentsByProxyUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeploymentTypesUsingGET1 returns the deployment types for the proxy
*/
func (a *Client) GetDeploymentTypesUsingGET1(params *GetDeploymentTypesUsingGET1Params, opts ...ClientOption) (*GetDeploymentTypesUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentTypesUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentTypesUsingGET_1",
		Method:             "GET",
		PathPattern:        "/deployments/0.1/proxies/{uuid}/deployment-type",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentTypesUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentTypesUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentTypesUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrgRateQuotaDeploymentsByProxyUUID returns the organization assignment level rate limit and quota deployment details for the given proxy

Returns the Organization assignment level Rate Limit & Quota (previously known as Account Plan) deployment details for the given proxy, including the number deployed.
*/
func (a *Client) GetOrgRateQuotaDeploymentsByProxyUUID(params *GetOrgRateQuotaDeploymentsByProxyUUIDParams, opts ...ClientOption) (*GetOrgRateQuotaDeploymentsByProxyUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrgRateQuotaDeploymentsByProxyUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrgRateQuotaDeploymentsByProxyUuid",
		Method:             "GET",
		PathPattern:        "/deployments/1.0/proxies/{uuid}/org-rate-quotas",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrgRateQuotaDeploymentsByProxyUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrgRateQuotaDeploymentsByProxyUUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrgRateQuotaDeploymentsByProxyUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProxiesUsingGET1 returns the list of all proxies associated with the portal

Returns the list of all proxies associated with the Portal. Proxies with an enrollment status of pending are ready to be enrolled with the Portal using the enrollment url returned. Active proxies have already been enrolled and are ready to use.
*/
func (a *Client) GetProxiesUsingGET1(params *GetProxiesUsingGET1Params, opts ...ClientOption) (*GetProxiesUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxiesUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProxiesUsingGET_1",
		Method:             "GET",
		PathPattern:        "/deployments/1.0/proxies",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxiesUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProxiesUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProxiesUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProxyAPIKeysUsingGET returns the API key deployments for a specific proxy

Returns the API Key deployments for a specific proxy.
*/
func (a *Client) GetProxyAPIKeysUsingGET(params *GetProxyAPIKeysUsingGETParams, opts ...ClientOption) (*GetProxyAPIKeysUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxyAPIKeysUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProxyApiKeysUsingGET",
		Method:             "GET",
		PathPattern:        "/deployments/1.0/proxies/{uuid}/api-keys",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxyAPIKeysUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProxyAPIKeysUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProxyApiKeysUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProxyApisUsingGET returns the API deployments

Returns the the API deployments for a specific proxy.
*/
func (a *Client) GetProxyApisUsingGET(params *GetProxyApisUsingGETParams, opts ...ClientOption) (*GetProxyApisUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxyApisUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProxyApisUsingGET",
		Method:             "GET",
		PathPattern:        "/deployments/1.0/proxies/{uuid}/apis",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxyApisUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProxyApisUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProxyApisUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProxyConfigUsingGET returns configuration settings

Returns the new automatic mode for API and API key deployments for a specific proxy. Default is true when latest integration bundle software is installed.
*/
func (a *Client) GetProxyConfigUsingGET(params *GetProxyConfigUsingGETParams, opts ...ClientOption) (*GetProxyConfigUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxyConfigUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProxyConfigUsingGET",
		Method:             "GET",
		PathPattern:        "/deployments/0.1/proxies/{uuid}/config",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxyConfigUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProxyConfigUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProxyConfigUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProxyOrganizationsUsingGET organizations assigned to a proxy

Returns all organizations assigned to a specific proxy.
*/
func (a *Client) GetProxyOrganizationsUsingGET(params *GetProxyOrganizationsUsingGETParams, opts ...ClientOption) (*GetProxyOrganizationsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxyOrganizationsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProxyOrganizationsUsingGET",
		Method:             "GET",
		PathPattern:        "/deployments/1.0/proxies/{uuid}/organizations",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxyOrganizationsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProxyOrganizationsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProxyOrganizationsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProxyUsingGET returns a specific proxy

Returns details about the specified proxy. A proxy with an enrollment status of pending is ready to be enrolled with the Portal using the enrollment url returned. An active proxy is enrolled and ready to use.
*/
func (a *Client) GetProxyUsingGET(params *GetProxyUsingGETParams, opts ...ClientOption) (*GetProxyUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxyUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProxyUsingGET",
		Method:             "GET",
		PathPattern:        "/deployments/1.0/proxies/{uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxyUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProxyUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProxyUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDeploymentTypeUsingPUT updates the deployment type for the proxy
*/
func (a *Client) UpdateDeploymentTypeUsingPUT(params *UpdateDeploymentTypeUsingPUTParams, opts ...ClientOption) (*UpdateDeploymentTypeUsingPUTNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeploymentTypeUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDeploymentTypeUsingPUT",
		Method:             "PUT",
		PathPattern:        "/deployments/0.1/proxies/{uuid}/deployment-type/{entity}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeploymentTypeUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeploymentTypeUsingPUTNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeploymentTypeUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateProxyConfigUsingPUT updates configuration settings

Updates the new automatic mode for API and API key deployments for a specific proxy. Default is true when latest integration bundle software is installed.
*/
func (a *Client) UpdateProxyConfigUsingPUT(params *UpdateProxyConfigUsingPUTParams, opts ...ClientOption) (*UpdateProxyConfigUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProxyConfigUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProxyConfigUsingPUT",
		Method:             "PUT",
		PathPattern:        "/deployments/0.1/proxies/{uuid}/config",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProxyConfigUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProxyConfigUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProxyConfigUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateProxyOrganizationUsingPUT updates organization assignment to a specific proxy

When an organization is assigned to a proxy, the organization's publishers are able to deploy the API they own or manage to that specific proxy.
*/
func (a *Client) UpdateProxyOrganizationUsingPUT(params *UpdateProxyOrganizationUsingPUTParams, opts ...ClientOption) (*UpdateProxyOrganizationUsingPUTNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProxyOrganizationUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProxyOrganizationUsingPUT",
		Method:             "PUT",
		PathPattern:        "/deployments/1.0/proxies/{uuid}/organizations",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProxyOrganizationUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProxyOrganizationUsingPUTNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProxyOrganizationUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateProxyUsingPUT updates a specific proxy

Active proxies can be updated to change their name and/or deployment type setting.
*/
func (a *Client) UpdateProxyUsingPUT(params *UpdateProxyUsingPUTParams, opts ...ClientOption) (*UpdateProxyUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProxyUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProxyUsingPUT",
		Method:             "PUT",
		PathPattern:        "/deployments/1.0/proxies/{uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProxyUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProxyUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProxyUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
