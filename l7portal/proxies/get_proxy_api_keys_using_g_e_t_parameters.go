// Code generated by go-swagger; DO NOT EDIT.

package proxies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetProxyAPIKeysUsingGETParams creates a new GetProxyAPIKeysUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProxyAPIKeysUsingGETParams() *GetProxyAPIKeysUsingGETParams {
	return &GetProxyAPIKeysUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProxyAPIKeysUsingGETParamsWithTimeout creates a new GetProxyAPIKeysUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetProxyAPIKeysUsingGETParamsWithTimeout(timeout time.Duration) *GetProxyAPIKeysUsingGETParams {
	return &GetProxyAPIKeysUsingGETParams{
		timeout: timeout,
	}
}

// NewGetProxyAPIKeysUsingGETParamsWithContext creates a new GetProxyAPIKeysUsingGETParams object
// with the ability to set a context for a request.
func NewGetProxyAPIKeysUsingGETParamsWithContext(ctx context.Context) *GetProxyAPIKeysUsingGETParams {
	return &GetProxyAPIKeysUsingGETParams{
		Context: ctx,
	}
}

// NewGetProxyAPIKeysUsingGETParamsWithHTTPClient creates a new GetProxyAPIKeysUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProxyAPIKeysUsingGETParamsWithHTTPClient(client *http.Client) *GetProxyAPIKeysUsingGETParams {
	return &GetProxyAPIKeysUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetProxyAPIKeysUsingGETParams contains all the parameters to send to the API endpoint

	for the get proxy Api keys using g e t operation.

	Typically these are written to a http.Request.
*/
type GetProxyAPIKeysUsingGETParams struct {

	/* APIKeyName.

	   The name of the API Key to filter the list of API Key deployments to this proxy.
	*/
	APIKeyName *string

	/* APIKeyStatus.

	   The status of the API Key to filter the list of API Key deployments to this proxy. API Keys that are deployed to proxies can be DISABLED or ENABLED.
	*/
	APIKeyStatus *string

	/* ApplicationName.

	   The name of the Application to filter the list of API Key deployments to this proxy.
	*/
	ApplicationName *string

	/* End.

	   API Key deployments deployed before this date and time.

	   Format: yyyy-MM-dd'T'HH:mm:ssZ
	*/
	End *string

	/* EntityUUID.

	   The UUID of the Application to filter the list of API key deployments from this application to this proxy.
	*/
	EntityUUID *string

	/* Start.

	   API Key deployments deployed after this date and time.

	   Format: yyyy-MM-dd'T'HH:mm:ssZ
	*/
	Start *string

	/* Status.

	   The API Key deployment status to filter the list of API key deployments to this proxy.
	*/
	Status *string

	/* UUID.

	   The proxy UUID to filter the list of API key deployments to this proxy.
	*/
	UUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get proxy Api keys using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProxyAPIKeysUsingGETParams) WithDefaults() *GetProxyAPIKeysUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get proxy Api keys using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProxyAPIKeysUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) WithTimeout(timeout time.Duration) *GetProxyAPIKeysUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) WithContext(ctx context.Context) *GetProxyAPIKeysUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) WithHTTPClient(client *http.Client) *GetProxyAPIKeysUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIKeyName adds the aPIKeyName to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) WithAPIKeyName(aPIKeyName *string) *GetProxyAPIKeysUsingGETParams {
	o.SetAPIKeyName(aPIKeyName)
	return o
}

// SetAPIKeyName adds the apiKeyName to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) SetAPIKeyName(aPIKeyName *string) {
	o.APIKeyName = aPIKeyName
}

// WithAPIKeyStatus adds the aPIKeyStatus to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) WithAPIKeyStatus(aPIKeyStatus *string) *GetProxyAPIKeysUsingGETParams {
	o.SetAPIKeyStatus(aPIKeyStatus)
	return o
}

// SetAPIKeyStatus adds the apiKeyStatus to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) SetAPIKeyStatus(aPIKeyStatus *string) {
	o.APIKeyStatus = aPIKeyStatus
}

// WithApplicationName adds the applicationName to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) WithApplicationName(applicationName *string) *GetProxyAPIKeysUsingGETParams {
	o.SetApplicationName(applicationName)
	return o
}

// SetApplicationName adds the applicationName to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) SetApplicationName(applicationName *string) {
	o.ApplicationName = applicationName
}

// WithEnd adds the end to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) WithEnd(end *string) *GetProxyAPIKeysUsingGETParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) SetEnd(end *string) {
	o.End = end
}

// WithEntityUUID adds the entityUUID to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) WithEntityUUID(entityUUID *string) *GetProxyAPIKeysUsingGETParams {
	o.SetEntityUUID(entityUUID)
	return o
}

// SetEntityUUID adds the entityUuid to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) SetEntityUUID(entityUUID *string) {
	o.EntityUUID = entityUUID
}

// WithStart adds the start to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) WithStart(start *string) *GetProxyAPIKeysUsingGETParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) SetStart(start *string) {
	o.Start = start
}

// WithStatus adds the status to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) WithStatus(status *string) *GetProxyAPIKeysUsingGETParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) SetStatus(status *string) {
	o.Status = status
}

// WithUUID adds the uuid to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) WithUUID(uuid string) *GetProxyAPIKeysUsingGETParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the get proxy Api keys using g e t params
func (o *GetProxyAPIKeysUsingGETParams) SetUUID(uuid string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *GetProxyAPIKeysUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIKeyName != nil {

		// query param apiKeyName
		var qrAPIKeyName string

		if o.APIKeyName != nil {
			qrAPIKeyName = *o.APIKeyName
		}
		qAPIKeyName := qrAPIKeyName
		if qAPIKeyName != "" {

			if err := r.SetQueryParam("apiKeyName", qAPIKeyName); err != nil {
				return err
			}
		}
	}

	if o.APIKeyStatus != nil {

		// query param apiKeyStatus
		var qrAPIKeyStatus string

		if o.APIKeyStatus != nil {
			qrAPIKeyStatus = *o.APIKeyStatus
		}
		qAPIKeyStatus := qrAPIKeyStatus
		if qAPIKeyStatus != "" {

			if err := r.SetQueryParam("apiKeyStatus", qAPIKeyStatus); err != nil {
				return err
			}
		}
	}

	if o.ApplicationName != nil {

		// query param applicationName
		var qrApplicationName string

		if o.ApplicationName != nil {
			qrApplicationName = *o.ApplicationName
		}
		qApplicationName := qrApplicationName
		if qApplicationName != "" {

			if err := r.SetQueryParam("applicationName", qApplicationName); err != nil {
				return err
			}
		}
	}

	if o.End != nil {

		// query param end
		var qrEnd string

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := qrEnd
		if qEnd != "" {

			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}
	}

	if o.EntityUUID != nil {

		// query param entityUuid
		var qrEntityUUID string

		if o.EntityUUID != nil {
			qrEntityUUID = *o.EntityUUID
		}
		qEntityUUID := qrEntityUUID
		if qEntityUUID != "" {

			if err := r.SetQueryParam("entityUuid", qEntityUUID); err != nil {
				return err
			}
		}
	}

	if o.Start != nil {

		// query param start
		var qrStart string

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart
		if qStart != "" {

			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
