// Code generated by go-swagger; DO NOT EDIT.

package api_deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new api deployments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api deployments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAPIDeploymentUsingPOST1(params *CreateAPIDeploymentUsingPOST1Params, opts ...ClientOption) (*CreateAPIDeploymentUsingPOST1Created, error)

	DeleteAPIDeploymentUsingDELETE1(params *DeleteAPIDeploymentUsingDELETE1Params, opts ...ClientOption) (*DeleteAPIDeploymentUsingDELETE1NoContent, error)

	GetAPIDeploymentUsingGET1(params *GetAPIDeploymentUsingGET1Params, opts ...ClientOption) (*GetAPIDeploymentUsingGET1OK, error)

	GetAPIDeploymentsUsingGET1(params *GetAPIDeploymentsUsingGET1Params, opts ...ClientOption) (*GetAPIDeploymentsUsingGET1OK, error)

	UpdateAPIDeploymentUsingPUT(params *UpdateAPIDeploymentUsingPUTParams, opts ...ClientOption) (*UpdateAPIDeploymentUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAPIDeploymentUsingPOST1 triggers the deployment of the API to the proxy

The API will be deployed to the specified proxy.
*/
func (a *Client) CreateAPIDeploymentUsingPOST1(params *CreateAPIDeploymentUsingPOST1Params, opts ...ClientOption) (*CreateAPIDeploymentUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAPIDeploymentUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createApiDeploymentUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/deployments/1.0/apis/{apiUuid}/proxies",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAPIDeploymentUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAPIDeploymentUsingPOST1Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createApiDeploymentUsingPOST_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAPIDeploymentUsingDELETE1 uns deploys the API from the proxy

Un-deploys the specified API from the specified proxy.
*/
func (a *Client) DeleteAPIDeploymentUsingDELETE1(params *DeleteAPIDeploymentUsingDELETE1Params, opts ...ClientOption) (*DeleteAPIDeploymentUsingDELETE1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIDeploymentUsingDELETE1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteApiDeploymentUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/deployments/1.0/apis/{apiUuid}/proxies/{proxyUuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIDeploymentUsingDELETE1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIDeploymentUsingDELETE1NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteApiDeploymentUsingDELETE_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIDeploymentUsingGET1 retrieves API s deployment details for the given proxy

Retrieves API's deployment details for the specified proxy.
*/
func (a *Client) GetAPIDeploymentUsingGET1(params *GetAPIDeploymentUsingGET1Params, opts ...ClientOption) (*GetAPIDeploymentUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIDeploymentUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiDeploymentUsingGET_1",
		Method:             "GET",
		PathPattern:        "/deployments/1.0/apis/{apiUuid}/proxies/{proxyUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIDeploymentUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIDeploymentUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiDeploymentUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIDeploymentsUsingGET1 returns the list of proxies where the API is deployed

Returns the list of proxies where the API is deployed.
*/
func (a *Client) GetAPIDeploymentsUsingGET1(params *GetAPIDeploymentsUsingGET1Params, opts ...ClientOption) (*GetAPIDeploymentsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIDeploymentsUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiDeploymentsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/deployments/1.0/apis/{apiUuid}/proxies",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIDeploymentsUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIDeploymentsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiDeploymentsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAPIDeploymentUsingPUT updates API s deployment status for a proxy

Updates the specified API's deployment status and message for the specified proxy.
*/
func (a *Client) UpdateAPIDeploymentUsingPUT(params *UpdateAPIDeploymentUsingPUTParams, opts ...ClientOption) (*UpdateAPIDeploymentUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAPIDeploymentUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateApiDeploymentUsingPUT",
		Method:             "PUT",
		PathPattern:        "/deployments/1.0/apis/{apiUuid}/proxies/{proxyUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAPIDeploymentUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAPIDeploymentUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateApiDeploymentUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
