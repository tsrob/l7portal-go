// Code generated by go-swagger; DO NOT EDIT.

package documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tsrob/l7portal-go/models"
)

// PutMarkDownDocsReader is a Reader for the PutMarkDownDocs structure.
type PutMarkDownDocsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutMarkDownDocsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutMarkDownDocsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutMarkDownDocsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutMarkDownDocsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutMarkDownDocsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutMarkDownDocsOK creates a PutMarkDownDocsOK with default headers values
func NewPutMarkDownDocsOK() *PutMarkDownDocsOK {
	return &PutMarkDownDocsOK{}
}

/*
PutMarkDownDocsOK describes a response with status code 200, with default header values.

Ok
*/
type PutMarkDownDocsOK struct {
	Payload models.DocumentsDocs
}

// IsSuccess returns true when this put mark down docs o k response has a 2xx status code
func (o *PutMarkDownDocsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put mark down docs o k response has a 3xx status code
func (o *PutMarkDownDocsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put mark down docs o k response has a 4xx status code
func (o *PutMarkDownDocsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put mark down docs o k response has a 5xx status code
func (o *PutMarkDownDocsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put mark down docs o k response a status code equal to that given
func (o *PutMarkDownDocsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put mark down docs o k response
func (o *PutMarkDownDocsOK) Code() int {
	return 200
}

func (o *PutMarkDownDocsOK) Error() string {
	return fmt.Sprintf("[PUT /document-service/1.0/docs/{type}/{typeUuid}][%d] putMarkDownDocsOK  %+v", 200, o.Payload)
}

func (o *PutMarkDownDocsOK) String() string {
	return fmt.Sprintf("[PUT /document-service/1.0/docs/{type}/{typeUuid}][%d] putMarkDownDocsOK  %+v", 200, o.Payload)
}

func (o *PutMarkDownDocsOK) GetPayload() models.DocumentsDocs {
	return o.Payload
}

func (o *PutMarkDownDocsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutMarkDownDocsBadRequest creates a PutMarkDownDocsBadRequest with default headers values
func NewPutMarkDownDocsBadRequest() *PutMarkDownDocsBadRequest {
	return &PutMarkDownDocsBadRequest{}
}

/*
PutMarkDownDocsBadRequest describes a response with status code 400, with default header values.

Bad Request due to a validation error.
*/
type PutMarkDownDocsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this put mark down docs bad request response has a 2xx status code
func (o *PutMarkDownDocsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put mark down docs bad request response has a 3xx status code
func (o *PutMarkDownDocsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put mark down docs bad request response has a 4xx status code
func (o *PutMarkDownDocsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put mark down docs bad request response has a 5xx status code
func (o *PutMarkDownDocsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put mark down docs bad request response a status code equal to that given
func (o *PutMarkDownDocsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put mark down docs bad request response
func (o *PutMarkDownDocsBadRequest) Code() int {
	return 400
}

func (o *PutMarkDownDocsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /document-service/1.0/docs/{type}/{typeUuid}][%d] putMarkDownDocsBadRequest  %+v", 400, o.Payload)
}

func (o *PutMarkDownDocsBadRequest) String() string {
	return fmt.Sprintf("[PUT /document-service/1.0/docs/{type}/{typeUuid}][%d] putMarkDownDocsBadRequest  %+v", 400, o.Payload)
}

func (o *PutMarkDownDocsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutMarkDownDocsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutMarkDownDocsNotFound creates a PutMarkDownDocsNotFound with default headers values
func NewPutMarkDownDocsNotFound() *PutMarkDownDocsNotFound {
	return &PutMarkDownDocsNotFound{}
}

/*
PutMarkDownDocsNotFound describes a response with status code 404, with default header values.

Entity not found
*/
type PutMarkDownDocsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this put mark down docs not found response has a 2xx status code
func (o *PutMarkDownDocsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put mark down docs not found response has a 3xx status code
func (o *PutMarkDownDocsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put mark down docs not found response has a 4xx status code
func (o *PutMarkDownDocsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put mark down docs not found response has a 5xx status code
func (o *PutMarkDownDocsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put mark down docs not found response a status code equal to that given
func (o *PutMarkDownDocsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put mark down docs not found response
func (o *PutMarkDownDocsNotFound) Code() int {
	return 404
}

func (o *PutMarkDownDocsNotFound) Error() string {
	return fmt.Sprintf("[PUT /document-service/1.0/docs/{type}/{typeUuid}][%d] putMarkDownDocsNotFound  %+v", 404, o.Payload)
}

func (o *PutMarkDownDocsNotFound) String() string {
	return fmt.Sprintf("[PUT /document-service/1.0/docs/{type}/{typeUuid}][%d] putMarkDownDocsNotFound  %+v", 404, o.Payload)
}

func (o *PutMarkDownDocsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutMarkDownDocsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutMarkDownDocsInternalServerError creates a PutMarkDownDocsInternalServerError with default headers values
func NewPutMarkDownDocsInternalServerError() *PutMarkDownDocsInternalServerError {
	return &PutMarkDownDocsInternalServerError{}
}

/*
PutMarkDownDocsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. Certain fields are missing from the request.
*/
type PutMarkDownDocsInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this put mark down docs internal server error response has a 2xx status code
func (o *PutMarkDownDocsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put mark down docs internal server error response has a 3xx status code
func (o *PutMarkDownDocsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put mark down docs internal server error response has a 4xx status code
func (o *PutMarkDownDocsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put mark down docs internal server error response has a 5xx status code
func (o *PutMarkDownDocsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put mark down docs internal server error response a status code equal to that given
func (o *PutMarkDownDocsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the put mark down docs internal server error response
func (o *PutMarkDownDocsInternalServerError) Code() int {
	return 500
}

func (o *PutMarkDownDocsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /document-service/1.0/docs/{type}/{typeUuid}][%d] putMarkDownDocsInternalServerError  %+v", 500, o.Payload)
}

func (o *PutMarkDownDocsInternalServerError) String() string {
	return fmt.Sprintf("[PUT /document-service/1.0/docs/{type}/{typeUuid}][%d] putMarkDownDocsInternalServerError  %+v", 500, o.Payload)
}

func (o *PutMarkDownDocsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutMarkDownDocsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
