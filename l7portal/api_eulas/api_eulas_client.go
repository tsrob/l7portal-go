// Code generated by go-swagger; DO NOT EDIT.

package api_eulas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new api eulas API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api eulas API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAPIEulaAPIMgmt(params *CreateAPIEulaAPIMgmtParams, opts ...ClientOption) (*CreateAPIEulaAPIMgmtCreated, error)

	DeleteAPIEulasAPIMgmt(params *DeleteAPIEulasAPIMgmtParams, opts ...ClientOption) error

	GetAPIEulaAPIMgmt(params *GetAPIEulaAPIMgmtParams, opts ...ClientOption) (*GetAPIEulaAPIMgmtOK, error)

	GetAPIEulasAPIMgmt(params *GetAPIEulasAPIMgmtParams, opts ...ClientOption) (*GetAPIEulasAPIMgmtOK, error)

	UpdateAPIEulasAPIMgmt(params *UpdateAPIEulasAPIMgmtParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAPIEulaAPIMgmt creates an API e u l a

Create a specific End-User Licence Agreement.
*/
func (a *Client) CreateAPIEulaAPIMgmt(params *CreateAPIEulaAPIMgmtParams, opts ...ClientOption) (*CreateAPIEulaAPIMgmtCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAPIEulaAPIMgmtParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createApiEulaApiMgmt",
		Method:             "POST",
		PathPattern:        "/api-management/1.0/eulas",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAPIEulaAPIMgmtReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAPIEulaAPIMgmtCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createApiEulaApiMgmt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAPIEulasAPIMgmt deletes an existing API e u l a

Delete an existing API EULA. If API EULA is used by an API then it cannot be deleted.
*/
func (a *Client) DeleteAPIEulasAPIMgmt(params *DeleteAPIEulasAPIMgmtParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIEulasAPIMgmtParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteApiEulasApiMgmt",
		Method:             "DELETE",
		PathPattern:        "/api-management/1.0/eulas/{uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIEulasAPIMgmtReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetAPIEulaAPIMgmt gets a specific end user licence agreement

Get a specific End-User Licence Agreement.
*/
func (a *Client) GetAPIEulaAPIMgmt(params *GetAPIEulaAPIMgmtParams, opts ...ClientOption) (*GetAPIEulaAPIMgmtOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIEulaAPIMgmtParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiEulaApiMgmt",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/eulas/{uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIEulaAPIMgmtReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIEulaAPIMgmtOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiEulaApiMgmt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIEulasAPIMgmt lists all end user licence agreements

List all End-User Licence Agreements. In the APIM Portal, Users must agree to the EULA when it is added to an App but they must chose what EULA is to be applied for their API as part of publishing that API to Portal. When Administrators add an API to their Application, they must agree to the EULA. All APIs published on the API Portal need a EULA. Portal Admin and Api-owner can add new EULAs and can edit an API EULA that is not assigned to an API, or by passing 'forceUpdate=true' flag.
*/
func (a *Client) GetAPIEulasAPIMgmt(params *GetAPIEulasAPIMgmtParams, opts ...ClientOption) (*GetAPIEulasAPIMgmtOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIEulasAPIMgmtParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiEulasApiMgmt",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/eulas",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIEulasAPIMgmtReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIEulasAPIMgmtOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiEulasApiMgmt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAPIEulasAPIMgmt updates an existing API e u l a

Update an existing API EULA. By default, a EULA cannot  be updated if it is in use.  To update EULAs that are in use,  override using the query parameter 'forceUpdate=true'.
*/
func (a *Client) UpdateAPIEulasAPIMgmt(params *UpdateAPIEulasAPIMgmtParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAPIEulasAPIMgmtParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateApiEulasApiMgmt",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/eulas/{uuid}",
		ProducesMediaTypes: []string{"text/plain;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAPIEulasAPIMgmtReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
