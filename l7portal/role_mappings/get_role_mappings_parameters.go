// Code generated by go-swagger; DO NOT EDIT.

package role_mappings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRoleMappingsParams creates a new GetRoleMappingsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRoleMappingsParams() *GetRoleMappingsParams {
	return &GetRoleMappingsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRoleMappingsParamsWithTimeout creates a new GetRoleMappingsParams object
// with the ability to set a timeout on a request.
func NewGetRoleMappingsParamsWithTimeout(timeout time.Duration) *GetRoleMappingsParams {
	return &GetRoleMappingsParams{
		timeout: timeout,
	}
}

// NewGetRoleMappingsParamsWithContext creates a new GetRoleMappingsParams object
// with the ability to set a context for a request.
func NewGetRoleMappingsParamsWithContext(ctx context.Context) *GetRoleMappingsParams {
	return &GetRoleMappingsParams{
		Context: ctx,
	}
}

// NewGetRoleMappingsParamsWithHTTPClient creates a new GetRoleMappingsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRoleMappingsParamsWithHTTPClient(client *http.Client) *GetRoleMappingsParams {
	return &GetRoleMappingsParams{
		HTTPClient: client,
	}
}

/*
GetRoleMappingsParams contains all the parameters to send to the API endpoint

	for the get role mappings operation.

	Typically these are written to a http.Request.
*/
type GetRoleMappingsParams struct {

	/* Limit.

	   Restricts the number of Role Mappings to be fetched
	*/
	Limit *int64

	/* Offset.

	   Skips the provided number of Role Mappings from the list.
	*/
	Offset *int64

	/* OrgUuids.

	   Comma separated organisation UUIDs to filter the user-org-role mappings list
	*/
	OrgUuids *string

	/* RoleUuids.

	   Comma separated role UUIDs to filter the user-org-role mappings list
	*/
	RoleUuids *string

	/* UserUuids.

	   Comma separated user UUIDs to filter the user-org-role mappings list
	*/
	UserUuids *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get role mappings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRoleMappingsParams) WithDefaults() *GetRoleMappingsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get role mappings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRoleMappingsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get role mappings params
func (o *GetRoleMappingsParams) WithTimeout(timeout time.Duration) *GetRoleMappingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get role mappings params
func (o *GetRoleMappingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get role mappings params
func (o *GetRoleMappingsParams) WithContext(ctx context.Context) *GetRoleMappingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get role mappings params
func (o *GetRoleMappingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get role mappings params
func (o *GetRoleMappingsParams) WithHTTPClient(client *http.Client) *GetRoleMappingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get role mappings params
func (o *GetRoleMappingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the get role mappings params
func (o *GetRoleMappingsParams) WithLimit(limit *int64) *GetRoleMappingsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get role mappings params
func (o *GetRoleMappingsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get role mappings params
func (o *GetRoleMappingsParams) WithOffset(offset *int64) *GetRoleMappingsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get role mappings params
func (o *GetRoleMappingsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrgUuids adds the orgUuids to the get role mappings params
func (o *GetRoleMappingsParams) WithOrgUuids(orgUuids *string) *GetRoleMappingsParams {
	o.SetOrgUuids(orgUuids)
	return o
}

// SetOrgUuids adds the orgUuids to the get role mappings params
func (o *GetRoleMappingsParams) SetOrgUuids(orgUuids *string) {
	o.OrgUuids = orgUuids
}

// WithRoleUuids adds the roleUuids to the get role mappings params
func (o *GetRoleMappingsParams) WithRoleUuids(roleUuids *string) *GetRoleMappingsParams {
	o.SetRoleUuids(roleUuids)
	return o
}

// SetRoleUuids adds the roleUuids to the get role mappings params
func (o *GetRoleMappingsParams) SetRoleUuids(roleUuids *string) {
	o.RoleUuids = roleUuids
}

// WithUserUuids adds the userUuids to the get role mappings params
func (o *GetRoleMappingsParams) WithUserUuids(userUuids *string) *GetRoleMappingsParams {
	o.SetUserUuids(userUuids)
	return o
}

// SetUserUuids adds the userUuids to the get role mappings params
func (o *GetRoleMappingsParams) SetUserUuids(userUuids *string) {
	o.UserUuids = userUuids
}

// WriteToRequest writes these params to a swagger request
func (o *GetRoleMappingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.OrgUuids != nil {

		// query param orgUuids
		var qrOrgUuids string

		if o.OrgUuids != nil {
			qrOrgUuids = *o.OrgUuids
		}
		qOrgUuids := qrOrgUuids
		if qOrgUuids != "" {

			if err := r.SetQueryParam("orgUuids", qOrgUuids); err != nil {
				return err
			}
		}
	}

	if o.RoleUuids != nil {

		// query param roleUuids
		var qrRoleUuids string

		if o.RoleUuids != nil {
			qrRoleUuids = *o.RoleUuids
		}
		qRoleUuids := qrRoleUuids
		if qRoleUuids != "" {

			if err := r.SetQueryParam("roleUuids", qRoleUuids); err != nil {
				return err
			}
		}
	}

	if o.UserUuids != nil {

		// query param userUuids
		var qrUserUuids string

		if o.UserUuids != nil {
			qrUserUuids = *o.UserUuids
		}
		qUserUuids := qrUserUuids
		if qUserUuids != "" {

			if err := r.SetQueryParam("userUuids", qUserUuids); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
