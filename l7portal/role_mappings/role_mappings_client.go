// Code generated by go-swagger; DO NOT EDIT.

package role_mappings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new role mappings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for role mappings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRoleMappings(params *CreateRoleMappingsParams, opts ...ClientOption) (*CreateRoleMappingsCreated, error)

	DeleteRoleMapping(params *DeleteRoleMappingParams, opts ...ClientOption) error

	GetRoleMapping(params *GetRoleMappingParams, opts ...ClientOption) (*GetRoleMappingOK, error)

	GetRoleMappings(params *GetRoleMappingsParams, opts ...ClientOption) (*GetRoleMappingsOK, error)

	UpdateRoleMapping(params *UpdateRoleMappingParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateRoleMappings creates a new association between the user organisation and role

This api will create an association between the user, organisation and role provided via request body
*/
func (a *Client) CreateRoleMappings(params *CreateRoleMappingsParams, opts ...ClientOption) (*CreateRoleMappingsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRoleMappingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRoleMappings",
		Method:             "POST",
		PathPattern:        "/v2/role-mappings",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRoleMappingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRoleMappingsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRoleMappings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRoleMapping deletes an existing role mapping record

Delete an existing Role Mapping record.
*/
func (a *Client) DeleteRoleMapping(params *DeleteRoleMappingParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoleMappingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRoleMapping",
		Method:             "DELETE",
		PathPattern:        "/v2/role-mappings/{roleMappingUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoleMappingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetRoleMapping returns a single role mapping

Returns a single Role Mapping
*/
func (a *Client) GetRoleMapping(params *GetRoleMappingParams, opts ...ClientOption) (*GetRoleMappingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleMappingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRoleMapping",
		Method:             "GET",
		PathPattern:        "/v2/role-mappings/{roleMappingUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoleMappingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoleMappingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRoleMapping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRoleMappings returns a list of all role mappings based on the request parameters

Returns a list of all Role Mappings based on the request parameters.
*/
func (a *Client) GetRoleMappings(params *GetRoleMappingsParams, opts ...ClientOption) (*GetRoleMappingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleMappingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRoleMappings",
		Method:             "GET",
		PathPattern:        "/v2/role-mappings",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoleMappingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoleMappingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRoleMappings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRoleMapping updates an existing role mapping record

Update an existing Role Mapping record
*/
func (a *Client) UpdateRoleMapping(params *UpdateRoleMappingParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRoleMappingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRoleMapping",
		Method:             "PUT",
		PathPattern:        "/v2/role-mappings/{roleMappingUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRoleMappingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
