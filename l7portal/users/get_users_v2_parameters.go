// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetUsersV2Params creates a new GetUsersV2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetUsersV2Params() *GetUsersV2Params {
	return &GetUsersV2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetUsersV2ParamsWithTimeout creates a new GetUsersV2Params object
// with the ability to set a timeout on a request.
func NewGetUsersV2ParamsWithTimeout(timeout time.Duration) *GetUsersV2Params {
	return &GetUsersV2Params{
		timeout: timeout,
	}
}

// NewGetUsersV2ParamsWithContext creates a new GetUsersV2Params object
// with the ability to set a context for a request.
func NewGetUsersV2ParamsWithContext(ctx context.Context) *GetUsersV2Params {
	return &GetUsersV2Params{
		Context: ctx,
	}
}

// NewGetUsersV2ParamsWithHTTPClient creates a new GetUsersV2Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetUsersV2ParamsWithHTTPClient(client *http.Client) *GetUsersV2Params {
	return &GetUsersV2Params{
		HTTPClient: client,
	}
}

/*
GetUsersV2Params contains all the parameters to send to the API endpoint

	for the get users v2 operation.

	Typically these are written to a http.Request.
*/
type GetUsersV2Params struct {

	/* Count.

	   If set to true, returns only the count of users that match the filters
	*/
	Count *bool

	/* Field.

	   The field name to search upon, allowed values are name and email. This parameter works with search value true only
	*/
	Field *string

	/* Limit.

	   Restricts the number of users to be fetched
	*/
	Limit *int64

	/* Offset.

	   Skips the provided number of users from the user list.
	*/
	Offset *int64

	/* OrgUuids.

	   Comma separated organisation UUIDs to filter the user list
	*/
	OrgUuids *string

	/* Query.

	   String used to do a match against users' name or email. This string must be URI-encoded. This parameter works with search value true only
	*/
	Query *string

	/* RoleUuids.

	   Comma separated role UUIDs to filter the user list
	*/
	RoleUuids *string

	/* Search.

	   A parameter to signify the search intent of the API, search works when the parameter is true.
	*/
	Search *bool

	/* SortBy.

	   A parameter on which users would be ordered. Allowed Values: username, firstName, lastName, email, status
	*/
	SortBy *string

	/* SortOrder.

	   Order i.e. in ascending/descending. Allowed Values: ASC, DESC
	*/
	SortOrder *string

	/* Status.

	    Comma separated Status(es) on which users will be filtered, options are "ENABLED", "LOCKED", "DISABLED", "REGISTRATION_INIT", "REGISTRATION_PENDING_APPROVAL".
	Ex: ENABLED,LOCKED,DISABLED
	*/
	Status *string

	/* Username.

	   String which uniquely identifies a user
	*/
	Username *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get users v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUsersV2Params) WithDefaults() *GetUsersV2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get users v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUsersV2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get users v2 params
func (o *GetUsersV2Params) WithTimeout(timeout time.Duration) *GetUsersV2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get users v2 params
func (o *GetUsersV2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get users v2 params
func (o *GetUsersV2Params) WithContext(ctx context.Context) *GetUsersV2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get users v2 params
func (o *GetUsersV2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get users v2 params
func (o *GetUsersV2Params) WithHTTPClient(client *http.Client) *GetUsersV2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get users v2 params
func (o *GetUsersV2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get users v2 params
func (o *GetUsersV2Params) WithCount(count *bool) *GetUsersV2Params {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get users v2 params
func (o *GetUsersV2Params) SetCount(count *bool) {
	o.Count = count
}

// WithField adds the field to the get users v2 params
func (o *GetUsersV2Params) WithField(field *string) *GetUsersV2Params {
	o.SetField(field)
	return o
}

// SetField adds the field to the get users v2 params
func (o *GetUsersV2Params) SetField(field *string) {
	o.Field = field
}

// WithLimit adds the limit to the get users v2 params
func (o *GetUsersV2Params) WithLimit(limit *int64) *GetUsersV2Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get users v2 params
func (o *GetUsersV2Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get users v2 params
func (o *GetUsersV2Params) WithOffset(offset *int64) *GetUsersV2Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get users v2 params
func (o *GetUsersV2Params) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrgUuids adds the orgUuids to the get users v2 params
func (o *GetUsersV2Params) WithOrgUuids(orgUuids *string) *GetUsersV2Params {
	o.SetOrgUuids(orgUuids)
	return o
}

// SetOrgUuids adds the orgUuids to the get users v2 params
func (o *GetUsersV2Params) SetOrgUuids(orgUuids *string) {
	o.OrgUuids = orgUuids
}

// WithQuery adds the query to the get users v2 params
func (o *GetUsersV2Params) WithQuery(query *string) *GetUsersV2Params {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get users v2 params
func (o *GetUsersV2Params) SetQuery(query *string) {
	o.Query = query
}

// WithRoleUuids adds the roleUuids to the get users v2 params
func (o *GetUsersV2Params) WithRoleUuids(roleUuids *string) *GetUsersV2Params {
	o.SetRoleUuids(roleUuids)
	return o
}

// SetRoleUuids adds the roleUuids to the get users v2 params
func (o *GetUsersV2Params) SetRoleUuids(roleUuids *string) {
	o.RoleUuids = roleUuids
}

// WithSearch adds the search to the get users v2 params
func (o *GetUsersV2Params) WithSearch(search *bool) *GetUsersV2Params {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get users v2 params
func (o *GetUsersV2Params) SetSearch(search *bool) {
	o.Search = search
}

// WithSortBy adds the sortBy to the get users v2 params
func (o *GetUsersV2Params) WithSortBy(sortBy *string) *GetUsersV2Params {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get users v2 params
func (o *GetUsersV2Params) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortOrder adds the sortOrder to the get users v2 params
func (o *GetUsersV2Params) WithSortOrder(sortOrder *string) *GetUsersV2Params {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get users v2 params
func (o *GetUsersV2Params) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithStatus adds the status to the get users v2 params
func (o *GetUsersV2Params) WithStatus(status *string) *GetUsersV2Params {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get users v2 params
func (o *GetUsersV2Params) SetStatus(status *string) {
	o.Status = status
}

// WithUsername adds the username to the get users v2 params
func (o *GetUsersV2Params) WithUsername(username *string) *GetUsersV2Params {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the get users v2 params
func (o *GetUsersV2Params) SetUsername(username *string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *GetUsersV2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount bool

		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatBool(qrCount)
		if qCount != "" {

			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}
	}

	if o.Field != nil {

		// query param field
		var qrField string

		if o.Field != nil {
			qrField = *o.Field
		}
		qField := qrField
		if qField != "" {

			if err := r.SetQueryParam("field", qField); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.OrgUuids != nil {

		// query param orgUuids
		var qrOrgUuids string

		if o.OrgUuids != nil {
			qrOrgUuids = *o.OrgUuids
		}
		qOrgUuids := qrOrgUuids
		if qOrgUuids != "" {

			if err := r.SetQueryParam("orgUuids", qOrgUuids); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.RoleUuids != nil {

		// query param roleUuids
		var qrRoleUuids string

		if o.RoleUuids != nil {
			qrRoleUuids = *o.RoleUuids
		}
		qRoleUuids := qrRoleUuids
		if qRoleUuids != "" {

			if err := r.SetQueryParam("roleUuids", qRoleUuids); err != nil {
				return err
			}
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch bool

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := swag.FormatBool(qrSearch)
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}
	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string

		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {

			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.Username != nil {

		// query param username
		var qrUsername string

		if o.Username != nil {
			qrUsername = *o.Username
		}
		qUsername := qrUsername
		if qUsername != "" {

			if err := r.SetQueryParam("username", qUsername); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
