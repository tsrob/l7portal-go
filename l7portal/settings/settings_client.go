// Code generated by go-swagger; DO NOT EDIT.

package settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetSetting(params *GetSettingParams, opts ...ClientOption) (*GetSettingOK, error)

	UpdateSetting(params *UpdateSettingParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
	 GetSetting returns the value of a given portal setting by its name

	 Returns the value of a given portal setting by its name.
	The following settings can be retrieved using this method:
	GOOGLE_ANALYTICS_ID: Google Analytics tracking is enabled in the Portal when providing the Google Analytics code via this setting, Values (e.g. Google Analytics ID e.g. UA-XXXXX-XX);
	ACTIVATE_MSSO: Enables/disables Portal-based support for MAG Mobile Single Sign On clients. Values (true, false);
	DISABLE_LOCAL_LOGINS: Enables/disables Password Authentication method, Values (true, false);
	APPLICATION_REQUEST_WORKFLOW: Enables/disables approval process when creating applications, Values (ENABLED, DISABLED);
	EDIT_APPLICATION_REQUEST_WORKFLOW: Enables/disables approval process when editing applications, Values (ENABLED, DISABLED);
	DELETE_APPLICATION_REQUEST_WORKFLOW: Enables/disables approval process when deleting applications, Values (ENABLED, DISABLED);
	APP_EDIT_WF_EXCLUDE_PROPS: Allows to specify a list of fields that users can change without requiring approval process when editing applications, Values (e.g. {"Fields":["Name","Description","Status"],"CustomFields":["MyCustomField","AnotherCustomField"]});

The CustomFields object array values matches the actual name of the Custom Field.
EXT_USER_DASHBOARD_URI: Returns the URI of the Dashboard seen by external users (e.g. "/app/mydashboard.html")
APIHUB_SETTINGS: The value returns a JSON object for each API Hub instance of host, forgotpasswordPath, and resetpasswordPath;
DEFAULT_ORGANIZATION_TYPE:Sets the default type of the organization that is created when "Type" field is not specified, Values (CONSUMER, PUBLISHER).
*/
func (a *Client) GetSetting(params *GetSettingParams, opts ...ClientOption) (*GetSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSetting",
		Method:             "GET",
		PathPattern:        "/Settings('{input}')",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	 UpdateSetting updates the value of a given portal setting by its name or uuid

	 Updates the value of a given portal setting by its name or uuid.
	The following settings can be retrieved using this method:
	GOOGLE_ANALYTICS_ID: Google Analytics tracking is enabled in the Portal when providing the Google Analytics code via this setting, Values (e.g. Google Analytics ID e.g. UA-XXXXX-XX);
	ACTIVATE_MSSO: Enables/disables Portal-based support for MAG Mobile Single Sign On clients. Values (true, false);
	DISABLE_LOCAL_LOGINS: Enables/disables Password Authentication method for a tenant, Values (true, false);
	APPLICATION_REQUEST_WORKFLOW: Enables/disables approval process when creating applications, Values (ENABLED, DISABLED);
	EDIT_APPLICATION_REQUEST_WORKFLOW: Enables/disables approval process when editing applications, Values (ENABLED, DISABLED);
	DELETE_APPLICATION_REQUEST_WORKFLOW: Enables/disables approval process when deleting applications, Values (ENABLED, DISABLED);
	APP_EDIT_WF_EXCLUDE_PROPS: Allows to specify a list of fields that users can change without requiring approval process when editing applications,  Values (e.g. {"Fields":["Name","Description","Status"],"CustomFields":["MyCustomField","AnotherCustomField"]});

The CustomFields object array values must match the actual name of the Custom Field. The minimum json structure is {\"Fields\":[],\"CustomFields\":[]}.
EXT_USER_DASHBOARD_URI: Updates the URI of the Dashboard seen by external users (e.g. "/admin/app/dashboard.html")
FEATURE_FLAG_INTEGRATION_ENGINE: Enables/disables integrations in the Portal.
Perform a GET request to retrieve the Uuid for the setting. Then call a PUT request to enable the integration. E.g. {"Name": "FEATURE_FLAG_INTEGRATION_ENGINE","Uuid":"<GENERATED_UUID>","Value": "true"}
 APIHUB_SETTINGS: Updates the JSON object for an API Hub instance, for example, {
"Name": "APIHUB_SETTINGS",
"Value": "[{\\"name\\": \\"APIHub-example\\",\\"host\\": \\"apihub.example.com\\",\\"forgetpasswordPath\\": \\"/#/new-password\\",\\"signuppath\\": \\"/#/account-setup\\"}]",
"Uuid": "<GENERATED_UUID>"
};
DEFAULT_ORGANIZATION_TYPE:Updates the default type of the organization that is created when "Type" field is not specified, Values (CONSUMER, PUBLISHER).
*/
func (a *Client) UpdateSetting(params *UpdateSettingParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSetting",
		Method:             "PUT",
		PathPattern:        "/Settings('{input}')",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
