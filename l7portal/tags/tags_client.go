// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tags API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tags API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PUTTagOrganizations(params *PUTTagOrganizationsParams, opts ...ClientOption) (*PUTTagOrganizationsOK, error)

	PatchTagOrganizations(params *PatchTagOrganizationsParams, opts ...ClientOption) (*PatchTagOrganizationsOK, error)

	CreateAPITags(params *CreateAPITagsParams, opts ...ClientOption) (*CreateAPITagsCreated, error)

	CreateOrgTags(params *CreateOrgTagsParams, opts ...ClientOption) (*CreateOrgTagsCreated, error)

	DeleteAPITag(params *DeleteAPITagParams, opts ...ClientOption) (*DeleteAPITagNoContent, error)

	DeleteOrganizationTag(params *DeleteOrganizationTagParams, opts ...ClientOption) (*DeleteOrganizationTagNoContent, error)

	GetAPITags(params *GetAPITagsParams, opts ...ClientOption) (*GetAPITagsOK, error)

	GetAllOrganizationUUIDForTag(params *GetAllOrganizationUUIDForTagParams, opts ...ClientOption) (*GetAllOrganizationUUIDForTagOK, error)

	GetOrgTags(params *GetOrgTagsParams, opts ...ClientOption) (*GetOrgTagsOK, error)

	UpdateAPITags(params *UpdateAPITagsParams, opts ...ClientOption) (*UpdateAPITagsOK, error)

	UpdateOrganizationTags(params *UpdateOrganizationTagsParams, opts ...ClientOption) (*UpdateOrganizationTagsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
PUTTagOrganizations updates tag organization association

Update multiple Tag-Organization associations for specified Tag. An empty body would delete all Tag-Organization associations
*/
func (a *Client) PUTTagOrganizations(params *PUTTagOrganizationsParams, opts ...ClientOption) (*PUTTagOrganizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTTagOrganizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PUTTagOrganizations",
		Method:             "PUT",
		PathPattern:        "/tenant-admin/1.0/tags/{tagUuid}/organizations",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTTagOrganizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PUTTagOrganizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PUTTagOrganizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchTagOrganizations updates tag organization association

Update multiple Tag-Organization associations for specified Tag. To delete specified Tag-Organization association, use ‘remove’ as the value for the action parameter.
*/
func (a *Client) PatchTagOrganizations(params *PatchTagOrganizationsParams, opts ...ClientOption) (*PatchTagOrganizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTagOrganizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchTagOrganizations",
		Method:             "PATCH",
		PathPattern:        "/tenant-admin/1.0/tags/{tagUuid}/organizations",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchTagOrganizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchTagOrganizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchTagOrganizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAPITags creates new API tags

Creates one or more new API tags
*/
func (a *Client) CreateAPITags(params *CreateAPITagsParams, opts ...ClientOption) (*CreateAPITagsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAPITagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAPITags",
		Method:             "POST",
		PathPattern:        "/api-management/1.0/tags",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAPITagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAPITagsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAPITags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOrgTags creates new organization tags

Creates one or more new Organization tags
*/
func (a *Client) CreateOrgTags(params *CreateOrgTagsParams, opts ...ClientOption) (*CreateOrgTagsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrgTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrgTags",
		Method:             "POST",
		PathPattern:        "/tenant-admin/1.0/tags",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrgTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrgTagsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrgTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAPITag deletes an API tag

Deletes an existing API Tag
*/
func (a *Client) DeleteAPITag(params *DeleteAPITagParams, opts ...ClientOption) (*DeleteAPITagNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPITagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteApiTag",
		Method:             "DELETE",
		PathPattern:        "/api-management/1.0/tags/{tagUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPITagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPITagNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteApiTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOrganizationTag deletes an o r g a n i z a t i o n tag

Deletes an existing ORGANIZATION Tag
*/
func (a *Client) DeleteOrganizationTag(params *DeleteOrganizationTagParams, opts ...ClientOption) (*DeleteOrganizationTagNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganizationTag",
		Method:             "DELETE",
		PathPattern:        "/tenant-admin/1.0/tags/{tagUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationTagNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPITags gets all API tags

List all API Tags in API Portal based on the filter parameters.
*/
func (a *Client) GetAPITags(params *GetAPITagsParams, opts ...ClientOption) (*GetAPITagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPITagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAPITags",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/tags",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPITagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPITagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAPITags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllOrganizationUUIDForTag gets all organization u UI ds that are associated with the tag

List all Organization entities associated with the specified Tag.
*/
func (a *Client) GetAllOrganizationUUIDForTag(params *GetAllOrganizationUUIDForTagParams, opts ...ClientOption) (*GetAllOrganizationUUIDForTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllOrganizationUUIDForTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllOrganizationUUIDForTag",
		Method:             "GET",
		PathPattern:        "/tenant-admin/1.0/tags/{tagUuid}/organizations",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllOrganizationUUIDForTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllOrganizationUUIDForTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllOrganizationUUIDForTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrgTags gets all organization tags

List all Organization Tags in API Portal based on the filter parameters.
*/
func (a *Client) GetOrgTags(params *GetOrgTagsParams, opts ...ClientOption) (*GetOrgTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrgTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrgTags",
		Method:             "GET",
		PathPattern:        "/tenant-admin/1.0/tags",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrgTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrgTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrgTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAPITags updates an API tag

Update the name of an existing API Tag
*/
func (a *Client) UpdateAPITags(params *UpdateAPITagsParams, opts ...ClientOption) (*UpdateAPITagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAPITagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateApiTags",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/tags/{tagUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAPITagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAPITagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateApiTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOrganizationTags updates an organization tag

Update the name of an existing Organization Tag
*/
func (a *Client) UpdateOrganizationTags(params *UpdateOrganizationTagsParams, opts ...ClientOption) (*UpdateOrganizationTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationTags",
		Method:             "PUT",
		PathPattern:        "/tenant-admin/1.0/tags/{tagUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
