// Code generated by go-swagger; DO NOT EDIT.

package gateway_bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new gateway bundles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for gateway bundles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateGatewayBundlesUsingPOST(params *CreateGatewayBundlesUsingPOSTParams, opts ...ClientOption) (*CreateGatewayBundlesUsingPOSTCreated, error)

	DeleteGatewayBundleUsingDELETE(params *DeleteGatewayBundleUsingDELETEParams, opts ...ClientOption) (*DeleteGatewayBundleUsingDELETENoContent, error)

	GetGatewayBundleDetailsUsingGET(params *GetGatewayBundleDetailsUsingGETParams, opts ...ClientOption) (*GetGatewayBundleDetailsUsingGETOK, error)

	GetGatewayBundlesApisUsingGET(params *GetGatewayBundlesApisUsingGETParams, opts ...ClientOption) (*GetGatewayBundlesApisUsingGETOK, error)

	GetGatewayBundlesMetadataUsingGET(params *GetGatewayBundlesMetadataUsingGETParams, opts ...ClientOption) (*GetGatewayBundlesMetadataUsingGETOK, error)

	GetGatewayBundlesUsingGET(params *GetGatewayBundlesUsingGETParams, opts ...ClientOption) (*GetGatewayBundlesUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateGatewayBundlesUsingPOST imports gateway bundles

	Import Gateway bundles.

**This API call does not work from the API Explorer and we recommended to test it via cURL.**  When using cURL, use the following options to specify the:
+ install bundle: ```-F 'files=@gatewaybundle-1.0.install.bundle;type=application/octet-stream'```
+ metadata file: ```-F 'files=@gatewaybundle-1.0.metadata.yml;type=text/yml'```
+ delete bundle file: ```-F 'files=@gatewaybundle-1.0.delete.bundle;type=application/octet-stream'```
*/
func (a *Client) CreateGatewayBundlesUsingPOST(params *CreateGatewayBundlesUsingPOSTParams, opts ...ClientOption) (*CreateGatewayBundlesUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGatewayBundlesUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGatewayBundlesUsingPOST",
		Method:             "POST",
		PathPattern:        "/policy-management/0.1/gateway-bundles",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGatewayBundlesUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGatewayBundlesUsingPOSTCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGatewayBundlesUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteGatewayBundleUsingDELETE deletes the gateway bundle

Deletes the Gateway bundle. The Gateway bundle bundle must be in 'not deployed' status to all proxies before it can be deleted and the policy template created from the bundle should not be in use by any API.
*/
func (a *Client) DeleteGatewayBundleUsingDELETE(params *DeleteGatewayBundleUsingDELETEParams, opts ...ClientOption) (*DeleteGatewayBundleUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGatewayBundleUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteGatewayBundleUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/policy-management/0.1/gateway-bundles/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGatewayBundleUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGatewayBundleUsingDELETENoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGatewayBundleUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGatewayBundleDetailsUsingGET gets gateway bundle details

Get Gateway bundle details.
*/
func (a *Client) GetGatewayBundleDetailsUsingGET(params *GetGatewayBundleDetailsUsingGETParams, opts ...ClientOption) (*GetGatewayBundleDetailsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewayBundleDetailsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGatewayBundleDetailsUsingGET",
		Method:             "GET",
		PathPattern:        "/policy-management/0.1/gateway-bundles/{uuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGatewayBundleDetailsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewayBundleDetailsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatewayBundleDetailsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGatewayBundlesApisUsingGET returns the list of a p is that uses the policy template created by the gateway bundle

Returns the list of APIs that uses the policy template created by the Gateway bundle. To use the policy template properly, both APIs and Gateway bundle need to be deployed to the same proxy/proxies. Additional parameters are available for filtering results.
*/
func (a *Client) GetGatewayBundlesApisUsingGET(params *GetGatewayBundlesApisUsingGETParams, opts ...ClientOption) (*GetGatewayBundlesApisUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewayBundlesApisUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGatewayBundlesApisUsingGET",
		Method:             "GET",
		PathPattern:        "/policy-management/0.1/gateway-bundles/{uuid}/apis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGatewayBundlesApisUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewayBundlesApisUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatewayBundlesApisUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGatewayBundlesMetadataUsingGET downloads the metadata file content

Downloads the metadata file content.
*/
func (a *Client) GetGatewayBundlesMetadataUsingGET(params *GetGatewayBundlesMetadataUsingGETParams, opts ...ClientOption) (*GetGatewayBundlesMetadataUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewayBundlesMetadataUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGatewayBundlesMetadataUsingGET",
		Method:             "GET",
		PathPattern:        "/policy-management/0.1/gateway-bundles/{uuid}/metadata",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGatewayBundlesMetadataUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewayBundlesMetadataUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatewayBundlesMetadataUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGatewayBundlesUsingGET returns the list of gateway bundles

Returns the list of Gateway bundles. A Gateway Bundle is a set of files generated by the Developer Plugin. It can be deployed to a proxy.
*/
func (a *Client) GetGatewayBundlesUsingGET(params *GetGatewayBundlesUsingGETParams, opts ...ClientOption) (*GetGatewayBundlesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewayBundlesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGatewayBundlesUsingGET",
		Method:             "GET",
		PathPattern:        "/policy-management/0.1/gateway-bundles",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGatewayBundlesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewayBundlesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatewayBundlesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
