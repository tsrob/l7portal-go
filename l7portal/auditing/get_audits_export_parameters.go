// Code generated by go-swagger; DO NOT EDIT.

package auditing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAuditsExportParams creates a new GetAuditsExportParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAuditsExportParams() *GetAuditsExportParams {
	return &GetAuditsExportParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAuditsExportParamsWithTimeout creates a new GetAuditsExportParams object
// with the ability to set a timeout on a request.
func NewGetAuditsExportParamsWithTimeout(timeout time.Duration) *GetAuditsExportParams {
	return &GetAuditsExportParams{
		timeout: timeout,
	}
}

// NewGetAuditsExportParamsWithContext creates a new GetAuditsExportParams object
// with the ability to set a context for a request.
func NewGetAuditsExportParamsWithContext(ctx context.Context) *GetAuditsExportParams {
	return &GetAuditsExportParams{
		Context: ctx,
	}
}

// NewGetAuditsExportParamsWithHTTPClient creates a new GetAuditsExportParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAuditsExportParamsWithHTTPClient(client *http.Client) *GetAuditsExportParams {
	return &GetAuditsExportParams{
		HTTPClient: client,
	}
}

/*
GetAuditsExportParams contains all the parameters to send to the API endpoint

	for the get audits export operation.

	Typically these are written to a http.Request.
*/
type GetAuditsExportParams struct {

	/* Accept.

	   Accept Header
	*/
	Accept string

	/* EndTs.

	   The most recent time (in milliseconds) for which to retrieve audits (NOTE: startTs/endTs can be no more than 90 days apart).
	*/
	EndTs int64

	/* Format.

	   Document format
	*/
	Format string

	/* StartTs.

	   The oldest time (in milliseconds) for which to retrieve audits (NOTE: startTs/endTs can be no more than 90 days apart).
	*/
	StartTs int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get audits export params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuditsExportParams) WithDefaults() *GetAuditsExportParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get audits export params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuditsExportParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get audits export params
func (o *GetAuditsExportParams) WithTimeout(timeout time.Duration) *GetAuditsExportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get audits export params
func (o *GetAuditsExportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get audits export params
func (o *GetAuditsExportParams) WithContext(ctx context.Context) *GetAuditsExportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get audits export params
func (o *GetAuditsExportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get audits export params
func (o *GetAuditsExportParams) WithHTTPClient(client *http.Client) *GetAuditsExportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get audits export params
func (o *GetAuditsExportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccept adds the accept to the get audits export params
func (o *GetAuditsExportParams) WithAccept(accept string) *GetAuditsExportParams {
	o.SetAccept(accept)
	return o
}

// SetAccept adds the accept to the get audits export params
func (o *GetAuditsExportParams) SetAccept(accept string) {
	o.Accept = accept
}

// WithEndTs adds the endTs to the get audits export params
func (o *GetAuditsExportParams) WithEndTs(endTs int64) *GetAuditsExportParams {
	o.SetEndTs(endTs)
	return o
}

// SetEndTs adds the endTs to the get audits export params
func (o *GetAuditsExportParams) SetEndTs(endTs int64) {
	o.EndTs = endTs
}

// WithFormat adds the format to the get audits export params
func (o *GetAuditsExportParams) WithFormat(format string) *GetAuditsExportParams {
	o.SetFormat(format)
	return o
}

// SetFormat adds the format to the get audits export params
func (o *GetAuditsExportParams) SetFormat(format string) {
	o.Format = format
}

// WithStartTs adds the startTs to the get audits export params
func (o *GetAuditsExportParams) WithStartTs(startTs int64) *GetAuditsExportParams {
	o.SetStartTs(startTs)
	return o
}

// SetStartTs adds the startTs to the get audits export params
func (o *GetAuditsExportParams) SetStartTs(startTs int64) {
	o.StartTs = startTs
}

// WriteToRequest writes these params to a swagger request
func (o *GetAuditsExportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Accept
	if err := r.SetHeaderParam("Accept", o.Accept); err != nil {
		return err
	}

	// query param endTs
	qrEndTs := o.EndTs
	qEndTs := swag.FormatInt64(qrEndTs)
	if qEndTs != "" {

		if err := r.SetQueryParam("endTs", qEndTs); err != nil {
			return err
		}
	}

	// query param format
	qrFormat := o.Format
	qFormat := qrFormat
	if qFormat != "" {

		if err := r.SetQueryParam("format", qFormat); err != nil {
			return err
		}
	}

	// query param startTs
	qrStartTs := o.StartTs
	qStartTs := swag.FormatInt64(qrStartTs)
	if qStartTs != "" {

		if err := r.SetQueryParam("startTs", qStartTs); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
