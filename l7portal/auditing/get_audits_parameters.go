// Code generated by go-swagger; DO NOT EDIT.

package auditing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAuditsParams creates a new GetAuditsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAuditsParams() *GetAuditsParams {
	return &GetAuditsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAuditsParamsWithTimeout creates a new GetAuditsParams object
// with the ability to set a timeout on a request.
func NewGetAuditsParamsWithTimeout(timeout time.Duration) *GetAuditsParams {
	return &GetAuditsParams{
		timeout: timeout,
	}
}

// NewGetAuditsParamsWithContext creates a new GetAuditsParams object
// with the ability to set a context for a request.
func NewGetAuditsParamsWithContext(ctx context.Context) *GetAuditsParams {
	return &GetAuditsParams{
		Context: ctx,
	}
}

// NewGetAuditsParamsWithHTTPClient creates a new GetAuditsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAuditsParamsWithHTTPClient(client *http.Client) *GetAuditsParams {
	return &GetAuditsParams{
		HTTPClient: client,
	}
}

/*
GetAuditsParams contains all the parameters to send to the API endpoint

	for the get audits operation.

	Typically these are written to a http.Request.
*/
type GetAuditsParams struct {

	/* Action.

	   The action which caused the audit event, if specified will return only audit events for action. Examples: Created, Updated, Deleted
	*/
	Action *string

	/* EndTs.

	   The most recent time (in milliseconds) for which to retrieve audits. If not specified, retrieves all from startTs (if specified) to current time
	*/
	EndTs *int64

	/* EntityName.

	   The name of the entity, if specified will return only audit events for specific entity names
	*/
	EntityName *string

	/* EntityType.

	   The entityType, if specified will return only the type specified, if available.  Examples: API, Application, Organization, AccountPlan, User
	*/
	EntityType *string

	/* Page.

	   The zero-based page number of results being requested
	*/
	Page *int64

	/* Size.

	   The number of records to return per request
	*/
	Size *int64

	/* StartTs.

	   The oldest time (in milliseconds) for which to retrieve audits. If not specified retrieves all up to endTs (if specified).  If neither startTs or endTs is specified, return all records
	*/
	StartTs *int64

	/* UserName.

	   The userName of the user who initiated the event, if specified will return only audit events for this userName.
	*/
	UserName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get audits params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuditsParams) WithDefaults() *GetAuditsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get audits params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuditsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get audits params
func (o *GetAuditsParams) WithTimeout(timeout time.Duration) *GetAuditsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get audits params
func (o *GetAuditsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get audits params
func (o *GetAuditsParams) WithContext(ctx context.Context) *GetAuditsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get audits params
func (o *GetAuditsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get audits params
func (o *GetAuditsParams) WithHTTPClient(client *http.Client) *GetAuditsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get audits params
func (o *GetAuditsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the get audits params
func (o *GetAuditsParams) WithAction(action *string) *GetAuditsParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the get audits params
func (o *GetAuditsParams) SetAction(action *string) {
	o.Action = action
}

// WithEndTs adds the endTs to the get audits params
func (o *GetAuditsParams) WithEndTs(endTs *int64) *GetAuditsParams {
	o.SetEndTs(endTs)
	return o
}

// SetEndTs adds the endTs to the get audits params
func (o *GetAuditsParams) SetEndTs(endTs *int64) {
	o.EndTs = endTs
}

// WithEntityName adds the entityName to the get audits params
func (o *GetAuditsParams) WithEntityName(entityName *string) *GetAuditsParams {
	o.SetEntityName(entityName)
	return o
}

// SetEntityName adds the entityName to the get audits params
func (o *GetAuditsParams) SetEntityName(entityName *string) {
	o.EntityName = entityName
}

// WithEntityType adds the entityType to the get audits params
func (o *GetAuditsParams) WithEntityType(entityType *string) *GetAuditsParams {
	o.SetEntityType(entityType)
	return o
}

// SetEntityType adds the entityType to the get audits params
func (o *GetAuditsParams) SetEntityType(entityType *string) {
	o.EntityType = entityType
}

// WithPage adds the page to the get audits params
func (o *GetAuditsParams) WithPage(page *int64) *GetAuditsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get audits params
func (o *GetAuditsParams) SetPage(page *int64) {
	o.Page = page
}

// WithSize adds the size to the get audits params
func (o *GetAuditsParams) WithSize(size *int64) *GetAuditsParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get audits params
func (o *GetAuditsParams) SetSize(size *int64) {
	o.Size = size
}

// WithStartTs adds the startTs to the get audits params
func (o *GetAuditsParams) WithStartTs(startTs *int64) *GetAuditsParams {
	o.SetStartTs(startTs)
	return o
}

// SetStartTs adds the startTs to the get audits params
func (o *GetAuditsParams) SetStartTs(startTs *int64) {
	o.StartTs = startTs
}

// WithUserName adds the userName to the get audits params
func (o *GetAuditsParams) WithUserName(userName *string) *GetAuditsParams {
	o.SetUserName(userName)
	return o
}

// SetUserName adds the userName to the get audits params
func (o *GetAuditsParams) SetUserName(userName *string) {
	o.UserName = userName
}

// WriteToRequest writes these params to a swagger request
func (o *GetAuditsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Action != nil {

		// query param action
		var qrAction string

		if o.Action != nil {
			qrAction = *o.Action
		}
		qAction := qrAction
		if qAction != "" {

			if err := r.SetQueryParam("action", qAction); err != nil {
				return err
			}
		}
	}

	if o.EndTs != nil {

		// query param endTs
		var qrEndTs int64

		if o.EndTs != nil {
			qrEndTs = *o.EndTs
		}
		qEndTs := swag.FormatInt64(qrEndTs)
		if qEndTs != "" {

			if err := r.SetQueryParam("endTs", qEndTs); err != nil {
				return err
			}
		}
	}

	if o.EntityName != nil {

		// query param entityName
		var qrEntityName string

		if o.EntityName != nil {
			qrEntityName = *o.EntityName
		}
		qEntityName := qrEntityName
		if qEntityName != "" {

			if err := r.SetQueryParam("entityName", qEntityName); err != nil {
				return err
			}
		}
	}

	if o.EntityType != nil {

		// query param entityType
		var qrEntityType string

		if o.EntityType != nil {
			qrEntityType = *o.EntityType
		}
		qEntityType := qrEntityType
		if qEntityType != "" {

			if err := r.SetQueryParam("entityType", qEntityType); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int64

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt64(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.StartTs != nil {

		// query param startTs
		var qrStartTs int64

		if o.StartTs != nil {
			qrStartTs = *o.StartTs
		}
		qStartTs := swag.FormatInt64(qrStartTs)
		if qStartTs != "" {

			if err := r.SetQueryParam("startTs", qStartTs); err != nil {
				return err
			}
		}
	}

	if o.UserName != nil {

		// query param userName
		var qrUserName string

		if o.UserName != nil {
			qrUserName = *o.UserName
		}
		qUserName := qrUserName
		if qUserName != "" {

			if err := r.SetQueryParam("userName", qUserName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
