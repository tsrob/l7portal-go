// Code generated by go-swagger; DO NOT EDIT.

package requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tsrob/l7portal-go/models"
)

// ReviewAllRequestReader is a Reader for the ReviewAllRequest structure.
type ReviewAllRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReviewAllRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReviewAllRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewReviewAllRequestNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReviewAllRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReviewAllRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewReviewAllRequestOK creates a ReviewAllRequestOK with default headers values
func NewReviewAllRequestOK() *ReviewAllRequestOK {
	return &ReviewAllRequestOK{}
}

/*
ReviewAllRequestOK describes a response with status code 200, with default header values.

The request execution is succeeded. However, it could contain errors in the results, please refer to response body for detail
*/
type ReviewAllRequestOK struct {
	Payload *models.AppRequestActionRespDto
}

// IsSuccess returns true when this review all request o k response has a 2xx status code
func (o *ReviewAllRequestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this review all request o k response has a 3xx status code
func (o *ReviewAllRequestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this review all request o k response has a 4xx status code
func (o *ReviewAllRequestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this review all request o k response has a 5xx status code
func (o *ReviewAllRequestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this review all request o k response a status code equal to that given
func (o *ReviewAllRequestOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the review all request o k response
func (o *ReviewAllRequestOK) Code() int {
	return 200
}

func (o *ReviewAllRequestOK) Error() string {
	return fmt.Sprintf("[PUT /api-management/1.0/requests/applications/{uuid}/review][%d] reviewAllRequestOK  %+v", 200, o.Payload)
}

func (o *ReviewAllRequestOK) String() string {
	return fmt.Sprintf("[PUT /api-management/1.0/requests/applications/{uuid}/review][%d] reviewAllRequestOK  %+v", 200, o.Payload)
}

func (o *ReviewAllRequestOK) GetPayload() *models.AppRequestActionRespDto {
	return o.Payload
}

func (o *ReviewAllRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppRequestActionRespDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReviewAllRequestNoContent creates a ReviewAllRequestNoContent with default headers values
func NewReviewAllRequestNoContent() *ReviewAllRequestNoContent {
	return &ReviewAllRequestNoContent{}
}

/*
ReviewAllRequestNoContent describes a response with status code 204, with default header values.

Success, no content to show
*/
type ReviewAllRequestNoContent struct {
}

// IsSuccess returns true when this review all request no content response has a 2xx status code
func (o *ReviewAllRequestNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this review all request no content response has a 3xx status code
func (o *ReviewAllRequestNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this review all request no content response has a 4xx status code
func (o *ReviewAllRequestNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this review all request no content response has a 5xx status code
func (o *ReviewAllRequestNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this review all request no content response a status code equal to that given
func (o *ReviewAllRequestNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the review all request no content response
func (o *ReviewAllRequestNoContent) Code() int {
	return 204
}

func (o *ReviewAllRequestNoContent) Error() string {
	return fmt.Sprintf("[PUT /api-management/1.0/requests/applications/{uuid}/review][%d] reviewAllRequestNoContent ", 204)
}

func (o *ReviewAllRequestNoContent) String() string {
	return fmt.Sprintf("[PUT /api-management/1.0/requests/applications/{uuid}/review][%d] reviewAllRequestNoContent ", 204)
}

func (o *ReviewAllRequestNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReviewAllRequestBadRequest creates a ReviewAllRequestBadRequest with default headers values
func NewReviewAllRequestBadRequest() *ReviewAllRequestBadRequest {
	return &ReviewAllRequestBadRequest{}
}

/*
ReviewAllRequestBadRequest describes a response with status code 400, with default header values.

Bad Request due to a validation error.
*/
type ReviewAllRequestBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this review all request bad request response has a 2xx status code
func (o *ReviewAllRequestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this review all request bad request response has a 3xx status code
func (o *ReviewAllRequestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this review all request bad request response has a 4xx status code
func (o *ReviewAllRequestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this review all request bad request response has a 5xx status code
func (o *ReviewAllRequestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this review all request bad request response a status code equal to that given
func (o *ReviewAllRequestBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the review all request bad request response
func (o *ReviewAllRequestBadRequest) Code() int {
	return 400
}

func (o *ReviewAllRequestBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api-management/1.0/requests/applications/{uuid}/review][%d] reviewAllRequestBadRequest  %+v", 400, o.Payload)
}

func (o *ReviewAllRequestBadRequest) String() string {
	return fmt.Sprintf("[PUT /api-management/1.0/requests/applications/{uuid}/review][%d] reviewAllRequestBadRequest  %+v", 400, o.Payload)
}

func (o *ReviewAllRequestBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReviewAllRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReviewAllRequestNotFound creates a ReviewAllRequestNotFound with default headers values
func NewReviewAllRequestNotFound() *ReviewAllRequestNotFound {
	return &ReviewAllRequestNotFound{}
}

/*
ReviewAllRequestNotFound describes a response with status code 404, with default header values.

Entity not found
*/
type ReviewAllRequestNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this review all request not found response has a 2xx status code
func (o *ReviewAllRequestNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this review all request not found response has a 3xx status code
func (o *ReviewAllRequestNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this review all request not found response has a 4xx status code
func (o *ReviewAllRequestNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this review all request not found response has a 5xx status code
func (o *ReviewAllRequestNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this review all request not found response a status code equal to that given
func (o *ReviewAllRequestNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the review all request not found response
func (o *ReviewAllRequestNotFound) Code() int {
	return 404
}

func (o *ReviewAllRequestNotFound) Error() string {
	return fmt.Sprintf("[PUT /api-management/1.0/requests/applications/{uuid}/review][%d] reviewAllRequestNotFound  %+v", 404, o.Payload)
}

func (o *ReviewAllRequestNotFound) String() string {
	return fmt.Sprintf("[PUT /api-management/1.0/requests/applications/{uuid}/review][%d] reviewAllRequestNotFound  %+v", 404, o.Payload)
}

func (o *ReviewAllRequestNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReviewAllRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
