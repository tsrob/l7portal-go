// Code generated by go-swagger; DO NOT EDIT.

package apis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new apis API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for apis API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AssociateAPIOrgRLQToAPIPatch(params *AssociateAPIOrgRLQToAPIPatchParams, opts ...ClientOption) (*AssociateAPIOrgRLQToAPIPatchNoContent, error)

	AssociateAPIOrgRLQToAPIPut(params *AssociateAPIOrgRLQToAPIPutParams, opts ...ClientOption) (*AssociateAPIOrgRLQToAPIPutNoContent, error)

	AssociateTagsToAPI(params *AssociateTagsToAPIParams, opts ...ClientOption) (*AssociateTagsToAPIOK, error)

	CreateUsingPOST(params *CreateUsingPOSTParams, opts ...ClientOption) (*CreateUsingPOSTCreated, error)

	DeleteAPIUsingDELETE(params *DeleteAPIUsingDELETEParams, opts ...ClientOption) (*DeleteAPIUsingDELETENoContent, error)

	GetAllAPIPolicyEntitiesUsingGET(params *GetAllAPIPolicyEntitiesUsingGETParams, opts ...ClientOption) (*GetAllAPIPolicyEntitiesUsingGETOK, error)

	GetAllAssetFilesAsZipUsingGET(params *GetAllAssetFilesAsZipUsingGETParams, opts ...ClientOption) (*GetAllAssetFilesAsZipUsingGETOK, error)

	GetAllAssetsUsingGET(params *GetAllAssetsUsingGETParams, opts ...ClientOption) (*GetAllAssetsUsingGETOK, error)

	GetAllAvailableUsersUsingGET(params *GetAllAvailableUsersUsingGETParams, opts ...ClientOption) (*GetAllAvailableUsersUsingGETOK, error)

	GetApi10(params *GetApi10Params, opts ...ClientOption) (*GetApi10OK, error)

	GetAPIBundleUsingGET(params *GetAPIBundleUsingGETParams, opts ...ClientOption) (*GetAPIBundleUsingGETOK, error)

	GetAPICustomFieldValuesUsingGET(params *GetAPICustomFieldValuesUsingGETParams, opts ...ClientOption) (*GetAPICustomFieldValuesUsingGETOK, error)

	GetAPIUsage(params *GetAPIUsageParams, opts ...ClientOption) (*GetAPIUsageOK, error)

	GetApis10(params *GetApis10Params, opts ...ClientOption) (*GetApis10OK, error)

	GetAssetFileUsingGET(params *GetAssetFileUsingGETParams, opts ...ClientOption) (*GetAssetFileUsingGETOK, error)

	GetAssociatedAPIOrgRLQ(params *GetAssociatedAPIOrgRLQParams, opts ...ClientOption) (*GetAssociatedAPIOrgRLQOK, error)

	GetAssociatedAPITags(params *GetAssociatedAPITagsParams, opts ...ClientOption) (*GetAssociatedAPITagsOK, error)

	GetPolicyTemplates(params *GetPolicyTemplatesParams, opts ...ClientOption) (*GetPolicyTemplatesOK, error)

	GetSwaggerWithContentUsingGET(params *GetSwaggerWithContentUsingGETParams, opts ...ClientOption) (*GetSwaggerWithContentUsingGETOK, error)

	GetWsdlWithContentUsingGET(params *GetWsdlWithContentUsingGETParams, opts ...ClientOption) (*GetWsdlWithContentUsingGETOK, error)

	PostAPIAssetUsingPOST(params *PostAPIAssetUsingPOSTParams, opts ...ClientOption) (*PostAPIAssetUsingPOSTNoContent, error)

	PublishAPIUsingPUT(params *PublishAPIUsingPUTParams, opts ...ClientOption) (*PublishAPIUsingPUTNoContent, error)

	SaveAPICustomFieldValueUsingPUT(params *SaveAPICustomFieldValueUsingPUTParams, opts ...ClientOption) (*SaveAPICustomFieldValueUsingPUTNoContent, error)

	SaveUsingPUT(params *SaveUsingPUTParams, opts ...ClientOption) (*SaveUsingPUTNoContent, error)

	UpdateUsingPUT(params *UpdateUsingPUTParams, opts ...ClientOption) (*UpdateUsingPUTNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AssociateAPIOrgRLQToAPIPatch associates organization and rate quota Api per org entities to API

Associates list of Organization and Rate Quota(Api per Org) combination to the specified API.
*/
func (a *Client) AssociateAPIOrgRLQToAPIPatch(params *AssociateAPIOrgRLQToAPIPatchParams, opts ...ClientOption) (*AssociateAPIOrgRLQToAPIPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociateAPIOrgRLQToAPIPatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "associateApiOrgRLQToApiPatch",
		Method:             "PATCH",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/org-rate-quotas",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociateAPIOrgRLQToAPIPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociateAPIOrgRLQToAPIPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for associateApiOrgRLQToApiPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssociateAPIOrgRLQToAPIPut associates organization and rate quota Api per org entities to API

Associates list of Organization and Rate Quota(Api per Org) combination to the specified API. An empty payload will disassociate all the existing Organization and Rate Quota(Api per Org).
*/
func (a *Client) AssociateAPIOrgRLQToAPIPut(params *AssociateAPIOrgRLQToAPIPutParams, opts ...ClientOption) (*AssociateAPIOrgRLQToAPIPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociateAPIOrgRLQToAPIPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "associateApiOrgRLQToApiPut",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/org-rate-quotas",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociateAPIOrgRLQToAPIPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociateAPIOrgRLQToAPIPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for associateApiOrgRLQToApiPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssociateTagsToAPI associates tag entities to API

Associates list of tags to the specified API. An empty payload will disassociate all the existing tags.
*/
func (a *Client) AssociateTagsToAPI(params *AssociateTagsToAPIParams, opts ...ClientOption) (*AssociateTagsToAPIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociateTagsToAPIParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "associateTagsToApi",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/tags",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociateTagsToAPIReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociateTagsToAPIOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for associateTagsToApi: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateUsingPOST creates an API

Creates a REST or SOAP API in an INCOMPLETE state. Before an API can be published which changes it to ENABLED, it needs to have at least one policy entity, any required custom fields defined and if it's a SOAP API it needs a WSDL asset attached. The required fields are name, apiServiceType (REST or SOAP), version, apiEulaUuid, accessStatus (PUBLIC or PRIVATE), ssgUrl (relative API URI that is part the API proxy URL. For Gateway-published APIs, the value gets set as part of the sync, as defined by the Service Resolution Path in the service.), authenticationType (NONE, OAUTH2 or API_KEY), authenticationParameters, managingOrgUuid and locationUrl (hosted location URL of API). Optional parameters are description and privateDescription.
*/
func (a *Client) CreateUsingPOST(params *CreateUsingPOSTParams, opts ...ClientOption) (*CreateUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUsingPOST",
		Method:             "POST",
		PathPattern:        "/api-management/1.0/apis",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUsingPOSTCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAPIUsingDELETE deletes the API

Deletes the API. An API must be disabled and not have any Applications using it to be deletable.
*/
func (a *Client) DeleteAPIUsingDELETE(params *DeleteAPIUsingDELETEParams, opts ...ClientOption) (*DeleteAPIUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteApiUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIUsingDELETENoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteApiUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllAPIPolicyEntitiesUsingGET gets all policy entities of associated API

All Policy entities associated with the specified API will be retrieved.
*/
func (a *Client) GetAllAPIPolicyEntitiesUsingGET(params *GetAllAPIPolicyEntitiesUsingGETParams, opts ...ClientOption) (*GetAllAPIPolicyEntitiesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAPIPolicyEntitiesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllApiPolicyEntitiesUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/policy-entities",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllAPIPolicyEntitiesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAPIPolicyEntitiesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllApiPolicyEntitiesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllAssetFilesAsZipUsingGET downloads all asset files linked to the API as z IP
*/
func (a *Client) GetAllAssetFilesAsZipUsingGET(params *GetAllAssetFilesAsZipUsingGETParams, opts ...ClientOption) (*GetAllAssetFilesAsZipUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAssetFilesAsZipUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllAssetFilesAsZipUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/assets/archive",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllAssetFilesAsZipUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAssetFilesAsZipUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllAssetFilesAsZipUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllAssetsUsingGET gets the assets linked to the API

Get the assets linked to the API. A REST API can have an optionally specified WADL, or Swagger JSON file. A SOAP API must have a WSDL specified for it.
*/
func (a *Client) GetAllAssetsUsingGET(params *GetAllAssetsUsingGETParams, opts ...ClientOption) (*GetAllAssetsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAssetsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllAssetsUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/assets",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllAssetsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAssetsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllAssetsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllAvailableUsersUsingGET gets all users that have permission to manage this api
*/
func (a *Client) GetAllAvailableUsersUsingGET(params *GetAllAvailableUsersUsingGETParams, opts ...ClientOption) (*GetAllAvailableUsersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAvailableUsersUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllAvailableUsersUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/0.1/permissions/apis/{apiUuid}/available-users",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllAvailableUsersUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAvailableUsersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllAvailableUsersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApi10 returns a single API

Returns a single API with the specified UUID.
*/
func (a *Client) GetApi10(params *GetApi10Params, opts ...ClientOption) (*GetApi10OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApi10Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApi1.0",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApi10Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi10OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApi1.0: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIBundleUsingGET retrieves XML representation of API

Get an XML representation of the API that can be used with RESTMAN on CA API Gateway to deploy or un-deploy the API
*/
func (a *Client) GetAPIBundleUsingGET(params *GetAPIBundleUsingGETParams, opts ...ClientOption) (*GetAPIBundleUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIBundleUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiBundleUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/bundle",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIBundleUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIBundleUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiBundleUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPICustomFieldValuesUsingGET gets an API s custom field values
*/
func (a *Client) GetAPICustomFieldValuesUsingGET(params *GetAPICustomFieldValuesUsingGETParams, opts ...ClientOption) (*GetAPICustomFieldValuesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPICustomFieldValuesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiCustomFieldValuesUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/custom-fields",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPICustomFieldValuesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPICustomFieldValuesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiCustomFieldValuesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIUsage returns the usage of an API

Return the api group usage, direct and indirect application usage. If the api uuid does not exist, return 0 for all of the 3 usages.
*/
func (a *Client) GetAPIUsage(params *GetAPIUsageParams, opts ...ClientOption) (*GetAPIUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiUsage",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/usage",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApis10 lists all a p is in API portal based on the filter parameters

List all APIs in API Portal based on the filter parameters. You can get the APIs with additional data such as Name, Description, Type, portalStatus, ssgUrl, accessStatus(visibility), specFilename, version, Service Type, publishedByPortal, tags, etc.
*/
func (a *Client) GetApis10(params *GetApis10Params, opts ...ClientOption) (*GetApis10OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApis10Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApis1.0",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/apis",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApis10Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApis10OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApis1.0: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssetFileUsingGET downloads the asset file linked to the API
*/
func (a *Client) GetAssetFileUsingGET(params *GetAssetFileUsingGETParams, opts ...ClientOption) (*GetAssetFileUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetFileUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAssetFileUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/assets/{uuid}/file",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssetFileUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetFileUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAssetFileUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssociatedAPIOrgRLQ gets all organization and rate quota Api per org associated with an API

Fetches all Organization and Rate Quota(Api per Org) associated with an API.
*/
func (a *Client) GetAssociatedAPIOrgRLQ(params *GetAssociatedAPIOrgRLQParams, opts ...ClientOption) (*GetAssociatedAPIOrgRLQOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssociatedAPIOrgRLQParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAssociatedApiOrgRLQ",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/org-rate-quotas",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssociatedAPIOrgRLQReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssociatedAPIOrgRLQOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAssociatedApiOrgRLQ: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssociatedAPITags gets all tags associated with an API

Fetches all tags associated with an API.
*/
func (a *Client) GetAssociatedAPITags(params *GetAssociatedAPITagsParams, opts ...ClientOption) (*GetAssociatedAPITagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssociatedAPITagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAssociatedApiTags",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/tags",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssociatedAPITagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssociatedAPITagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAssociatedApiTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPolicyTemplates returns a list of all policy templates

Returns a list of all Policy Templates.

	Policy templates allow you to create simple policies for the API such as authentication details. Policy Templates are required to publish an API.
*/
func (a *Client) GetPolicyTemplates(params *GetPolicyTemplatesParams, opts ...ClientOption) (*GetPolicyTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPolicyTemplates",
		Method:             "GET",
		PathPattern:        "/policyTemplates",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPolicyTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPolicyTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSwaggerWithContentUsingGET gets an API s swagger

If this is a REST API, its swagger asset will be returned.
*/
func (a *Client) GetSwaggerWithContentUsingGET(params *GetSwaggerWithContentUsingGETParams, opts ...ClientOption) (*GetSwaggerWithContentUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSwaggerWithContentUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSwaggerWithContentUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/assets/swagger",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSwaggerWithContentUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSwaggerWithContentUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSwaggerWithContentUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWsdlWithContentUsingGET gets an API s w s d l

If this is a SOAP API, its WSDL asset will be returned.
*/
func (a *Client) GetWsdlWithContentUsingGET(params *GetWsdlWithContentUsingGETParams, opts ...ClientOption) (*GetWsdlWithContentUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWsdlWithContentUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWsdlWithContentUsingGET",
		Method:             "GET",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/assets/wsdl",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWsdlWithContentUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWsdlWithContentUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWsdlWithContentUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PostAPIAssetUsingPOST manages the assets for an API

	Manage the assets for an API by uploading a file in a multipart form request. This API can also be optionally used to delete an asset by providing 'filesToDelete' with its data being the UUID of the asset although unnecessary. A REST API can have an optionally specified WADL, or Swagger JSON file. A SOAP API must have a WSDL specified for it as well as any optional XSDs.

**This API call does not work from the API Explorer and we recommended to test it via cURL.** When using cURL, use the following option to specify the file(s) to upload based on their extension and type:
+ XML: ```-F 'files=@apidoc.xml;type=text/xml'```
+ WSDL: ```-F 'files=@apidoc.wsdl;type=application/octet-stream'```
+ XSD: ```-F 'files=@apidoc.xsd;type=application/x-xsd+xml'```
+ JSON: ```-F 'files=@apidoc.json;type=application/json'```
+ WADL: ```-F 'files=@apidoc.wadl;type=application/vnd.sun.wadl+xml'```.
*/
func (a *Client) PostAPIAssetUsingPOST(params *PostAPIAssetUsingPOSTParams, opts ...ClientOption) (*PostAPIAssetUsingPOSTNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIAssetUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postApiAssetUsingPOST",
		Method:             "POST",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/assets",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIAssetUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIAssetUsingPOSTNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postApiAssetUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PublishAPIUsingPUT publishes an API

Publish an API changing its state from INCOMPLETE to ENABLED. To publish an API it needs any required Custom Field values, at least one Policy Entity and if it's a SOAP API it needs a WSDL asset.
*/
func (a *Client) PublishAPIUsingPUT(params *PublishAPIUsingPUTParams, opts ...ClientOption) (*PublishAPIUsingPUTNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublishAPIUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "publishApiUsingPUT",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/publish",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublishAPIUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PublishAPIUsingPUTNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for publishApiUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveAPICustomFieldValueUsingPUT saves an API s custom field values

Save an API's custom field values. Only required custom fields are required. The required values for a custom field are its customFieldUuid and value.
*/
func (a *Client) SaveAPICustomFieldValueUsingPUT(params *SaveAPICustomFieldValueUsingPUTParams, opts ...ClientOption) (*SaveAPICustomFieldValueUsingPUTNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveAPICustomFieldValueUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveApiCustomFieldValueUsingPUT",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/custom-fields",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SaveAPICustomFieldValueUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveAPICustomFieldValueUsingPUTNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveApiCustomFieldValueUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveUsingPUT saves an API policy entities

Save an API Policy entities. At least one Policy Entity must be provided. A Policy Entity's required fields are policyEntityUuid and any required policyTemplateArguments. A Policy Template Argument needs to have a name and value specified.
*/
func (a *Client) SaveUsingPUT(params *SaveUsingPUTParams, opts ...ClientOption) (*SaveUsingPUTNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveUsingPUT",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}/policy-entities",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SaveUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveUsingPUTNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUsingPUT updates an API

Update the main API details. The required fields are name, apiServiceType (REST or SOAP), version, apiEulaUuid, accessStatus (PUBLIC or PRIVATE), ssgUrl (relative API URI that is part the API proxy URL. For Gateway-published APIs, the value gets set as part of the sync, as defined by the Service Resolution Path in the service.), authenticationType (NONE, OAUTH2 or API_KEY), authenticationParameters , managingOrgUuid and locationUrl (hosted location URL of API). Optional parameters are description and privateDescription.
*/
func (a *Client) UpdateUsingPUT(params *UpdateUsingPUTParams, opts ...ClientOption) (*UpdateUsingPUTNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/api-management/1.0/apis/{apiUuid}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPUTNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
