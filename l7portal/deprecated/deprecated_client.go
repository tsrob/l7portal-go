// Code generated by go-swagger; DO NOT EDIT.

package deprecated

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new deprecated API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deprecated API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAccountPlan(params *CreateAccountPlanParams, opts ...ClientOption) (*CreateAccountPlanCreated, error)

	CreateAPIEula(params *CreateAPIEulaParams, opts ...ClientOption) (*CreateAPIEulaCreated, error)

	CreateApplication(params *CreateApplicationParams, opts ...ClientOption) (*CreateApplicationCreated, error)

	CreateTags(params *CreateTagsParams, opts ...ClientOption) (*CreateTagsCreated, error)

	DeleteAccountPlan(params *DeleteAccountPlanParams, opts ...ClientOption) error

	DeleteAPIEulas(params *DeleteAPIEulasParams, opts ...ClientOption) error

	DeleteApplication(params *DeleteApplicationParams, opts ...ClientOption) error

	GetAccountPlan(params *GetAccountPlanParams, opts ...ClientOption) (*GetAccountPlanOK, error)

	GetAccountPlans(params *GetAccountPlansParams, opts ...ClientOption) (*GetAccountPlansOK, error)

	GetAPIEula(params *GetAPIEulaParams, opts ...ClientOption) (*GetAPIEulaOK, error)

	GetAPIEulas(params *GetAPIEulasParams, opts ...ClientOption) (*GetAPIEulasOK, error)

	GetApplication(params *GetApplicationParams, opts ...ClientOption) (*GetApplicationOK, error)

	GetPages(params *GetPagesParams, opts ...ClientOption) (*GetPagesOK, error)

	GetTags(params *GetTagsParams, opts ...ClientOption) (*GetTagsOK, error)

	PostPages(params *PostPagesParams, opts ...ClientOption) (*PostPagesNoContent, error)

	UpdateAccountPlan(params *UpdateAccountPlanParams, opts ...ClientOption) error

	UpdateAPIEulas(params *UpdateAPIEulasParams, opts ...ClientOption) error

	UpdateApplication(params *UpdateApplicationParams, opts ...ClientOption) (*UpdateApplicationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAccountPlan creates an account plan

Create a new Account Plan that API publishers can use to limit the total usage of all applications and APIs under an organization. Enter a unique name and a public description for the plan. Quota information and rate limit are optional and are applied per proxy. Referencing an API UUID in the payload will result in a thrown exception.
*/
func (a *Client) CreateAccountPlan(params *CreateAccountPlanParams, opts ...ClientOption) (*CreateAccountPlanCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAccountPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAccountPlan",
		Method:             "POST",
		PathPattern:        "/AccountPlans",
		ProducesMediaTypes: []string{"text/plain;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAccountPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAccountPlanCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAccountPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAPIEula creates an API eula

Create a specific End-User Licence Agreement that can be applied to APIs.
*/
func (a *Client) CreateAPIEula(params *CreateAPIEulaParams, opts ...ClientOption) (*CreateAPIEulaCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAPIEulaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createApiEula",
		Method:             "POST",
		PathPattern:        "/ApiEulas",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAPIEulaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAPIEulaCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createApiEula: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateApplication creates an application

Creates an Application. All users except Developers can add applications to the API Portal. After you add an application, if no API key, secret and/or MAG master key is supplied, the API Proxy generates a unique API key, shared secret, and/or MAG master key for the application. Later, the developers must add the API key to the application so that the application can use the APIs. If the application uses OAuth, the developers must also add the shared secret to the application.
*/
func (a *Client) CreateApplication(params *CreateApplicationParams, opts ...ClientOption) (*CreateApplicationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateApplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createApplication",
		Method:             "POST",
		PathPattern:        "/Applications",
		ProducesMediaTypes: []string{"text/plain;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateApplicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateApplicationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createApplication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTags creates tags

Creates one or more tags
*/
func (a *Client) CreateTags(params *CreateTagsParams, opts ...ClientOption) (*CreateTagsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTags",
		Method:             "POST",
		PathPattern:        "/tags",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTagsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAccountPlan deletes an existing account plan

Delete an existing account plan. If the account plan is used by an organization then it cannot be deleted.
*/
func (a *Client) DeleteAccountPlan(params *DeleteAccountPlanParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAccountPlan",
		Method:             "DELETE",
		PathPattern:        "/AccountPlans('{uuid}')",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccountPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
DeleteAPIEulas deletes an existing API e u l a

Delete an existing API EULA. If API EULA is used by an API then it cannot be deleted.
*/
func (a *Client) DeleteAPIEulas(params *DeleteAPIEulasParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIEulasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteApiEulas",
		Method:             "DELETE",
		PathPattern:        "/ApiEulas('{uuid}')",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIEulasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
DeleteApplication deletes a specific application

Delete a specific Application.
*/
func (a *Client) DeleteApplication(params *DeleteApplicationParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteApplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteApplication",
		Method:             "DELETE",
		PathPattern:        "/Applications('{uuid}')",
		ProducesMediaTypes: []string{"text/plain;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteApplicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetAccountPlan returns a specific account plan

Returns a specific Account Plan.
*/
func (a *Client) GetAccountPlan(params *GetAccountPlanParams, opts ...ClientOption) (*GetAccountPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccountPlan",
		Method:             "GET",
		PathPattern:        "/AccountPlans('{uuid}')",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAccountPlans returns a list of all account plans

	Returns a list of all Account Plans.

All organizations should have an account plan. You can use an account plan to give organizations access to private APIs in addition to all the public APIs. You can also use an account plan to limit the number of times an organization's applications can hit your APIs per proxy. An organization cannot exceed the limits regardless of how the hits are divided among the organization's applications and your APIs per proxy. An account plan can have a quota, a rate limit, both, or neither. The quota specifies the maximum number of hits per day or month per proxy. The rate limit specifies the maximum number of hits per second. For example, a basic account plan could limit an organization to 1,000 hits per day per proxy and one hit per second. A premium account plan could have unlimited hits per day per proxy and 100 hits per second.
*/
func (a *Client) GetAccountPlans(params *GetAccountPlansParams, opts ...ClientOption) (*GetAccountPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountPlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccountPlans",
		Method:             "GET",
		PathPattern:        "/AccountPlans",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountPlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountPlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountPlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIEula gets a specific end user licence agreement that can be applied to a p is

Get a specific End-User Licence Agreement that can be applied to APIs.
*/
func (a *Client) GetAPIEula(params *GetAPIEulaParams, opts ...ClientOption) (*GetAPIEulaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIEulaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiEula",
		Method:             "GET",
		PathPattern:        "/ApiEulas('{uuid}')",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIEulaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIEulaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiEula: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIEulas lists all end user licence agreements that can be applied to a p is

List all End-User Licence Agreements that can be applied to APIs. In the API Portal, when Organization Administrators add an API to their organization, they must agree to the EULA. All APIs published on the API Portal need an API EULA. So, before Administrators can add an API, an Administrator or API Owner must add a EULA to the API Portal. If the API Portal does not have the correct API EULA, an Administrator or API Owner must add the EULA. Alternatively, they can edit an API EULA that is not assigned to an API that is associated with an organization.
*/
func (a *Client) GetAPIEulas(params *GetAPIEulasParams, opts ...ClientOption) (*GetAPIEulasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIEulasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiEulas",
		Method:             "GET",
		PathPattern:        "/ApiEulas",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIEulasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIEulasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiEulas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApplication returns a single application

Returns a single Application.
*/
func (a *Client) GetApplication(params *GetApplicationParams, opts ...ClientOption) (*GetApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplication",
		Method:             "GET",
		PathPattern:        "/Applications('{uuid}')",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPages returns all custom pages

Return all custom page assignments.
*/
func (a *Client) GetPages(params *GetPagesParams, opts ...ClientOption) (*GetPagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPages",
		Method:             "GET",
		PathPattern:        "/custom/1.0/pages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTags gets all tags

Fetches the list of tags.
*/
func (a *Client) GetTags(params *GetTagsParams, opts ...ClientOption) (*GetTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTags",
		Method:             "GET",
		PathPattern:        "/tags",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPages updates custom page assignments

Updates page assignments. Create, update, and delete custom page assignments based on the supplied payload.
*/
func (a *Client) PostPages(params *PostPagesParams, opts ...ClientOption) (*PostPagesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postPages",
		Method:             "POST",
		PathPattern:        "/custom/1.0/pages/assign",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPagesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postPages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAccountPlan updates a specific account plan

Update a specific Account Plan. If updating an existing Account Plan with APIs associated, please ensure the old API uuids associated with the Account Plan are referenced or an exception will be thrown.
*/
func (a *Client) UpdateAccountPlan(params *UpdateAccountPlanParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAccountPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAccountPlan",
		Method:             "PUT",
		PathPattern:        "/AccountPlans('{uuid}')",
		ProducesMediaTypes: []string{"text/plain;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAccountPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UpdateAPIEulas updates an existing API e u l a

Update an existing API EULA.
*/
func (a *Client) UpdateAPIEulas(params *UpdateAPIEulasParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAPIEulasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateApiEulas",
		Method:             "PUT",
		PathPattern:        "/ApiEulas('{uuid}')",
		ProducesMediaTypes: []string{"text/plain;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAPIEulasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UpdateApplication updates an application

Update a specific Application. Note: Cannot update ApiKey, you must create a new key instead.
*/
func (a *Client) UpdateApplication(params *UpdateApplicationParams, opts ...ClientOption) (*UpdateApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateApplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateApplication",
		Method:             "PUT",
		PathPattern:        "/Applications('{uuid}')",
		ProducesMediaTypes: []string{"text/plain;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateApplicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateApplicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateApplication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
