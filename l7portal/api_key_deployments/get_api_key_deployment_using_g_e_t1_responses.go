// Code generated by go-swagger; DO NOT EDIT.

package api_key_deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tsrob/l7portal-go/models"
)

// GetAPIKeyDeploymentUsingGET1Reader is a Reader for the GetAPIKeyDeploymentUsingGET1 structure.
type GetAPIKeyDeploymentUsingGET1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAPIKeyDeploymentUsingGET1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAPIKeyDeploymentUsingGET1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAPIKeyDeploymentUsingGET1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAPIKeyDeploymentUsingGET1NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAPIKeyDeploymentUsingGET1OK creates a GetAPIKeyDeploymentUsingGET1OK with default headers values
func NewGetAPIKeyDeploymentUsingGET1OK() *GetAPIKeyDeploymentUsingGET1OK {
	return &GetAPIKeyDeploymentUsingGET1OK{}
}

/*
GetAPIKeyDeploymentUsingGET1OK describes a response with status code 200, with default header values.

Success
*/
type GetAPIKeyDeploymentUsingGET1OK struct {
	Payload *models.APIKeyDeploymentDto
}

// IsSuccess returns true when this get Api key deployment using g e t1 o k response has a 2xx status code
func (o *GetAPIKeyDeploymentUsingGET1OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get Api key deployment using g e t1 o k response has a 3xx status code
func (o *GetAPIKeyDeploymentUsingGET1OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api key deployment using g e t1 o k response has a 4xx status code
func (o *GetAPIKeyDeploymentUsingGET1OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Api key deployment using g e t1 o k response has a 5xx status code
func (o *GetAPIKeyDeploymentUsingGET1OK) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api key deployment using g e t1 o k response a status code equal to that given
func (o *GetAPIKeyDeploymentUsingGET1OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get Api key deployment using g e t1 o k response
func (o *GetAPIKeyDeploymentUsingGET1OK) Code() int {
	return 200
}

func (o *GetAPIKeyDeploymentUsingGET1OK) Error() string {
	return fmt.Sprintf("[GET /deployments/1.0/api-keys/{apiKey}/proxies/{proxyUuid}][%d] getApiKeyDeploymentUsingGET1OK  %+v", 200, o.Payload)
}

func (o *GetAPIKeyDeploymentUsingGET1OK) String() string {
	return fmt.Sprintf("[GET /deployments/1.0/api-keys/{apiKey}/proxies/{proxyUuid}][%d] getApiKeyDeploymentUsingGET1OK  %+v", 200, o.Payload)
}

func (o *GetAPIKeyDeploymentUsingGET1OK) GetPayload() *models.APIKeyDeploymentDto {
	return o.Payload
}

func (o *GetAPIKeyDeploymentUsingGET1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIKeyDeploymentDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIKeyDeploymentUsingGET1BadRequest creates a GetAPIKeyDeploymentUsingGET1BadRequest with default headers values
func NewGetAPIKeyDeploymentUsingGET1BadRequest() *GetAPIKeyDeploymentUsingGET1BadRequest {
	return &GetAPIKeyDeploymentUsingGET1BadRequest{}
}

/*
GetAPIKeyDeploymentUsingGET1BadRequest describes a response with status code 400, with default header values.

Bad request due to a validation error.
*/
type GetAPIKeyDeploymentUsingGET1BadRequest struct {
}

// IsSuccess returns true when this get Api key deployment using g e t1 bad request response has a 2xx status code
func (o *GetAPIKeyDeploymentUsingGET1BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api key deployment using g e t1 bad request response has a 3xx status code
func (o *GetAPIKeyDeploymentUsingGET1BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api key deployment using g e t1 bad request response has a 4xx status code
func (o *GetAPIKeyDeploymentUsingGET1BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api key deployment using g e t1 bad request response has a 5xx status code
func (o *GetAPIKeyDeploymentUsingGET1BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api key deployment using g e t1 bad request response a status code equal to that given
func (o *GetAPIKeyDeploymentUsingGET1BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get Api key deployment using g e t1 bad request response
func (o *GetAPIKeyDeploymentUsingGET1BadRequest) Code() int {
	return 400
}

func (o *GetAPIKeyDeploymentUsingGET1BadRequest) Error() string {
	return fmt.Sprintf("[GET /deployments/1.0/api-keys/{apiKey}/proxies/{proxyUuid}][%d] getApiKeyDeploymentUsingGET1BadRequest ", 400)
}

func (o *GetAPIKeyDeploymentUsingGET1BadRequest) String() string {
	return fmt.Sprintf("[GET /deployments/1.0/api-keys/{apiKey}/proxies/{proxyUuid}][%d] getApiKeyDeploymentUsingGET1BadRequest ", 400)
}

func (o *GetAPIKeyDeploymentUsingGET1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAPIKeyDeploymentUsingGET1NotFound creates a GetAPIKeyDeploymentUsingGET1NotFound with default headers values
func NewGetAPIKeyDeploymentUsingGET1NotFound() *GetAPIKeyDeploymentUsingGET1NotFound {
	return &GetAPIKeyDeploymentUsingGET1NotFound{}
}

/*
GetAPIKeyDeploymentUsingGET1NotFound describes a response with status code 404, with default header values.

Entity not found
*/
type GetAPIKeyDeploymentUsingGET1NotFound struct {
}

// IsSuccess returns true when this get Api key deployment using g e t1 not found response has a 2xx status code
func (o *GetAPIKeyDeploymentUsingGET1NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api key deployment using g e t1 not found response has a 3xx status code
func (o *GetAPIKeyDeploymentUsingGET1NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api key deployment using g e t1 not found response has a 4xx status code
func (o *GetAPIKeyDeploymentUsingGET1NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api key deployment using g e t1 not found response has a 5xx status code
func (o *GetAPIKeyDeploymentUsingGET1NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api key deployment using g e t1 not found response a status code equal to that given
func (o *GetAPIKeyDeploymentUsingGET1NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get Api key deployment using g e t1 not found response
func (o *GetAPIKeyDeploymentUsingGET1NotFound) Code() int {
	return 404
}

func (o *GetAPIKeyDeploymentUsingGET1NotFound) Error() string {
	return fmt.Sprintf("[GET /deployments/1.0/api-keys/{apiKey}/proxies/{proxyUuid}][%d] getApiKeyDeploymentUsingGET1NotFound ", 404)
}

func (o *GetAPIKeyDeploymentUsingGET1NotFound) String() string {
	return fmt.Sprintf("[GET /deployments/1.0/api-keys/{apiKey}/proxies/{proxyUuid}][%d] getApiKeyDeploymentUsingGET1NotFound ", 404)
}

func (o *GetAPIKeyDeploymentUsingGET1NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
