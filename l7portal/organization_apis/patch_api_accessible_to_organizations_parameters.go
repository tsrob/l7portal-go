// Code generated by go-swagger; DO NOT EDIT.

package organization_apis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPatchAPIAccessibleToOrganizationsParams creates a new PatchAPIAccessibleToOrganizationsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchAPIAccessibleToOrganizationsParams() *PatchAPIAccessibleToOrganizationsParams {
	return &PatchAPIAccessibleToOrganizationsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchAPIAccessibleToOrganizationsParamsWithTimeout creates a new PatchAPIAccessibleToOrganizationsParams object
// with the ability to set a timeout on a request.
func NewPatchAPIAccessibleToOrganizationsParamsWithTimeout(timeout time.Duration) *PatchAPIAccessibleToOrganizationsParams {
	return &PatchAPIAccessibleToOrganizationsParams{
		timeout: timeout,
	}
}

// NewPatchAPIAccessibleToOrganizationsParamsWithContext creates a new PatchAPIAccessibleToOrganizationsParams object
// with the ability to set a context for a request.
func NewPatchAPIAccessibleToOrganizationsParamsWithContext(ctx context.Context) *PatchAPIAccessibleToOrganizationsParams {
	return &PatchAPIAccessibleToOrganizationsParams{
		Context: ctx,
	}
}

// NewPatchAPIAccessibleToOrganizationsParamsWithHTTPClient creates a new PatchAPIAccessibleToOrganizationsParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchAPIAccessibleToOrganizationsParamsWithHTTPClient(client *http.Client) *PatchAPIAccessibleToOrganizationsParams {
	return &PatchAPIAccessibleToOrganizationsParams{
		HTTPClient: client,
	}
}

/*
PatchAPIAccessibleToOrganizationsParams contains all the parameters to send to the API endpoint

	for the patch Api accessible to organizations operation.

	Typically these are written to a http.Request.
*/
type PatchAPIAccessibleToOrganizationsParams struct {

	/* Action.

	   Use the value 'add' to add Apis to be associated with Organization and value 'remove' to remove Apis association from organization. When no value provided, defaults to 'add'.
	*/
	Action *string

	/* APIUuids.

	   apiUuids
	*/
	APIUuids []string

	/* OrgUUID.

	   orgUuid
	*/
	OrgUUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch Api accessible to organizations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchAPIAccessibleToOrganizationsParams) WithDefaults() *PatchAPIAccessibleToOrganizationsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch Api accessible to organizations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchAPIAccessibleToOrganizationsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the patch Api accessible to organizations params
func (o *PatchAPIAccessibleToOrganizationsParams) WithTimeout(timeout time.Duration) *PatchAPIAccessibleToOrganizationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch Api accessible to organizations params
func (o *PatchAPIAccessibleToOrganizationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch Api accessible to organizations params
func (o *PatchAPIAccessibleToOrganizationsParams) WithContext(ctx context.Context) *PatchAPIAccessibleToOrganizationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch Api accessible to organizations params
func (o *PatchAPIAccessibleToOrganizationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch Api accessible to organizations params
func (o *PatchAPIAccessibleToOrganizationsParams) WithHTTPClient(client *http.Client) *PatchAPIAccessibleToOrganizationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch Api accessible to organizations params
func (o *PatchAPIAccessibleToOrganizationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the patch Api accessible to organizations params
func (o *PatchAPIAccessibleToOrganizationsParams) WithAction(action *string) *PatchAPIAccessibleToOrganizationsParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the patch Api accessible to organizations params
func (o *PatchAPIAccessibleToOrganizationsParams) SetAction(action *string) {
	o.Action = action
}

// WithAPIUuids adds the aPIUuids to the patch Api accessible to organizations params
func (o *PatchAPIAccessibleToOrganizationsParams) WithAPIUuids(aPIUuids []string) *PatchAPIAccessibleToOrganizationsParams {
	o.SetAPIUuids(aPIUuids)
	return o
}

// SetAPIUuids adds the apiUuids to the patch Api accessible to organizations params
func (o *PatchAPIAccessibleToOrganizationsParams) SetAPIUuids(aPIUuids []string) {
	o.APIUuids = aPIUuids
}

// WithOrgUUID adds the orgUUID to the patch Api accessible to organizations params
func (o *PatchAPIAccessibleToOrganizationsParams) WithOrgUUID(orgUUID string) *PatchAPIAccessibleToOrganizationsParams {
	o.SetOrgUUID(orgUUID)
	return o
}

// SetOrgUUID adds the orgUuid to the patch Api accessible to organizations params
func (o *PatchAPIAccessibleToOrganizationsParams) SetOrgUUID(orgUUID string) {
	o.OrgUUID = orgUUID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchAPIAccessibleToOrganizationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Action != nil {

		// query param action
		var qrAction string

		if o.Action != nil {
			qrAction = *o.Action
		}
		qAction := qrAction
		if qAction != "" {

			if err := r.SetQueryParam("action", qAction); err != nil {
				return err
			}
		}
	}
	if o.APIUuids != nil {
		if err := r.SetBodyParam(o.APIUuids); err != nil {
			return err
		}
	}

	// path param orgUuid
	if err := r.SetPathParam("orgUuid", o.OrgUUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
