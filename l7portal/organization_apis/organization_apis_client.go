// Code generated by go-swagger; DO NOT EDIT.

package organization_apis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new organization apis API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organization apis API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GETAPIAccessibleToOrganizations(params *GETAPIAccessibleToOrganizationsParams, opts ...ClientOption) (*GETAPIAccessibleToOrganizationsOK, error)

	PUTAPIAccessibleToOrganizations(params *PUTAPIAccessibleToOrganizationsParams, opts ...ClientOption) (*PUTAPIAccessibleToOrganizationsNoContent, error)

	PatchAPIAccessibleToOrganizations(params *PatchAPIAccessibleToOrganizationsParams, opts ...ClientOption) (*PatchAPIAccessibleToOrganizationsNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GETAPIAccessibleToOrganizations returns a list of private a p is that are accessible to the specified organization

Returns a list of private APIs that are accessible to the specified organization. This list includes APIs that are managed by this organization as well as private APIs of other organizations that this organization has been granted access to.
*/
func (a *Client) GETAPIAccessibleToOrganizations(params *GETAPIAccessibleToOrganizationsParams, opts ...ClientOption) (*GETAPIAccessibleToOrganizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETAPIAccessibleToOrganizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GETApiAccessibleToOrganizations",
		Method:             "GET",
		PathPattern:        "/tenant-admin/1.0/organizations/{orgUuid}/apis",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETAPIAccessibleToOrganizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETAPIAccessibleToOrganizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GETApiAccessibleToOrganizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PUTAPIAccessibleToOrganizations updates the list of private a p is that are accessible to an organization

Updates the list of private APIs that are accessible to the specified organization. This list can include all the Private APIs of other organizations for which the specified organization needs access to and this list must also include all APIs that are managed by this organization. (NOTE: We cannot remove the APIs that are currently managed by the specified organization and these APIs list should always be included in the request.)
*/
func (a *Client) PUTAPIAccessibleToOrganizations(params *PUTAPIAccessibleToOrganizationsParams, opts ...ClientOption) (*PUTAPIAccessibleToOrganizationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTAPIAccessibleToOrganizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PUTApiAccessibleToOrganizations",
		Method:             "PUT",
		PathPattern:        "/tenant-admin/1.0/organizations/{orgUuid}/apis",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTAPIAccessibleToOrganizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PUTAPIAccessibleToOrganizationsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PUTApiAccessibleToOrganizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchAPIAccessibleToOrganizations updates the list of private a p is that are accessible to an organization

Updates the list of private APIs that are accessible to an organization to either include or remove the specified APIs as dictated by a provided action query parameter.
*/
func (a *Client) PatchAPIAccessibleToOrganizations(params *PatchAPIAccessibleToOrganizationsParams, opts ...ClientOption) (*PatchAPIAccessibleToOrganizationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIAccessibleToOrganizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchApiAccessibleToOrganizations",
		Method:             "PATCH",
		PathPattern:        "/tenant-admin/1.0/organizations/{orgUuid}/apis",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIAccessibleToOrganizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIAccessibleToOrganizationsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchApiAccessibleToOrganizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
