// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// API A representation of an API
//
// swagger:model Api
type API struct {
	APIBasic

	// The number of applications that consume this API.
	ApplicationUsage int64 `json:"ApplicationUsage,omitempty"`

	// The escaped JSON string containing the values to be pre-populated in the API Explorer Authentication side-bar
	AuthenticationParameters string `json:"AuthenticationParameters,omitempty"`

	// custom field values
	CustomFieldValues *APIAO1CustomFieldValues `json:"CustomFieldValues,omitempty"`

	// Description of the API. Developers see only the public description. Ensure that the public description includes any information that developers require to use the API, such as its authentication requirements.
	// Max Length: 65000
	Description string `json:"Description,omitempty"`

	// Indicates that the version of this API on the portal and on the gateway are the same.
	InSync int64 `json:"InSync,omitempty"`

	// The number of organizations that have applications that consume this API.
	OrganizationUsage int64 `json:"OrganizationUsage,omitempty"`

	// Indicates that the version of this API on the portal has been recently changed and has not yet synced with the version on the gateway yet.
	Pending int64 `json:"Pending,omitempty"`

	// Additional fields that are part of the Policy Template. The default fields are debugMode, email, sla, smtpServer and sslEnabled
	// Unique: true
	PolicyTemplateArguments []string `json:"PolicyTemplateArguments"`

	// Indicates the status of the API. Applications that use an enabled API can still use the API when it is deprecated. However, you cannot add a deprecated API to an application. It sets the PortalStatus to ENABLED when created for the first time.
	// Enum: [ENABLED DISABLED DEPRECATED]
	PortalStatus string `json:"PortalStatus,omitempty"`

	// The API statuses that you can switch to.
	// Unique: true
	PossibleStatuses []string `json:"PossibleStatuses"`

	// The private description of the API.
	// Max Length: 65000
	PrivateDescription string `json:"PrivateDescription,omitempty"`

	// Indicates whether the API was published via the portal (true) or the gateway (false).
	PublishedByPortal bool `json:"PublishedByPortal,omitempty"`

	// Indicates that the version of this API on the portal and the gateway were modified independently and cannot be synced in their current state.
	ServiceDisruption int64 `json:"ServiceDisruption,omitempty"`

	// Specifies the type of the specification file (ie Swagger, WADL, Json). The API needs a specification file so that developers can use the API Explorer to understand the API. If SpecContent is specified, SpecFilename should be specified as well.
	SpecContent string `json:"SpecContent,omitempty"`

	// Specifies the filename of the Swagger or WADL file that documents the API. If SpecFilename is specified, SpecContent should be specified as well.
	SpecFilename string `json:"SpecFilename,omitempty"`

	// The size of the specification file in bytes (1048576)
	SpecFilesize int64 `json:"SpecFilesize,omitempty"`

	// Indicates the type of the API.
	// Enum: [REST SOAP]
	SsgServiceType string `json:"SsgServiceType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *API) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 APIBasic
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.APIBasic = aO0

	// AO1
	var dataAO1 struct {
		ApplicationUsage int64 `json:"ApplicationUsage,omitempty"`

		AuthenticationParameters string `json:"AuthenticationParameters,omitempty"`

		CustomFieldValues *APIAO1CustomFieldValues `json:"CustomFieldValues,omitempty"`

		Description string `json:"Description,omitempty"`

		InSync int64 `json:"InSync,omitempty"`

		OrganizationUsage int64 `json:"OrganizationUsage,omitempty"`

		Pending int64 `json:"Pending,omitempty"`

		PolicyTemplateArguments []string `json:"PolicyTemplateArguments"`

		PortalStatus string `json:"PortalStatus,omitempty"`

		PossibleStatuses []string `json:"PossibleStatuses"`

		PrivateDescription string `json:"PrivateDescription,omitempty"`

		PublishedByPortal bool `json:"PublishedByPortal,omitempty"`

		ServiceDisruption int64 `json:"ServiceDisruption,omitempty"`

		SpecContent string `json:"SpecContent,omitempty"`

		SpecFilename string `json:"SpecFilename,omitempty"`

		SpecFilesize int64 `json:"SpecFilesize,omitempty"`

		SsgServiceType string `json:"SsgServiceType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ApplicationUsage = dataAO1.ApplicationUsage

	m.AuthenticationParameters = dataAO1.AuthenticationParameters

	m.CustomFieldValues = dataAO1.CustomFieldValues

	m.Description = dataAO1.Description

	m.InSync = dataAO1.InSync

	m.OrganizationUsage = dataAO1.OrganizationUsage

	m.Pending = dataAO1.Pending

	m.PolicyTemplateArguments = dataAO1.PolicyTemplateArguments

	m.PortalStatus = dataAO1.PortalStatus

	m.PossibleStatuses = dataAO1.PossibleStatuses

	m.PrivateDescription = dataAO1.PrivateDescription

	m.PublishedByPortal = dataAO1.PublishedByPortal

	m.ServiceDisruption = dataAO1.ServiceDisruption

	m.SpecContent = dataAO1.SpecContent

	m.SpecFilename = dataAO1.SpecFilename

	m.SpecFilesize = dataAO1.SpecFilesize

	m.SsgServiceType = dataAO1.SsgServiceType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m API) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.APIBasic)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ApplicationUsage int64 `json:"ApplicationUsage,omitempty"`

		AuthenticationParameters string `json:"AuthenticationParameters,omitempty"`

		CustomFieldValues *APIAO1CustomFieldValues `json:"CustomFieldValues,omitempty"`

		Description string `json:"Description,omitempty"`

		InSync int64 `json:"InSync,omitempty"`

		OrganizationUsage int64 `json:"OrganizationUsage,omitempty"`

		Pending int64 `json:"Pending,omitempty"`

		PolicyTemplateArguments []string `json:"PolicyTemplateArguments"`

		PortalStatus string `json:"PortalStatus,omitempty"`

		PossibleStatuses []string `json:"PossibleStatuses"`

		PrivateDescription string `json:"PrivateDescription,omitempty"`

		PublishedByPortal bool `json:"PublishedByPortal,omitempty"`

		ServiceDisruption int64 `json:"ServiceDisruption,omitempty"`

		SpecContent string `json:"SpecContent,omitempty"`

		SpecFilename string `json:"SpecFilename,omitempty"`

		SpecFilesize int64 `json:"SpecFilesize,omitempty"`

		SsgServiceType string `json:"SsgServiceType,omitempty"`
	}

	dataAO1.ApplicationUsage = m.ApplicationUsage

	dataAO1.AuthenticationParameters = m.AuthenticationParameters

	dataAO1.CustomFieldValues = m.CustomFieldValues

	dataAO1.Description = m.Description

	dataAO1.InSync = m.InSync

	dataAO1.OrganizationUsage = m.OrganizationUsage

	dataAO1.Pending = m.Pending

	dataAO1.PolicyTemplateArguments = m.PolicyTemplateArguments

	dataAO1.PortalStatus = m.PortalStatus

	dataAO1.PossibleStatuses = m.PossibleStatuses

	dataAO1.PrivateDescription = m.PrivateDescription

	dataAO1.PublishedByPortal = m.PublishedByPortal

	dataAO1.ServiceDisruption = m.ServiceDisruption

	dataAO1.SpecContent = m.SpecContent

	dataAO1.SpecFilename = m.SpecFilename

	dataAO1.SpecFilesize = m.SpecFilesize

	dataAO1.SsgServiceType = m.SsgServiceType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this Api
func (m *API) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with APIBasic
	if err := m.APIBasic.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomFieldValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyTemplateArguments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortalStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePossibleStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSsgServiceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *API) validateCustomFieldValues(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomFieldValues) { // not required
		return nil
	}

	if m.CustomFieldValues != nil {
		if err := m.CustomFieldValues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CustomFieldValues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CustomFieldValues")
			}
			return err
		}
	}

	return nil
}

func (m *API) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("Description", "body", m.Description, 65000); err != nil {
		return err
	}

	return nil
}

func (m *API) validatePolicyTemplateArguments(formats strfmt.Registry) error {

	if swag.IsZero(m.PolicyTemplateArguments) { // not required
		return nil
	}

	if err := validate.UniqueItems("PolicyTemplateArguments", "body", m.PolicyTemplateArguments); err != nil {
		return err
	}

	return nil
}

var apiTypePortalStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED","DEPRECATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiTypePortalStatusPropEnum = append(apiTypePortalStatusPropEnum, v)
	}
}

// property enum
func (m *API) validatePortalStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiTypePortalStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *API) validatePortalStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.PortalStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validatePortalStatusEnum("PortalStatus", "body", m.PortalStatus); err != nil {
		return err
	}

	return nil
}

var apiPossibleStatusesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DISABLED","DEPRECATED","ENABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiPossibleStatusesItemsEnum = append(apiPossibleStatusesItemsEnum, v)
	}
}

func (m *API) validatePossibleStatusesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiPossibleStatusesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *API) validatePossibleStatuses(formats strfmt.Registry) error {

	if swag.IsZero(m.PossibleStatuses) { // not required
		return nil
	}

	if err := validate.UniqueItems("PossibleStatuses", "body", m.PossibleStatuses); err != nil {
		return err
	}

	for i := 0; i < len(m.PossibleStatuses); i++ {

		// value enum
		if err := m.validatePossibleStatusesItemsEnum("PossibleStatuses"+"."+strconv.Itoa(i), "body", m.PossibleStatuses[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *API) validatePrivateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateDescription) { // not required
		return nil
	}

	if err := validate.MaxLength("PrivateDescription", "body", m.PrivateDescription, 65000); err != nil {
		return err
	}

	return nil
}

var apiTypeSsgServiceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REST","SOAP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiTypeSsgServiceTypePropEnum = append(apiTypeSsgServiceTypePropEnum, v)
	}
}

// property enum
func (m *API) validateSsgServiceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiTypeSsgServiceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *API) validateSsgServiceType(formats strfmt.Registry) error {

	if swag.IsZero(m.SsgServiceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSsgServiceTypeEnum("SsgServiceType", "body", m.SsgServiceType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this Api based on the context it is used
func (m *API) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with APIBasic
	if err := m.APIBasic.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomFieldValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *API) contextValidateCustomFieldValues(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomFieldValues != nil {
		if err := m.CustomFieldValues.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CustomFieldValues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CustomFieldValues")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *API) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *API) UnmarshalBinary(b []byte) error {
	var res API
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// APIAO1CustomFieldValues Custom Fields add additional metadata to the API. If a Custom Field is required, you must put a value in it when creating or changing an API.
//
// swagger:model APIAO1CustomFieldValues
type APIAO1CustomFieldValues struct {

	// results
	Results []*CustomFieldValue `json:"results"`
}

// Validate validates this API a o1 custom field values
func (m *APIAO1CustomFieldValues) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIAO1CustomFieldValues) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CustomFieldValues" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CustomFieldValues" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this API a o1 custom field values based on the context it is used
func (m *APIAO1CustomFieldValues) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIAO1CustomFieldValues) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Results); i++ {

		if m.Results[i] != nil {
			if err := m.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CustomFieldValues" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CustomFieldValues" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIAO1CustomFieldValues) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIAO1CustomFieldValues) UnmarshalBinary(b []byte) error {
	var res APIAO1CustomFieldValues
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
