// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Proxy proxy
//
// swagger:model proxy
type Proxy struct {

	// The deployment type for the proxy.
	// Required: true
	// Enum: [CONNECTED NOT_CONNECTED]
	ConnectionStatus *string `json:"connectionStatus"`

	// The deployment type for the proxy.
	// Required: true
	// Enum: [AUTOMATIC ON_DEMAND MANUAL]
	DeploymentType *string `json:"deploymentType"`

	// The current enrollment status.
	// Required: true
	EnrollmentStatus *string `json:"enrollmentStatus"`

	// The enrollment URL for the proxy, only available if proxy is in status PENDING.
	EnrollmentURL string `json:"enrollmentUrl,omitempty"`

	// The name of the proxy.
	// Required: true
	Name *string `json:"name"`

	// The UUID of the proxy.
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this proxy
func (m *Proxy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnrollmentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var proxyTypeConnectionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONNECTED","NOT_CONNECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		proxyTypeConnectionStatusPropEnum = append(proxyTypeConnectionStatusPropEnum, v)
	}
}

const (

	// ProxyConnectionStatusCONNECTED captures enum value "CONNECTED"
	ProxyConnectionStatusCONNECTED string = "CONNECTED"

	// ProxyConnectionStatusNOTCONNECTED captures enum value "NOT_CONNECTED"
	ProxyConnectionStatusNOTCONNECTED string = "NOT_CONNECTED"
)

// prop value enum
func (m *Proxy) validateConnectionStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, proxyTypeConnectionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Proxy) validateConnectionStatus(formats strfmt.Registry) error {

	if err := validate.Required("connectionStatus", "body", m.ConnectionStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateConnectionStatusEnum("connectionStatus", "body", *m.ConnectionStatus); err != nil {
		return err
	}

	return nil
}

var proxyTypeDeploymentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTOMATIC","ON_DEMAND","MANUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		proxyTypeDeploymentTypePropEnum = append(proxyTypeDeploymentTypePropEnum, v)
	}
}

const (

	// ProxyDeploymentTypeAUTOMATIC captures enum value "AUTOMATIC"
	ProxyDeploymentTypeAUTOMATIC string = "AUTOMATIC"

	// ProxyDeploymentTypeONDEMAND captures enum value "ON_DEMAND"
	ProxyDeploymentTypeONDEMAND string = "ON_DEMAND"

	// ProxyDeploymentTypeMANUAL captures enum value "MANUAL"
	ProxyDeploymentTypeMANUAL string = "MANUAL"
)

// prop value enum
func (m *Proxy) validateDeploymentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, proxyTypeDeploymentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Proxy) validateDeploymentType(formats strfmt.Registry) error {

	if err := validate.Required("deploymentType", "body", m.DeploymentType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDeploymentTypeEnum("deploymentType", "body", *m.DeploymentType); err != nil {
		return err
	}

	return nil
}

func (m *Proxy) validateEnrollmentStatus(formats strfmt.Registry) error {

	if err := validate.Required("enrollmentStatus", "body", m.EnrollmentStatus); err != nil {
		return err
	}

	return nil
}

func (m *Proxy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this proxy based on context it is used
func (m *Proxy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Proxy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Proxy) UnmarshalBinary(b []byte) error {
	var res Proxy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
