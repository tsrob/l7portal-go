// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Request request
//
// swagger:model Request
type Request struct {

	// Provides Administrators and API Owners with the ability to accept or reject a Developer Request
	// Enum: [ACCEPT REJECT]
	Action string `json:"action,omitempty"`

	// The name of the entity that the request relates to, can be Application name or User email.
	EntityName string `json:"entityName,omitempty"`

	// The uuid of the resource that the Developer Request is being made for. For Registration Requests, this identifies an Organization Admin User that will have been created as part of the request process. For an Application Request this identifies an Application that will have been created as part of the request process.  In both cases the associated resource cannot be used until the Developer Request has been approved. For Registration Requests the requesting user will also need to complete the registration process.
	EntityUUID string `json:"entityUuid,omitempty"`

	// The name of the associated organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// The Uuid of the associated organization.
	OrganizationUUID string `json:"organizationUuid,omitempty"`

	// Applicable for Application Requests that are created when a developer makes changes to an existing application.  This JSON formatted attribute provides a full representation of the Application with the proposed changes. The changes are only applied to the Application if the Developer Request is approved
	Payload string `json:"payload,omitempty"`

	// Applicable for Application Requests that are created when a developer makes changes to an existing application.  Identifies the last know state of the application before the changes were made
	PreviousState string `json:"previousState,omitempty"`

	// Provides an explanation as to why a request was rejected.
	Reason string `json:"reason,omitempty"`

	// The current status of the request.
	// Enum: [PENDING ACCEPTED REJECTED REJECT_CONFIRMED]
	RequestStatus string `json:"requestStatus,omitempty"`

	// One of the request subtype if applicable.
	// Enum: [ADD UPDATE REMOVE CREATE DELETE APP_STATUS_CHANGE]
	RequestSubtype string `json:"requestSubtype,omitempty"`

	// The type of registration request.
	// Enum: [REGISTRATION APPLICATION]
	RequestType string `json:"requestType,omitempty"`

	// The UUID of the request.
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this request
func (m *Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestSubtype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var requestTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACCEPT","REJECT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestTypeActionPropEnum = append(requestTypeActionPropEnum, v)
	}
}

const (

	// RequestActionACCEPT captures enum value "ACCEPT"
	RequestActionACCEPT string = "ACCEPT"

	// RequestActionREJECT captures enum value "REJECT"
	RequestActionREJECT string = "REJECT"
)

// prop value enum
func (m *Request) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, requestTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Request) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

var requestTypeRequestStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING","ACCEPTED","REJECTED","REJECT_CONFIRMED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestTypeRequestStatusPropEnum = append(requestTypeRequestStatusPropEnum, v)
	}
}

const (

	// RequestRequestStatusPENDING captures enum value "PENDING"
	RequestRequestStatusPENDING string = "PENDING"

	// RequestRequestStatusACCEPTED captures enum value "ACCEPTED"
	RequestRequestStatusACCEPTED string = "ACCEPTED"

	// RequestRequestStatusREJECTED captures enum value "REJECTED"
	RequestRequestStatusREJECTED string = "REJECTED"

	// RequestRequestStatusREJECTCONFIRMED captures enum value "REJECT_CONFIRMED"
	RequestRequestStatusREJECTCONFIRMED string = "REJECT_CONFIRMED"
)

// prop value enum
func (m *Request) validateRequestStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, requestTypeRequestStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Request) validateRequestStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestStatusEnum("requestStatus", "body", m.RequestStatus); err != nil {
		return err
	}

	return nil
}

var requestTypeRequestSubtypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ADD","UPDATE","REMOVE","CREATE","DELETE","APP_STATUS_CHANGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestTypeRequestSubtypePropEnum = append(requestTypeRequestSubtypePropEnum, v)
	}
}

const (

	// RequestRequestSubtypeADD captures enum value "ADD"
	RequestRequestSubtypeADD string = "ADD"

	// RequestRequestSubtypeUPDATE captures enum value "UPDATE"
	RequestRequestSubtypeUPDATE string = "UPDATE"

	// RequestRequestSubtypeREMOVE captures enum value "REMOVE"
	RequestRequestSubtypeREMOVE string = "REMOVE"

	// RequestRequestSubtypeCREATE captures enum value "CREATE"
	RequestRequestSubtypeCREATE string = "CREATE"

	// RequestRequestSubtypeDELETE captures enum value "DELETE"
	RequestRequestSubtypeDELETE string = "DELETE"

	// RequestRequestSubtypeAPPSTATUSCHANGE captures enum value "APP_STATUS_CHANGE"
	RequestRequestSubtypeAPPSTATUSCHANGE string = "APP_STATUS_CHANGE"
)

// prop value enum
func (m *Request) validateRequestSubtypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, requestTypeRequestSubtypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Request) validateRequestSubtype(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestSubtype) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestSubtypeEnum("requestSubtype", "body", m.RequestSubtype); err != nil {
		return err
	}

	return nil
}

var requestTypeRequestTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REGISTRATION","APPLICATION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestTypeRequestTypePropEnum = append(requestTypeRequestTypePropEnum, v)
	}
}

const (

	// RequestRequestTypeREGISTRATION captures enum value "REGISTRATION"
	RequestRequestTypeREGISTRATION string = "REGISTRATION"

	// RequestRequestTypeAPPLICATION captures enum value "APPLICATION"
	RequestRequestTypeAPPLICATION string = "APPLICATION"
)

// prop value enum
func (m *Request) validateRequestTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, requestTypeRequestTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Request) validateRequestType(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestTypeEnum("requestType", "body", m.RequestType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this request based on context it is used
func (m *Request) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Request) UnmarshalBinary(b []byte) error {
	var res Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
