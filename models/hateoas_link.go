// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HateoasLink A HateoasLink consists of a link title and an href.  The link title describes what the href link refers to - for example - a link_title of 'self' will include an href to a link that can be used to reference the requested object, essentially it is a requested object's reference to itself
//
// swagger:model HateoasLink
type HateoasLink struct {

	// first page
	FirstPage *HateoasLinkFirstPage `json:"firstPage,omitempty"`

	// last page
	LastPage *HateoasLinkLastPage `json:"lastPage,omitempty"`

	// prev page
	PrevPage *HateoasLinkPrevPage `json:"prevPage,omitempty"`

	// self
	Self *HateoasLinkSelf `json:"self,omitempty"`
}

// Validate validates this hateoas link
func (m *HateoasLink) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstPage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastPage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrevPage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HateoasLink) validateFirstPage(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstPage) { // not required
		return nil
	}

	if m.FirstPage != nil {
		if err := m.FirstPage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firstPage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firstPage")
			}
			return err
		}
	}

	return nil
}

func (m *HateoasLink) validateLastPage(formats strfmt.Registry) error {
	if swag.IsZero(m.LastPage) { // not required
		return nil
	}

	if m.LastPage != nil {
		if err := m.LastPage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPage")
			}
			return err
		}
	}

	return nil
}

func (m *HateoasLink) validatePrevPage(formats strfmt.Registry) error {
	if swag.IsZero(m.PrevPage) { // not required
		return nil
	}

	if m.PrevPage != nil {
		if err := m.PrevPage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prevPage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prevPage")
			}
			return err
		}
	}

	return nil
}

func (m *HateoasLink) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hateoas link based on the context it is used
func (m *HateoasLink) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFirstPage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastPage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrevPage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HateoasLink) contextValidateFirstPage(ctx context.Context, formats strfmt.Registry) error {

	if m.FirstPage != nil {
		if err := m.FirstPage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firstPage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firstPage")
			}
			return err
		}
	}

	return nil
}

func (m *HateoasLink) contextValidateLastPage(ctx context.Context, formats strfmt.Registry) error {

	if m.LastPage != nil {
		if err := m.LastPage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPage")
			}
			return err
		}
	}

	return nil
}

func (m *HateoasLink) contextValidatePrevPage(ctx context.Context, formats strfmt.Registry) error {

	if m.PrevPage != nil {
		if err := m.PrevPage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prevPage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prevPage")
			}
			return err
		}
	}

	return nil
}

func (m *HateoasLink) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HateoasLink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HateoasLink) UnmarshalBinary(b []byte) error {
	var res HateoasLink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HateoasLinkFirstPage hateoas link first page
//
// swagger:model HateoasLinkFirstPage
type HateoasLinkFirstPage struct {

	// The link that can be used to access the first page in the list of items
	Href string `json:"href,omitempty"`
}

// Validate validates this hateoas link first page
func (m *HateoasLinkFirstPage) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this hateoas link first page based on context it is used
func (m *HateoasLinkFirstPage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HateoasLinkFirstPage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HateoasLinkFirstPage) UnmarshalBinary(b []byte) error {
	var res HateoasLinkFirstPage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HateoasLinkLastPage hateoas link last page
//
// swagger:model HateoasLinkLastPage
type HateoasLinkLastPage struct {

	// The link that can be used to access the last page in the list of items
	Href string `json:"href,omitempty"`
}

// Validate validates this hateoas link last page
func (m *HateoasLinkLastPage) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this hateoas link last page based on context it is used
func (m *HateoasLinkLastPage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HateoasLinkLastPage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HateoasLinkLastPage) UnmarshalBinary(b []byte) error {
	var res HateoasLinkLastPage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HateoasLinkPrevPage hateoas link prev page
//
// swagger:model HateoasLinkPrevPage
type HateoasLinkPrevPage struct {

	// The link that can be used to access the previous page from the current page when viewing a list of items
	Href string `json:"href,omitempty"`
}

// Validate validates this hateoas link prev page
func (m *HateoasLinkPrevPage) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this hateoas link prev page based on context it is used
func (m *HateoasLinkPrevPage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HateoasLinkPrevPage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HateoasLinkPrevPage) UnmarshalBinary(b []byte) error {
	var res HateoasLinkPrevPage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HateoasLinkSelf hateoas link self
//
// swagger:model HateoasLinkSelf
type HateoasLinkSelf struct {

	// The link that can be used to access the current item in view
	Href string `json:"href,omitempty"`
}

// Validate validates this hateoas link self
func (m *HateoasLinkSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this hateoas link self based on context it is used
func (m *HateoasLinkSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HateoasLinkSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HateoasLinkSelf) UnmarshalBinary(b []byte) error {
	var res HateoasLinkSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
