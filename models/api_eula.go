// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIEula Api eula
//
// swagger:model ApiEula
type APIEula struct {
	APIEulaBasic

	// The number of APIs that have this End-User Licence Agreement applied to them.
	APIUsage int64 `json:"ApiUsage,omitempty"`

	// The number of Applications that are affected by this End-User Licence Agreement through the APIs they access.
	ApplicationUsage int64 `json:"ApplicationUsage,omitempty"`

	// A list of actions that the logged-in user may perform on the EULA. A EULA cannot be edited if an associated API is being used by an application. A EULA cannot be deleted if it is associated with an API.
	// Enum: [DELETE EDIT]
	PossibleActions string `json:"PossibleActions,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *APIEula) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 APIEulaBasic
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.APIEulaBasic = aO0

	// AO1
	var dataAO1 struct {
		APIUsage int64 `json:"ApiUsage,omitempty"`

		ApplicationUsage int64 `json:"ApplicationUsage,omitempty"`

		PossibleActions string `json:"PossibleActions,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.APIUsage = dataAO1.APIUsage

	m.ApplicationUsage = dataAO1.ApplicationUsage

	m.PossibleActions = dataAO1.PossibleActions

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m APIEula) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.APIEulaBasic)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		APIUsage int64 `json:"ApiUsage,omitempty"`

		ApplicationUsage int64 `json:"ApplicationUsage,omitempty"`

		PossibleActions string `json:"PossibleActions,omitempty"`
	}

	dataAO1.APIUsage = m.APIUsage

	dataAO1.ApplicationUsage = m.ApplicationUsage

	dataAO1.PossibleActions = m.PossibleActions

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this Api eula
func (m *APIEula) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with APIEulaBasic
	if err := m.APIEulaBasic.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePossibleActions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var apiEulaTypePossibleActionsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DELETE","EDIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiEulaTypePossibleActionsPropEnum = append(apiEulaTypePossibleActionsPropEnum, v)
	}
}

// property enum
func (m *APIEula) validatePossibleActionsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiEulaTypePossibleActionsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIEula) validatePossibleActions(formats strfmt.Registry) error {

	if swag.IsZero(m.PossibleActions) { // not required
		return nil
	}

	// value enum
	if err := m.validatePossibleActionsEnum("PossibleActions", "body", m.PossibleActions); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this Api eula based on the context it is used
func (m *APIEula) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with APIEulaBasic
	if err := m.APIEulaBasic.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *APIEula) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIEula) UnmarshalBinary(b []byte) error {
	var res APIEula
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
