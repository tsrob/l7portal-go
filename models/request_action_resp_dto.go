// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestActionRespDto request action resp dto
//
// swagger:model RequestActionRespDto
type RequestActionRespDto struct {

	// The error message if the action returns an error, otherwise null.
	ErrorResponse interface{} `json:"errorResponse,omitempty"`

	// False if the request is processed without any errors, otherwise True.
	HasErrors bool `json:"hasErrors,omitempty"`

	// One of the request subtypes if applicable
	// Enum: [ADD UPDATE REMOVE CREATE DELETE APP_STATUS_CHANGE]
	RequestSubtype string `json:"requestSubtype,omitempty"`

	// request type
	RequestType AppRequestType `json:"requestType,omitempty"`

	// The request entity UUID.
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this request action resp dto
func (m *RequestActionRespDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRequestSubtype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var requestActionRespDtoTypeRequestSubtypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ADD","UPDATE","REMOVE","CREATE","DELETE","APP_STATUS_CHANGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestActionRespDtoTypeRequestSubtypePropEnum = append(requestActionRespDtoTypeRequestSubtypePropEnum, v)
	}
}

const (

	// RequestActionRespDtoRequestSubtypeADD captures enum value "ADD"
	RequestActionRespDtoRequestSubtypeADD string = "ADD"

	// RequestActionRespDtoRequestSubtypeUPDATE captures enum value "UPDATE"
	RequestActionRespDtoRequestSubtypeUPDATE string = "UPDATE"

	// RequestActionRespDtoRequestSubtypeREMOVE captures enum value "REMOVE"
	RequestActionRespDtoRequestSubtypeREMOVE string = "REMOVE"

	// RequestActionRespDtoRequestSubtypeCREATE captures enum value "CREATE"
	RequestActionRespDtoRequestSubtypeCREATE string = "CREATE"

	// RequestActionRespDtoRequestSubtypeDELETE captures enum value "DELETE"
	RequestActionRespDtoRequestSubtypeDELETE string = "DELETE"

	// RequestActionRespDtoRequestSubtypeAPPSTATUSCHANGE captures enum value "APP_STATUS_CHANGE"
	RequestActionRespDtoRequestSubtypeAPPSTATUSCHANGE string = "APP_STATUS_CHANGE"
)

// prop value enum
func (m *RequestActionRespDto) validateRequestSubtypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, requestActionRespDtoTypeRequestSubtypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RequestActionRespDto) validateRequestSubtype(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestSubtype) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestSubtypeEnum("requestSubtype", "body", m.RequestSubtype); err != nil {
		return err
	}

	return nil
}

func (m *RequestActionRespDto) validateRequestType(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestType) { // not required
		return nil
	}

	if err := m.RequestType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requestType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("requestType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this request action resp dto based on the context it is used
func (m *RequestActionRespDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRequestType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestActionRespDto) contextValidateRequestType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RequestType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requestType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("requestType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RequestActionRespDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestActionRespDto) UnmarshalBinary(b []byte) error {
	var res RequestActionRespDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
