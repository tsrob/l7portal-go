// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ThemePut theme put
//
// swagger:model ThemePut
type ThemePut struct {
	ThemeBasic

	// images
	Images *ThemePutAO1Images `json:"images,omitempty"`

	// typography
	Typography *ThemePutAO1Typography `json:"typography,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ThemePut) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ThemeBasic
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ThemeBasic = aO0

	// AO1
	var dataAO1 struct {
		Images *ThemePutAO1Images `json:"images,omitempty"`

		Typography *ThemePutAO1Typography `json:"typography,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Images = dataAO1.Images

	m.Typography = dataAO1.Typography

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ThemePut) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ThemeBasic)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Images *ThemePutAO1Images `json:"images,omitempty"`

		Typography *ThemePutAO1Typography `json:"typography,omitempty"`
	}

	dataAO1.Images = m.Images

	dataAO1.Typography = m.Typography

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this theme put
func (m *ThemePut) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ThemeBasic
	if err := m.ThemeBasic.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypography(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThemePut) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	if m.Images != nil {
		if err := m.Images.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("images")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("images")
			}
			return err
		}
	}

	return nil
}

func (m *ThemePut) validateTypography(formats strfmt.Registry) error {

	if swag.IsZero(m.Typography) { // not required
		return nil
	}

	if m.Typography != nil {
		if err := m.Typography.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("typography")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("typography")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this theme put based on the context it is used
func (m *ThemePut) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ThemeBasic
	if err := m.ThemeBasic.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypography(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThemePut) contextValidateImages(ctx context.Context, formats strfmt.Registry) error {

	if m.Images != nil {
		if err := m.Images.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("images")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("images")
			}
			return err
		}
	}

	return nil
}

func (m *ThemePut) contextValidateTypography(ctx context.Context, formats strfmt.Registry) error {

	if m.Typography != nil {
		if err := m.Typography.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("typography")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("typography")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThemePut) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThemePut) UnmarshalBinary(b []byte) error {
	var res ThemePut
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ThemePutAO1Images theme put a o1 images
//
// swagger:model ThemePutAO1Images
type ThemePutAO1Images struct {

	// base64Uri encoded file. Null if not uploading
	BackgroundFooter string `json:"backgroundFooter,omitempty"`

	// base64Uri encoded file. Null if not uploading
	BackgroundHeader string `json:"backgroundHeader,omitempty"`
}

// Validate validates this theme put a o1 images
func (m *ThemePutAO1Images) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this theme put a o1 images based on context it is used
func (m *ThemePutAO1Images) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ThemePutAO1Images) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThemePutAO1Images) UnmarshalBinary(b []byte) error {
	var res ThemePutAO1Images
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ThemePutAO1Typography theme put a o1 typography
//
// swagger:model ThemePutAO1Typography
type ThemePutAO1Typography struct {

	// custom
	Custom []*ThemeFontPutDto `json:"custom"`
}

// Validate validates this theme put a o1 typography
func (m *ThemePutAO1Typography) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThemePutAO1Typography) validateCustom(formats strfmt.Registry) error {
	if swag.IsZero(m.Custom) { // not required
		return nil
	}

	for i := 0; i < len(m.Custom); i++ {
		if swag.IsZero(m.Custom[i]) { // not required
			continue
		}

		if m.Custom[i] != nil {
			if err := m.Custom[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("typography" + "." + "custom" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("typography" + "." + "custom" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this theme put a o1 typography based on the context it is used
func (m *ThemePutAO1Typography) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThemePutAO1Typography) contextValidateCustom(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Custom); i++ {

		if m.Custom[i] != nil {
			if err := m.Custom[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("typography" + "." + "custom" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("typography" + "." + "custom" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThemePutAO1Typography) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThemePutAO1Typography) UnmarshalBinary(b []byte) error {
	var res ThemePutAO1Typography
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
