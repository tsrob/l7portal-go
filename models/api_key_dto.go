// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIKeyDto Api key dto
// Example: {"apiKey":"l759c0e1641cc948919c8deb0226dc6a9d","applicationUuid":"3a6e04cb-e6f0-4889-aeb6-5d30aa352f49","createTs":1595539152716,"defaultKey":true,"keySecret":"f391e84968fb45a2ba0f1c05ff6d86ce","keySecretHashed":false,"modifyTs":1595540276742,"name":"Sherpa API Key","oauthCallbackUrl":"https://sherpas.layer7.saas.broadcom.com/oauth2-redirect.html","oauthScope":"OOB","oauthType":"CONFIDENTIAL","status":"ENABLED"}
//
// swagger:model ApiKeyDto
type APIKeyDto struct {

	// The unique identifier for this API key belonging to an Application. Developers can use the API key to access an API.
	// Max Length: 255
	APIKey string `json:"apiKey,omitempty"`

	// The UUID of the Application this key belongs to.
	// Required: true
	ApplicationUUID *string `json:"applicationUuid"`

	// Unix timestamp for when the API key was created.
	CreateTs int64 `json:"createTs,omitempty"`

	// Denotes if this key is the default API key. The default API key is the one with its key, secret and OAuth values managed via the parent Application. Updating a key as the default key or creating a new key as the default key will unset the other default key.
	DefaultKey bool `json:"defaultKey,omitempty"`

	// A key between the API key and it's containing API/APIs. Once added into an application, it cannot be changed.
	// Max Length: 255
	KeySecret string `json:"keySecret,omitempty"`

	// Denotes if this API key's secret is hashed or not. A hashed secret causes the keySecret to be masked with asterisks.
	KeySecretHashed bool `json:"keySecretHashed,omitempty"`

	// Unix timestamp for when the API key was last modified.
	ModifyTs int64 `json:"modifyTs,omitempty"`

	// Name of the API key which must be unique within the Application.
	// Required: true
	// Max Length: 255
	Name *string `json:"name"`

	// If you enter multiple callback URLs, separate them with commas.
	// Max Length: 255
	OauthCallbackURL string `json:"oauthCallbackUrl,omitempty"`

	// If you enter multiple scope values, separate them with spaces.
	// Max Length: 255
	OauthScope string `json:"oauthScope,omitempty"`

	// The OAuth 2.0 client type this API key conforms to. Set the type to Public or Confidential, depending on the OAuth requirements of the APIs.
	// Enum: [null public confidential]
	OauthType string `json:"oauthType,omitempty"`

	// Indicates whether the API key is currently active or not. A disabled API key cannot be used to access APIs.
	// Enum: [ENABLED DISABLED]
	Status string `json:"status,omitempty"`
}

// Validate validates this Api key dto
func (m *APIKeyDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeySecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOauthCallbackURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOauthScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOauthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIKeyDto) validateAPIKey(formats strfmt.Registry) error {
	if swag.IsZero(m.APIKey) { // not required
		return nil
	}

	if err := validate.MaxLength("apiKey", "body", m.APIKey, 255); err != nil {
		return err
	}

	return nil
}

func (m *APIKeyDto) validateApplicationUUID(formats strfmt.Registry) error {

	if err := validate.Required("applicationUuid", "body", m.ApplicationUUID); err != nil {
		return err
	}

	return nil
}

func (m *APIKeyDto) validateKeySecret(formats strfmt.Registry) error {
	if swag.IsZero(m.KeySecret) { // not required
		return nil
	}

	if err := validate.MaxLength("keySecret", "body", m.KeySecret, 255); err != nil {
		return err
	}

	return nil
}

func (m *APIKeyDto) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 255); err != nil {
		return err
	}

	return nil
}

func (m *APIKeyDto) validateOauthCallbackURL(formats strfmt.Registry) error {
	if swag.IsZero(m.OauthCallbackURL) { // not required
		return nil
	}

	if err := validate.MaxLength("oauthCallbackUrl", "body", m.OauthCallbackURL, 255); err != nil {
		return err
	}

	return nil
}

func (m *APIKeyDto) validateOauthScope(formats strfmt.Registry) error {
	if swag.IsZero(m.OauthScope) { // not required
		return nil
	}

	if err := validate.MaxLength("oauthScope", "body", m.OauthScope, 255); err != nil {
		return err
	}

	return nil
}

var apiKeyDtoTypeOauthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["null","public","confidential"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiKeyDtoTypeOauthTypePropEnum = append(apiKeyDtoTypeOauthTypePropEnum, v)
	}
}

const (

	// APIKeyDtoOauthTypeNull captures enum value "null"
	APIKeyDtoOauthTypeNull string = "null"

	// APIKeyDtoOauthTypePublic captures enum value "public"
	APIKeyDtoOauthTypePublic string = "public"

	// APIKeyDtoOauthTypeConfidential captures enum value "confidential"
	APIKeyDtoOauthTypeConfidential string = "confidential"
)

// prop value enum
func (m *APIKeyDto) validateOauthTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiKeyDtoTypeOauthTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIKeyDto) validateOauthType(formats strfmt.Registry) error {
	if swag.IsZero(m.OauthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOauthTypeEnum("oauthType", "body", m.OauthType); err != nil {
		return err
	}

	return nil
}

var apiKeyDtoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiKeyDtoTypeStatusPropEnum = append(apiKeyDtoTypeStatusPropEnum, v)
	}
}

const (

	// APIKeyDtoStatusENABLED captures enum value "ENABLED"
	APIKeyDtoStatusENABLED string = "ENABLED"

	// APIKeyDtoStatusDISABLED captures enum value "DISABLED"
	APIKeyDtoStatusDISABLED string = "DISABLED"
)

// prop value enum
func (m *APIKeyDto) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiKeyDtoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIKeyDto) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Api key dto based on context it is used
func (m *APIKeyDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIKeyDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIKeyDto) UnmarshalBinary(b []byte) error {
	var res APIKeyDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
