// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppRequestActionRespDto app request action resp dto
//
// swagger:model AppRequestActionRespDto
type AppRequestActionRespDto struct {

	// The action performed in this review.
	// Enum: [ACCPET REJECT]
	Action string `json:"action,omitempty"`

	// All the associated requests processing details.
	ActionResults []*RequestActionRespDto `json:"actionResults"`

	// The number of requests that have errors.
	ErrorCount int64 `json:"errorCount,omitempty"`

	// False if all the associated requests are processed without any errors, otherwise true.
	HasErrors bool `json:"hasErrors,omitempty"`

	// The application entity UUID.
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this app request action resp dto
func (m *AppRequestActionRespDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var appRequestActionRespDtoTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACCPET","REJECT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appRequestActionRespDtoTypeActionPropEnum = append(appRequestActionRespDtoTypeActionPropEnum, v)
	}
}

const (

	// AppRequestActionRespDtoActionACCPET captures enum value "ACCPET"
	AppRequestActionRespDtoActionACCPET string = "ACCPET"

	// AppRequestActionRespDtoActionREJECT captures enum value "REJECT"
	AppRequestActionRespDtoActionREJECT string = "REJECT"
)

// prop value enum
func (m *AppRequestActionRespDto) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, appRequestActionRespDtoTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AppRequestActionRespDto) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *AppRequestActionRespDto) validateActionResults(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionResults) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionResults); i++ {
		if swag.IsZero(m.ActionResults[i]) { // not required
			continue
		}

		if m.ActionResults[i] != nil {
			if err := m.ActionResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actionResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this app request action resp dto based on the context it is used
func (m *AppRequestActionRespDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActionResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppRequestActionRespDto) contextValidateActionResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ActionResults); i++ {

		if m.ActionResults[i] != nil {
			if err := m.ActionResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actionResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppRequestActionRespDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppRequestActionRespDto) UnmarshalBinary(b []byte) error {
	var res AppRequestActionRespDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
