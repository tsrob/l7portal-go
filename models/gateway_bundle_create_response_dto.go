// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GatewayBundleCreateResponseDto gateway bundle create response dto
//
// swagger:model GatewayBundleCreateResponseDto
type GatewayBundleCreateResponseDto struct {

	// links
	Links *GatewayBundleCreateResponseDtoLinks `json:"_links,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// group name
	GroupName string `json:"groupName,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this gateway bundle create response dto
func (m *GatewayBundleCreateResponseDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayBundleCreateResponseDto) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this gateway bundle create response dto based on the context it is used
func (m *GatewayBundleCreateResponseDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayBundleCreateResponseDto) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GatewayBundleCreateResponseDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayBundleCreateResponseDto) UnmarshalBinary(b []byte) error {
	var res GatewayBundleCreateResponseDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GatewayBundleCreateResponseDtoLinks gateway bundle create response dto links
//
// swagger:model GatewayBundleCreateResponseDtoLinks
type GatewayBundleCreateResponseDtoLinks struct {

	// assets
	Assets *GatewayBundleCreateResponseDtoLinksAssets `json:"assets,omitempty"`

	// self
	Self *GatewayBundleCreateResponseDtoLinksSelf `json:"self,omitempty"`
}

// Validate validates this gateway bundle create response dto links
func (m *GatewayBundleCreateResponseDtoLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayBundleCreateResponseDtoLinks) validateAssets(formats strfmt.Registry) error {
	if swag.IsZero(m.Assets) { // not required
		return nil
	}

	if m.Assets != nil {
		if err := m.Assets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "assets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "assets")
			}
			return err
		}
	}

	return nil
}

func (m *GatewayBundleCreateResponseDtoLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this gateway bundle create response dto links based on the context it is used
func (m *GatewayBundleCreateResponseDtoLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayBundleCreateResponseDtoLinks) contextValidateAssets(ctx context.Context, formats strfmt.Registry) error {

	if m.Assets != nil {
		if err := m.Assets.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "assets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "assets")
			}
			return err
		}
	}

	return nil
}

func (m *GatewayBundleCreateResponseDtoLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GatewayBundleCreateResponseDtoLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayBundleCreateResponseDtoLinks) UnmarshalBinary(b []byte) error {
	var res GatewayBundleCreateResponseDtoLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GatewayBundleCreateResponseDtoLinksAssets gateway bundle create response dto links assets
//
// swagger:model GatewayBundleCreateResponseDtoLinksAssets
type GatewayBundleCreateResponseDtoLinksAssets struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this gateway bundle create response dto links assets
func (m *GatewayBundleCreateResponseDtoLinksAssets) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this gateway bundle create response dto links assets based on context it is used
func (m *GatewayBundleCreateResponseDtoLinksAssets) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GatewayBundleCreateResponseDtoLinksAssets) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayBundleCreateResponseDtoLinksAssets) UnmarshalBinary(b []byte) error {
	var res GatewayBundleCreateResponseDtoLinksAssets
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GatewayBundleCreateResponseDtoLinksSelf gateway bundle create response dto links self
//
// swagger:model GatewayBundleCreateResponseDtoLinksSelf
type GatewayBundleCreateResponseDtoLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this gateway bundle create response dto links self
func (m *GatewayBundleCreateResponseDtoLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this gateway bundle create response dto links self based on context it is used
func (m *GatewayBundleCreateResponseDtoLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GatewayBundleCreateResponseDtoLinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayBundleCreateResponseDtoLinksSelf) UnmarshalBinary(b []byte) error {
	var res GatewayBundleCreateResponseDtoLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
