// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HateoasAuthenticatorLink A HateoasLink consists of a link title and an href.  The link title describes what the href link refers to - for example - a link_title of 'self' will include an href to a link that can be used to reference the requested object, essentially it is a requested object's reference to itself
//
// swagger:model HateoasAuthenticatorLink
type HateoasAuthenticatorLink struct {

	// next
	Next *HateoasAuthenticatorLinkNext `json:"next,omitempty"`

	// prev
	Prev *HateoasAuthenticatorLinkPrev `json:"prev,omitempty"`

	// self
	Self *HateoasAuthenticatorLinkSelf `json:"self,omitempty"`
}

// Validate validates this hateoas authenticator link
func (m *HateoasAuthenticatorLink) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrev(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HateoasAuthenticatorLink) validateNext(formats strfmt.Registry) error {
	if swag.IsZero(m.Next) { // not required
		return nil
	}

	if m.Next != nil {
		if err := m.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next")
			}
			return err
		}
	}

	return nil
}

func (m *HateoasAuthenticatorLink) validatePrev(formats strfmt.Registry) error {
	if swag.IsZero(m.Prev) { // not required
		return nil
	}

	if m.Prev != nil {
		if err := m.Prev.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prev")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prev")
			}
			return err
		}
	}

	return nil
}

func (m *HateoasAuthenticatorLink) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hateoas authenticator link based on the context it is used
func (m *HateoasAuthenticatorLink) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrev(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HateoasAuthenticatorLink) contextValidateNext(ctx context.Context, formats strfmt.Registry) error {

	if m.Next != nil {
		if err := m.Next.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next")
			}
			return err
		}
	}

	return nil
}

func (m *HateoasAuthenticatorLink) contextValidatePrev(ctx context.Context, formats strfmt.Registry) error {

	if m.Prev != nil {
		if err := m.Prev.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prev")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prev")
			}
			return err
		}
	}

	return nil
}

func (m *HateoasAuthenticatorLink) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HateoasAuthenticatorLink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HateoasAuthenticatorLink) UnmarshalBinary(b []byte) error {
	var res HateoasAuthenticatorLink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HateoasAuthenticatorLinkNext hateoas authenticator link next
//
// swagger:model HateoasAuthenticatorLinkNext
type HateoasAuthenticatorLinkNext struct {

	// The link that can be used to access the next page from the current page when viewing a list of items
	Href string `json:"href,omitempty"`
}

// Validate validates this hateoas authenticator link next
func (m *HateoasAuthenticatorLinkNext) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this hateoas authenticator link next based on context it is used
func (m *HateoasAuthenticatorLinkNext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HateoasAuthenticatorLinkNext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HateoasAuthenticatorLinkNext) UnmarshalBinary(b []byte) error {
	var res HateoasAuthenticatorLinkNext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HateoasAuthenticatorLinkPrev hateoas authenticator link prev
//
// swagger:model HateoasAuthenticatorLinkPrev
type HateoasAuthenticatorLinkPrev struct {

	// The link that can be used to access the previous page from the current page when viewing a list of items
	Href string `json:"href,omitempty"`
}

// Validate validates this hateoas authenticator link prev
func (m *HateoasAuthenticatorLinkPrev) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this hateoas authenticator link prev based on context it is used
func (m *HateoasAuthenticatorLinkPrev) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HateoasAuthenticatorLinkPrev) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HateoasAuthenticatorLinkPrev) UnmarshalBinary(b []byte) error {
	var res HateoasAuthenticatorLinkPrev
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HateoasAuthenticatorLinkSelf hateoas authenticator link self
//
// swagger:model HateoasAuthenticatorLinkSelf
type HateoasAuthenticatorLinkSelf struct {

	// The link that can be used to access the current item in view
	Href string `json:"href,omitempty"`
}

// Validate validates this hateoas authenticator link self
func (m *HateoasAuthenticatorLinkSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this hateoas authenticator link self based on context it is used
func (m *HateoasAuthenticatorLinkSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HateoasAuthenticatorLinkSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HateoasAuthenticatorLinkSelf) UnmarshalBinary(b []byte) error {
	var res HateoasAuthenticatorLinkSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
