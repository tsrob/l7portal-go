// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Organization A representation of an Organization
//
// swagger:model Organization
type Organization struct {
	OrganizationBasic

	// The number of Applications that are owned by this Organization.
	ApplicationUsage int64 `json:"ApplicationUsage,omitempty"`

	// The number of Private APIs that the account plan of the organization has.
	PrivateAPIUsage int64 `json:"PrivateApiUsage,omitempty"`

	// The number of Private APIs used by an Application in the Organization. If no private app is in use, then it is safe to change the account plan.
	PrivateAppUsage int64 `json:"PrivateAppUsage,omitempty"`

	// Indicates if the Organization is active. A disabled Organization cannot have new Users or Applications assigned to it.
	// Enum: [ENABLED DISABLED]
	Status string `json:"Status,omitempty"`

	// Indicates the type of the Organization. A Publisher Organization is designed for internal organizations that need to manage APIs or publish APIs by Org publisher user, in addition to being an org-bound consumer. A Consumer organization is only meant for external organizations to consume APIs.
	// Enum: [CONSUMER PUBLISHER]
	Type string `json:"Type,omitempty"`

	// The number of Users that are assigned to this Organization.
	UserUsage int64 `json:"UserUsage,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Organization) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 OrganizationBasic
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.OrganizationBasic = aO0

	// AO1
	var dataAO1 struct {
		ApplicationUsage int64 `json:"ApplicationUsage,omitempty"`

		PrivateAPIUsage int64 `json:"PrivateApiUsage,omitempty"`

		PrivateAppUsage int64 `json:"PrivateAppUsage,omitempty"`

		Status string `json:"Status,omitempty"`

		Type string `json:"Type,omitempty"`

		UserUsage int64 `json:"UserUsage,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ApplicationUsage = dataAO1.ApplicationUsage

	m.PrivateAPIUsage = dataAO1.PrivateAPIUsage

	m.PrivateAppUsage = dataAO1.PrivateAppUsage

	m.Status = dataAO1.Status

	m.Type = dataAO1.Type

	m.UserUsage = dataAO1.UserUsage

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Organization) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.OrganizationBasic)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ApplicationUsage int64 `json:"ApplicationUsage,omitempty"`

		PrivateAPIUsage int64 `json:"PrivateApiUsage,omitempty"`

		PrivateAppUsage int64 `json:"PrivateAppUsage,omitempty"`

		Status string `json:"Status,omitempty"`

		Type string `json:"Type,omitempty"`

		UserUsage int64 `json:"UserUsage,omitempty"`
	}

	dataAO1.ApplicationUsage = m.ApplicationUsage

	dataAO1.PrivateAPIUsage = m.PrivateAPIUsage

	dataAO1.PrivateAppUsage = m.PrivateAppUsage

	dataAO1.Status = m.Status

	dataAO1.Type = m.Type

	dataAO1.UserUsage = m.UserUsage

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this organization
func (m *Organization) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with OrganizationBasic
	if err := m.OrganizationBasic.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var organizationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		organizationTypeStatusPropEnum = append(organizationTypeStatusPropEnum, v)
	}
}

// property enum
func (m *Organization) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, organizationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Organization) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var organizationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONSUMER","PUBLISHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		organizationTypeTypePropEnum = append(organizationTypeTypePropEnum, v)
	}
}

// property enum
func (m *Organization) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, organizationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Organization) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this organization based on the context it is used
func (m *Organization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with OrganizationBasic
	if err := m.OrganizationBasic.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Organization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Organization) UnmarshalBinary(b []byte) error {
	var res Organization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
