// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountPlanRequest account plan request
//
// swagger:model AccountPlanRequest
type AccountPlanRequest struct {
	AccountPlanBasic

	// description
	// Max Length: 65000
	Description string `json:"Description,omitempty"`

	// The number of requests allowed per proxy for this Account Plan based on the interval specified via QuotaInterval. Specify this value as null if you do not want quota limiting thus allowing an unlimited number of requests per proxy.
	// Maximum: 2e+09
	// Minimum: 1
	Quota int64 `json:"Quota,omitempty"`

	// The interval for which the quota is applied per proxy and can only be either day or month. This value is required if one is also specified for Quota.
	// Enum: [DAY MONTH]
	QuotaInterval string `json:"QuotaInterval,omitempty"`

	// The number of requests per second this Account Plan will support. If this rate is surpassed, requests will be rejected with a 400 response and appropriate error message. Specify this value as null if you do not want rate limiting thus allowing an unlimited number of requests per second.
	// Maximum: 2e+09
	// Minimum: 1
	RateLimit int64 `json:"RateLimit,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AccountPlanRequest) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AccountPlanBasic
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AccountPlanBasic = aO0

	// AO1
	var dataAO1 struct {
		Description string `json:"Description,omitempty"`

		Quota int64 `json:"Quota,omitempty"`

		QuotaInterval string `json:"QuotaInterval,omitempty"`

		RateLimit int64 `json:"RateLimit,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Description = dataAO1.Description

	m.Quota = dataAO1.Quota

	m.QuotaInterval = dataAO1.QuotaInterval

	m.RateLimit = dataAO1.RateLimit

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AccountPlanRequest) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.AccountPlanBasic)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Description string `json:"Description,omitempty"`

		Quota int64 `json:"Quota,omitempty"`

		QuotaInterval string `json:"QuotaInterval,omitempty"`

		RateLimit int64 `json:"RateLimit,omitempty"`
	}

	dataAO1.Description = m.Description

	dataAO1.Quota = m.Quota

	dataAO1.QuotaInterval = m.QuotaInterval

	dataAO1.RateLimit = m.RateLimit

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this account plan request
func (m *AccountPlanRequest) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AccountPlanBasic
	if err := m.AccountPlanBasic.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuota(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotaInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountPlanRequest) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("Description", "body", m.Description, 65000); err != nil {
		return err
	}

	return nil
}

func (m *AccountPlanRequest) validateQuota(formats strfmt.Registry) error {

	if swag.IsZero(m.Quota) { // not required
		return nil
	}

	if err := validate.MinimumInt("Quota", "body", m.Quota, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("Quota", "body", m.Quota, 2e+09, false); err != nil {
		return err
	}

	return nil
}

var accountPlanRequestTypeQuotaIntervalPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DAY","MONTH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountPlanRequestTypeQuotaIntervalPropEnum = append(accountPlanRequestTypeQuotaIntervalPropEnum, v)
	}
}

// property enum
func (m *AccountPlanRequest) validateQuotaIntervalEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accountPlanRequestTypeQuotaIntervalPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AccountPlanRequest) validateQuotaInterval(formats strfmt.Registry) error {

	if swag.IsZero(m.QuotaInterval) { // not required
		return nil
	}

	// value enum
	if err := m.validateQuotaIntervalEnum("QuotaInterval", "body", m.QuotaInterval); err != nil {
		return err
	}

	return nil
}

func (m *AccountPlanRequest) validateRateLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.RateLimit) { // not required
		return nil
	}

	if err := validate.MinimumInt("RateLimit", "body", m.RateLimit, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("RateLimit", "body", m.RateLimit, 2e+09, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this account plan request based on the context it is used
func (m *AccountPlanRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AccountPlanBasic
	if err := m.AccountPlanBasic.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AccountPlanRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountPlanRequest) UnmarshalBinary(b []byte) error {
	var res AccountPlanRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
