// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIGet Api get
//
// swagger:model ApiGet
type APIGet struct {
	APIGetBasic

	// The escaped JSON string containing the values to be pre-populated in the API Explorer Authentication side-bar
	AuthenticationParameters string `json:"authenticationParameters,omitempty"`

	// Specifies the authentication type (for API Explorer usage).
	AuthenticationType string `json:"authenticationType,omitempty"`

	// The time that the api is created.
	CreateTs int64 `json:"createTs,omitempty"`

	// Custom Fields add additional metadata to the API. If a Custom Field is required, you must put a value in it when creating or changing an API.
	CustomFieldValues []*APIGetCustomFieldValuesItems0 `json:"customFieldValues"`

	// Application calls are forwarded to this url. The url must be valid.
	LocationURL string `json:"locationUrl,omitempty"`

	// The time that the api is last modified.
	ModifyTs int64 `json:"modifyTs,omitempty"`

	// policy entities
	PolicyEntities []*APIGetPolicyEntitiesItems0 `json:"policyEntities"`

	// Indicates the status of the API. Applications that use an enabled API can still use the API when it is deprecated. However, you cannot add a deprecated API to an application. It sets the PortalStatus to ENABLED when created for the first time.
	// Enum: [ENABLED DISABLED DEPRECATED]
	PortalStatus string `json:"portalStatus,omitempty"`

	// The API statuses that you can switch to.
	PossibleStatuses []string `json:"possibleStatuses"`

	// The private description of the API.
	// Max Length: 65000
	PrivateDescription string `json:"privateDescription,omitempty"`

	// Indicates whether the API was published via the portal (true) or the gateway (false).
	PublishedByPortal bool `json:"publishedByPortal,omitempty"`

	// The size of the specification file in bytes (1048576)
	SpecFilesize int64 `json:"specFilesize,omitempty"`

	// The proxy URL. Developers use this URL in their applications to send requests to the API. The SsgUrl must be unique. Only applies if the API is portal published. Once created, it cannot be changed. The proxy URL for Portal Published APIs does not require the / in the beginning and * at the end since those are created in the Gateway. For Gateway Published APIs, the / in the beginning and the * at the end is present in the proxy URL since the value gets set as part of the sync.
	SsgURL string `json:"ssgUrl,omitempty"`

	// The published version of the API. If not specified, it sets the Version to 1.0
	// Max Length: 50
	Version string `json:"version,omitempty"`

	LinksAPI
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *APIGet) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 APIGetBasic
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.APIGetBasic = aO0

	// AO1
	var dataAO1 struct {
		AuthenticationParameters string `json:"authenticationParameters,omitempty"`

		AuthenticationType string `json:"authenticationType,omitempty"`

		CreateTs int64 `json:"createTs,omitempty"`

		CustomFieldValues []*APIGetCustomFieldValuesItems0 `json:"customFieldValues"`

		LocationURL string `json:"locationUrl,omitempty"`

		ModifyTs int64 `json:"modifyTs,omitempty"`

		PolicyEntities []*APIGetPolicyEntitiesItems0 `json:"policyEntities"`

		PortalStatus string `json:"portalStatus,omitempty"`

		PossibleStatuses []string `json:"possibleStatuses"`

		PrivateDescription string `json:"privateDescription,omitempty"`

		PublishedByPortal bool `json:"publishedByPortal,omitempty"`

		SpecFilesize int64 `json:"specFilesize,omitempty"`

		SsgURL string `json:"ssgUrl,omitempty"`

		Version string `json:"version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AuthenticationParameters = dataAO1.AuthenticationParameters

	m.AuthenticationType = dataAO1.AuthenticationType

	m.CreateTs = dataAO1.CreateTs

	m.CustomFieldValues = dataAO1.CustomFieldValues

	m.LocationURL = dataAO1.LocationURL

	m.ModifyTs = dataAO1.ModifyTs

	m.PolicyEntities = dataAO1.PolicyEntities

	m.PortalStatus = dataAO1.PortalStatus

	m.PossibleStatuses = dataAO1.PossibleStatuses

	m.PrivateDescription = dataAO1.PrivateDescription

	m.PublishedByPortal = dataAO1.PublishedByPortal

	m.SpecFilesize = dataAO1.SpecFilesize

	m.SsgURL = dataAO1.SsgURL

	m.Version = dataAO1.Version

	// AO2
	var aO2 LinksAPI
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.LinksAPI = aO2

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m APIGet) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.APIGetBasic)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AuthenticationParameters string `json:"authenticationParameters,omitempty"`

		AuthenticationType string `json:"authenticationType,omitempty"`

		CreateTs int64 `json:"createTs,omitempty"`

		CustomFieldValues []*APIGetCustomFieldValuesItems0 `json:"customFieldValues"`

		LocationURL string `json:"locationUrl,omitempty"`

		ModifyTs int64 `json:"modifyTs,omitempty"`

		PolicyEntities []*APIGetPolicyEntitiesItems0 `json:"policyEntities"`

		PortalStatus string `json:"portalStatus,omitempty"`

		PossibleStatuses []string `json:"possibleStatuses"`

		PrivateDescription string `json:"privateDescription,omitempty"`

		PublishedByPortal bool `json:"publishedByPortal,omitempty"`

		SpecFilesize int64 `json:"specFilesize,omitempty"`

		SsgURL string `json:"ssgUrl,omitempty"`

		Version string `json:"version,omitempty"`
	}

	dataAO1.AuthenticationParameters = m.AuthenticationParameters

	dataAO1.AuthenticationType = m.AuthenticationType

	dataAO1.CreateTs = m.CreateTs

	dataAO1.CustomFieldValues = m.CustomFieldValues

	dataAO1.LocationURL = m.LocationURL

	dataAO1.ModifyTs = m.ModifyTs

	dataAO1.PolicyEntities = m.PolicyEntities

	dataAO1.PortalStatus = m.PortalStatus

	dataAO1.PossibleStatuses = m.PossibleStatuses

	dataAO1.PrivateDescription = m.PrivateDescription

	dataAO1.PublishedByPortal = m.PublishedByPortal

	dataAO1.SpecFilesize = m.SpecFilesize

	dataAO1.SsgURL = m.SsgURL

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	aO2, err := swag.WriteJSON(m.LinksAPI)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this Api get
func (m *APIGet) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with APIGetBasic
	if err := m.APIGetBasic.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomFieldValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortalStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePossibleStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with LinksAPI
	if err := m.LinksAPI.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIGet) validateCustomFieldValues(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomFieldValues) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomFieldValues); i++ {
		if swag.IsZero(m.CustomFieldValues[i]) { // not required
			continue
		}

		if m.CustomFieldValues[i] != nil {
			if err := m.CustomFieldValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customFieldValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customFieldValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIGet) validatePolicyEntities(formats strfmt.Registry) error {

	if swag.IsZero(m.PolicyEntities) { // not required
		return nil
	}

	for i := 0; i < len(m.PolicyEntities); i++ {
		if swag.IsZero(m.PolicyEntities[i]) { // not required
			continue
		}

		if m.PolicyEntities[i] != nil {
			if err := m.PolicyEntities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var apiGetTypePortalStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED","DEPRECATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiGetTypePortalStatusPropEnum = append(apiGetTypePortalStatusPropEnum, v)
	}
}

// property enum
func (m *APIGet) validatePortalStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiGetTypePortalStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIGet) validatePortalStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.PortalStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validatePortalStatusEnum("portalStatus", "body", m.PortalStatus); err != nil {
		return err
	}

	return nil
}

var apiGetPossibleStatusesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DISABLED","DEPRECATED","ENABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiGetPossibleStatusesItemsEnum = append(apiGetPossibleStatusesItemsEnum, v)
	}
}

func (m *APIGet) validatePossibleStatusesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiGetPossibleStatusesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIGet) validatePossibleStatuses(formats strfmt.Registry) error {

	if swag.IsZero(m.PossibleStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.PossibleStatuses); i++ {

		// value enum
		if err := m.validatePossibleStatusesItemsEnum("possibleStatuses"+"."+strconv.Itoa(i), "body", m.PossibleStatuses[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *APIGet) validatePrivateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateDescription) { // not required
		return nil
	}

	if err := validate.MaxLength("privateDescription", "body", m.PrivateDescription, 65000); err != nil {
		return err
	}

	return nil
}

func (m *APIGet) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MaxLength("version", "body", m.Version, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this Api get based on the context it is used
func (m *APIGet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with APIGetBasic
	if err := m.APIGetBasic.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomFieldValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyEntities(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with LinksAPI
	if err := m.LinksAPI.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIGet) contextValidateCustomFieldValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomFieldValues); i++ {

		if m.CustomFieldValues[i] != nil {
			if err := m.CustomFieldValues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customFieldValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customFieldValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIGet) contextValidatePolicyEntities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyEntities); i++ {

		if m.PolicyEntities[i] != nil {
			if err := m.PolicyEntities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIGet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIGet) UnmarshalBinary(b []byte) error {
	var res APIGet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// APIGetCustomFieldValuesItems0 API get custom field values items0
//
// swagger:model APIGetCustomFieldValuesItems0
type APIGetCustomFieldValuesItems0 struct {

	// The uuid of the Custom Field entity applied to this API or Application instance.
	CustomFieldUUID string `json:"customFieldUuid,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this API get custom field values items0
func (m *APIGetCustomFieldValuesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this API get custom field values items0 based on context it is used
func (m *APIGetCustomFieldValuesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIGetCustomFieldValuesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIGetCustomFieldValuesItems0) UnmarshalBinary(b []byte) error {
	var res APIGetCustomFieldValuesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// APIGetPolicyEntitiesItems0 API get policy entities items0
//
// swagger:model APIGetPolicyEntitiesItems0
type APIGetPolicyEntitiesItems0 struct {

	// The uuid of the Policy Entity applied to this API or Application instance.
	PolicyEntityUUID string `json:"policyEntityUuid,omitempty"`

	// Additional fields that are part of the Policy Template. The default fields are debugMode, email, sla, smtpServer and sslEnabled.
	PolicyTemplateArguments []*APIGetPolicyEntitiesItems0PolicyTemplateArgumentsItems0 `json:"policyTemplateArguments"`
}

// Validate validates this API get policy entities items0
func (m *APIGetPolicyEntitiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicyTemplateArguments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIGetPolicyEntitiesItems0) validatePolicyTemplateArguments(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyTemplateArguments) { // not required
		return nil
	}

	for i := 0; i < len(m.PolicyTemplateArguments); i++ {
		if swag.IsZero(m.PolicyTemplateArguments[i]) { // not required
			continue
		}

		if m.PolicyTemplateArguments[i] != nil {
			if err := m.PolicyTemplateArguments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyTemplateArguments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyTemplateArguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this API get policy entities items0 based on the context it is used
func (m *APIGetPolicyEntitiesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicyTemplateArguments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIGetPolicyEntitiesItems0) contextValidatePolicyTemplateArguments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyTemplateArguments); i++ {

		if m.PolicyTemplateArguments[i] != nil {
			if err := m.PolicyTemplateArguments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyTemplateArguments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyTemplateArguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIGetPolicyEntitiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIGetPolicyEntitiesItems0) UnmarshalBinary(b []byte) error {
	var res APIGetPolicyEntitiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// APIGetPolicyEntitiesItems0PolicyTemplateArgumentsItems0 API get policy entities items0 policy template arguments items0
//
// swagger:model APIGetPolicyEntitiesItems0PolicyTemplateArgumentsItems0
type APIGetPolicyEntitiesItems0PolicyTemplateArgumentsItems0 struct {

	// name
	Name string `json:"name,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this API get policy entities items0 policy template arguments items0
func (m *APIGetPolicyEntitiesItems0PolicyTemplateArgumentsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this API get policy entities items0 policy template arguments items0 based on context it is used
func (m *APIGetPolicyEntitiesItems0PolicyTemplateArgumentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIGetPolicyEntitiesItems0PolicyTemplateArgumentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIGetPolicyEntitiesItems0PolicyTemplateArgumentsItems0) UnmarshalBinary(b []byte) error {
	var res APIGetPolicyEntitiesItems0PolicyTemplateArgumentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
