// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyEntity Policy Entity
//
// swagger:model PolicyEntity
type PolicyEntity struct {

	// The Uuid of the Policy Entity applied to this API or Application instance.
	// Required: true
	PolicyEntityUUID *string `json:"PolicyEntityUuid"`

	// Additional fields that are part of the Policy Template. The default fields are debugMode, email, sla, smtpServer and sslEnabled.
	PolicyTemplateArguments []*PolicyTemplateArguments `json:"PolicyTemplateArguments"`

	// Uuid
	UUID string `json:"Uuid,omitempty"`
}

// Validate validates this policy entity
func (m *PolicyEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicyEntityUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyTemplateArguments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyEntity) validatePolicyEntityUUID(formats strfmt.Registry) error {

	if err := validate.Required("PolicyEntityUuid", "body", m.PolicyEntityUUID); err != nil {
		return err
	}

	return nil
}

func (m *PolicyEntity) validatePolicyTemplateArguments(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyTemplateArguments) { // not required
		return nil
	}

	for i := 0; i < len(m.PolicyTemplateArguments); i++ {
		if swag.IsZero(m.PolicyTemplateArguments[i]) { // not required
			continue
		}

		if m.PolicyTemplateArguments[i] != nil {
			if err := m.PolicyTemplateArguments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PolicyTemplateArguments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PolicyTemplateArguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this policy entity based on the context it is used
func (m *PolicyEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicyTemplateArguments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyEntity) contextValidatePolicyTemplateArguments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyTemplateArguments); i++ {

		if m.PolicyTemplateArguments[i] != nil {
			if err := m.PolicyTemplateArguments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PolicyTemplateArguments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PolicyTemplateArguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyEntity) UnmarshalBinary(b []byte) error {
	var res PolicyEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
