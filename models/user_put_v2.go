// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserPutV2 user put v2
//
// swagger:model UserPutV2
type UserPutV2 struct {

	// access
	Access []*UserPutV2AccessItems0 `json:"access"`

	// Unique identifier of the authentication scheme to which the user belongs
	AuthConfigUUID string `json:"authConfigUuid,omitempty"`

	// Email ID of user
	// Required: true
	Email *string `json:"email"`

	// First name of user
	// Required: true
	FirstName *string `json:"firstName"`

	// Last name of user
	// Required: true
	LastName *string `json:"lastName"`

	// Status of the user
	// Required: true
	// Enum: [DISABLED ENABLED]
	Status *string `json:"status"`

	// Login identifier. This value should be unique for every user
	Username string `json:"username,omitempty"`
}

// Validate validates this user put v2
func (m *UserPutV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPutV2) validateAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.Access) { // not required
		return nil
	}

	for i := 0; i < len(m.Access); i++ {
		if swag.IsZero(m.Access[i]) { // not required
			continue
		}

		if m.Access[i] != nil {
			if err := m.Access[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("access" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("access" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPutV2) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *UserPutV2) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *UserPutV2) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

var userPutV2TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DISABLED","ENABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userPutV2TypeStatusPropEnum = append(userPutV2TypeStatusPropEnum, v)
	}
}

const (

	// UserPutV2StatusDISABLED captures enum value "DISABLED"
	UserPutV2StatusDISABLED string = "DISABLED"

	// UserPutV2StatusENABLED captures enum value "ENABLED"
	UserPutV2StatusENABLED string = "ENABLED"
)

// prop value enum
func (m *UserPutV2) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userPutV2TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserPutV2) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user put v2 based on the context it is used
func (m *UserPutV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPutV2) contextValidateAccess(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Access); i++ {

		if m.Access[i] != nil {
			if err := m.Access[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("access" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("access" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPutV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPutV2) UnmarshalBinary(b []byte) error {
	var res UserPutV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserPutV2AccessItems0 user put v2 access items0
//
// swagger:model UserPutV2AccessItems0
type UserPutV2AccessItems0 struct {

	// role Uuid
	RoleUUID string `json:"roleUuid,omitempty"`
}

// Validate validates this user put v2 access items0
func (m *UserPutV2AccessItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user put v2 access items0 based on context it is used
func (m *UserPutV2AccessItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserPutV2AccessItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPutV2AccessItems0) UnmarshalBinary(b []byte) error {
	var res UserPutV2AccessItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
