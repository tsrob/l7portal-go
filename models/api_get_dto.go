// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIGetDto ApiGetDto
//
// swagger:model ApiGetDto
type APIGetDto struct {

	// access status
	AccessStatus string `json:"accessStatus,omitempty"`

	// api eula Uuid
	APIEulaUUID string `json:"apiEulaUuid,omitempty"`

	// api service type
	APIServiceType string `json:"apiServiceType,omitempty"`

	// authentication parameters
	AuthenticationParameters string `json:"authenticationParameters,omitempty"`

	// authentication type
	AuthenticationType string `json:"authenticationType,omitempty"`

	// create ts
	CreateTs int64 `json:"createTs,omitempty"`

	// custom field values
	CustomFieldValues []*CustomFieldValueDto `json:"customFieldValues"`

	// description
	Description string `json:"description,omitempty"`

	// links
	Links []*Link `json:"links" xml:"link"`

	// location Url
	LocationURL string `json:"locationUrl,omitempty"`

	// modify ts
	ModifyTs int64 `json:"modifyTs,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// policy entities
	PolicyEntities []*APIPolicyEntityDto `json:"policyEntities"`

	// portal status
	PortalStatus string `json:"portalStatus,omitempty"`

	// possible statuses
	PossibleStatuses []string `json:"possibleStatuses"`

	// private description
	PrivateDescription string `json:"privateDescription,omitempty"`

	// published by portal
	PublishedByPortal bool `json:"publishedByPortal,omitempty"`

	// restricted
	Restricted bool `json:"restricted,omitempty"`

	// spec filename
	SpecFilename string `json:"specFilename,omitempty"`

	// spec filesize
	SpecFilesize int64 `json:"specFilesize,omitempty"`

	// ssg Url
	SsgURL string `json:"ssgUrl,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this Api get dto
func (m *APIGetDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomFieldValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePossibleStatuses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIGetDto) validateCustomFieldValues(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomFieldValues) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomFieldValues); i++ {
		if swag.IsZero(m.CustomFieldValues[i]) { // not required
			continue
		}

		if m.CustomFieldValues[i] != nil {
			if err := m.CustomFieldValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customFieldValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customFieldValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIGetDto) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIGetDto) validatePolicyEntities(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyEntities) { // not required
		return nil
	}

	for i := 0; i < len(m.PolicyEntities); i++ {
		if swag.IsZero(m.PolicyEntities[i]) { // not required
			continue
		}

		if m.PolicyEntities[i] != nil {
			if err := m.PolicyEntities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var apiGetDtoPossibleStatusesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NEW","ENABLED","DISABLED","DEPRECATED","DELETED","INCOMPLETE","PENDING_BUNDLE","PENDING_DELETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiGetDtoPossibleStatusesItemsEnum = append(apiGetDtoPossibleStatusesItemsEnum, v)
	}
}

func (m *APIGetDto) validatePossibleStatusesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiGetDtoPossibleStatusesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIGetDto) validatePossibleStatuses(formats strfmt.Registry) error {
	if swag.IsZero(m.PossibleStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.PossibleStatuses); i++ {

		// value enum
		if err := m.validatePossibleStatusesItemsEnum("possibleStatuses"+"."+strconv.Itoa(i), "body", m.PossibleStatuses[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this Api get dto based on the context it is used
func (m *APIGetDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomFieldValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyEntities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIGetDto) contextValidateCustomFieldValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomFieldValues); i++ {

		if m.CustomFieldValues[i] != nil {
			if err := m.CustomFieldValues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customFieldValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customFieldValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIGetDto) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Links); i++ {

		if m.Links[i] != nil {
			if err := m.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIGetDto) contextValidatePolicyEntities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyEntities); i++ {

		if m.PolicyEntities[i] != nil {
			if err := m.PolicyEntities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIGetDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIGetDto) UnmarshalBinary(b []byte) error {
	var res APIGetDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
