// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestReview request review
//
// swagger:model RequestReview
type RequestReview struct {

	// The action to be done with this review.
	// Enum: [ACCEPT REJECT]
	Action string `json:"action,omitempty"`

	// The reason to accept or reject the request.
	Reason string `json:"reason,omitempty"`

	// The UUID of the request (or application if bulk edit) to be reviewed.
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this request review
func (m *RequestReview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var requestReviewTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACCEPT","REJECT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestReviewTypeActionPropEnum = append(requestReviewTypeActionPropEnum, v)
	}
}

const (

	// RequestReviewActionACCEPT captures enum value "ACCEPT"
	RequestReviewActionACCEPT string = "ACCEPT"

	// RequestReviewActionREJECT captures enum value "REJECT"
	RequestReviewActionREJECT string = "REJECT"
)

// prop value enum
func (m *RequestReview) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, requestReviewTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RequestReview) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this request review based on context it is used
func (m *RequestReview) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RequestReview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestReview) UnmarshalBinary(b []byte) error {
	var res RequestReview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
