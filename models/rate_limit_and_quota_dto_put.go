// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RateLimitAndQuotaDtoPut RateLimitAndQuotaDtoPut
// Example: {"assignmentLevel":"API","description":"TestRQ1 Description","name":"TestRQ1","quota":{"interval":"DAY","quota":100},"rateLimit":{"maxConcurrency":100,"maxRequestsPerSecond":50,"windowSizeInSeconds":2},"uuid":"19e77094-6531-4af9-869f-477344fbb4db"}
//
// swagger:model RateLimitAndQuotaDtoPut
type RateLimitAndQuotaDtoPut struct {

	// assignment level
	AssignmentLevel string `json:"assignmentLevel,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// quota
	Quota *RateLimitAndQuotaDtoPutQuota `json:"quota,omitempty"`

	// rate limit
	RateLimit *RateLimitAndQuotaDtoPutRateLimit `json:"rateLimit,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this rate limit and quota dto put
func (m *RateLimitAndQuotaDtoPut) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuota(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RateLimitAndQuotaDtoPut) validateQuota(formats strfmt.Registry) error {
	if swag.IsZero(m.Quota) { // not required
		return nil
	}

	if m.Quota != nil {
		if err := m.Quota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quota")
			}
			return err
		}
	}

	return nil
}

func (m *RateLimitAndQuotaDtoPut) validateRateLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.RateLimit) { // not required
		return nil
	}

	if m.RateLimit != nil {
		if err := m.RateLimit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rateLimit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rateLimit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rate limit and quota dto put based on the context it is used
func (m *RateLimitAndQuotaDtoPut) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuota(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRateLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RateLimitAndQuotaDtoPut) contextValidateQuota(ctx context.Context, formats strfmt.Registry) error {

	if m.Quota != nil {
		if err := m.Quota.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quota")
			}
			return err
		}
	}

	return nil
}

func (m *RateLimitAndQuotaDtoPut) contextValidateRateLimit(ctx context.Context, formats strfmt.Registry) error {

	if m.RateLimit != nil {
		if err := m.RateLimit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rateLimit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rateLimit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RateLimitAndQuotaDtoPut) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RateLimitAndQuotaDtoPut) UnmarshalBinary(b []byte) error {
	var res RateLimitAndQuotaDtoPut
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RateLimitAndQuotaDtoPutQuota rate limit and quota dto put quota
//
// swagger:model RateLimitAndQuotaDtoPutQuota
type RateLimitAndQuotaDtoPutQuota struct {

	// interval
	Interval int64 `json:"interval,omitempty"`

	// quota
	Quota int64 `json:"quota,omitempty"`
}

// Validate validates this rate limit and quota dto put quota
func (m *RateLimitAndQuotaDtoPutQuota) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this rate limit and quota dto put quota based on context it is used
func (m *RateLimitAndQuotaDtoPutQuota) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RateLimitAndQuotaDtoPutQuota) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RateLimitAndQuotaDtoPutQuota) UnmarshalBinary(b []byte) error {
	var res RateLimitAndQuotaDtoPutQuota
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RateLimitAndQuotaDtoPutRateLimit rate limit and quota dto put rate limit
//
// swagger:model RateLimitAndQuotaDtoPutRateLimit
type RateLimitAndQuotaDtoPutRateLimit struct {

	// max concurrency
	MaxConcurrency int64 `json:"maxConcurrency,omitempty"`

	// max requests per second
	MaxRequestsPerSecond int64 `json:"maxRequestsPerSecond,omitempty"`

	// window size in seconds
	WindowSizeInSeconds int64 `json:"windowSizeInSeconds,omitempty"`
}

// Validate validates this rate limit and quota dto put rate limit
func (m *RateLimitAndQuotaDtoPutRateLimit) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this rate limit and quota dto put rate limit based on context it is used
func (m *RateLimitAndQuotaDtoPutRateLimit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RateLimitAndQuotaDtoPutRateLimit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RateLimitAndQuotaDtoPutRateLimit) UnmarshalBinary(b []byte) error {
	var res RateLimitAndQuotaDtoPutRateLimit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
