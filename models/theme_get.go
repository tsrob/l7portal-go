// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ThemeGet theme get
//
// swagger:model ThemeGet
type ThemeGet struct {
	ThemeBasic

	// images
	Images *ThemeGetAO1Images `json:"images,omitempty"`

	// typography
	Typography *ThemeGetAO1Typography `json:"typography,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ThemeGet) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ThemeBasic
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ThemeBasic = aO0

	// AO1
	var dataAO1 struct {
		Images *ThemeGetAO1Images `json:"images,omitempty"`

		Typography *ThemeGetAO1Typography `json:"typography,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Images = dataAO1.Images

	m.Typography = dataAO1.Typography

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ThemeGet) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ThemeBasic)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Images *ThemeGetAO1Images `json:"images,omitempty"`

		Typography *ThemeGetAO1Typography `json:"typography,omitempty"`
	}

	dataAO1.Images = m.Images

	dataAO1.Typography = m.Typography

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this theme get
func (m *ThemeGet) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ThemeBasic
	if err := m.ThemeBasic.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypography(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThemeGet) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	if m.Images != nil {
		if err := m.Images.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("images")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("images")
			}
			return err
		}
	}

	return nil
}

func (m *ThemeGet) validateTypography(formats strfmt.Registry) error {

	if swag.IsZero(m.Typography) { // not required
		return nil
	}

	if m.Typography != nil {
		if err := m.Typography.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("typography")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("typography")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this theme get based on the context it is used
func (m *ThemeGet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ThemeBasic
	if err := m.ThemeBasic.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypography(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThemeGet) contextValidateImages(ctx context.Context, formats strfmt.Registry) error {

	if m.Images != nil {
		if err := m.Images.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("images")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("images")
			}
			return err
		}
	}

	return nil
}

func (m *ThemeGet) contextValidateTypography(ctx context.Context, formats strfmt.Registry) error {

	if m.Typography != nil {
		if err := m.Typography.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("typography")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("typography")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThemeGet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThemeGet) UnmarshalBinary(b []byte) error {
	var res ThemeGet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ThemeGetAO1Images theme get a o1 images
//
// swagger:model ThemeGetAO1Images
type ThemeGetAO1Images struct {

	// Uri to background footer image
	BackgroundFooterURI string `json:"backgroundFooterUri,omitempty"`

	// Uri to background header image
	BackgroundHeaderURI string `json:"backgroundHeaderUri,omitempty"`
}

// Validate validates this theme get a o1 images
func (m *ThemeGetAO1Images) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this theme get a o1 images based on context it is used
func (m *ThemeGetAO1Images) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ThemeGetAO1Images) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThemeGetAO1Images) UnmarshalBinary(b []byte) error {
	var res ThemeGetAO1Images
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ThemeGetAO1Typography theme get a o1 typography
//
// swagger:model ThemeGetAO1Typography
type ThemeGetAO1Typography struct {

	// custom
	Custom []*ThemeFontGetDto `json:"custom"`
}

// Validate validates this theme get a o1 typography
func (m *ThemeGetAO1Typography) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThemeGetAO1Typography) validateCustom(formats strfmt.Registry) error {
	if swag.IsZero(m.Custom) { // not required
		return nil
	}

	for i := 0; i < len(m.Custom); i++ {
		if swag.IsZero(m.Custom[i]) { // not required
			continue
		}

		if m.Custom[i] != nil {
			if err := m.Custom[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("typography" + "." + "custom" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("typography" + "." + "custom" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this theme get a o1 typography based on the context it is used
func (m *ThemeGetAO1Typography) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThemeGetAO1Typography) contextValidateCustom(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Custom); i++ {

		if m.Custom[i] != nil {
			if err := m.Custom[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("typography" + "." + "custom" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("typography" + "." + "custom" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThemeGetAO1Typography) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThemeGetAO1Typography) UnmarshalBinary(b []byte) error {
	var res ThemeGetAO1Typography
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
