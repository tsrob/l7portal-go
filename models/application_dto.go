// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationDto application dto
//
// swagger:model ApplicationDto
type ApplicationDto struct {

	// The description of Application
	// Max Length: 255
	Description string `json:"description,omitempty"`

	// Disabled by type of Application
	// Max Length: 255
	DisabledByType string `json:"disabledByType,omitempty"`

	// Name of the Application
	// Required: true
	// Max Length: 255
	// Min Length: 1
	Name *string `json:"name"`

	// Name of the Organization of this Application
	OrganizationName string `json:"organizationName,omitempty"`

	// Organization's UUID
	OrganizationUUID string `json:"organizationUuid,omitempty"`

	// Status of application
	// Required: true
	// Enum: [ENABLED DISABLED APPLICATION_PENDING_APPROVAL EDIT_APPLICATION_PENDING_APPROVAL DELETE_APPLICATION_PENDING_APPROVAL REJECTED INCOMPLETE]
	Status *string `json:"status"`

	// The unique identifier for this application.
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this application dto
func (m *ApplicationDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisabledByType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationDto) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 255); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationDto) validateDisabledByType(formats strfmt.Registry) error {
	if swag.IsZero(m.DisabledByType) { // not required
		return nil
	}

	if err := validate.MaxLength("disabledByType", "body", m.DisabledByType, 255); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationDto) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 255); err != nil {
		return err
	}

	return nil
}

var applicationDtoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED","APPLICATION_PENDING_APPROVAL","EDIT_APPLICATION_PENDING_APPROVAL","DELETE_APPLICATION_PENDING_APPROVAL","REJECTED","INCOMPLETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationDtoTypeStatusPropEnum = append(applicationDtoTypeStatusPropEnum, v)
	}
}

const (

	// ApplicationDtoStatusENABLED captures enum value "ENABLED"
	ApplicationDtoStatusENABLED string = "ENABLED"

	// ApplicationDtoStatusDISABLED captures enum value "DISABLED"
	ApplicationDtoStatusDISABLED string = "DISABLED"

	// ApplicationDtoStatusAPPLICATIONPENDINGAPPROVAL captures enum value "APPLICATION_PENDING_APPROVAL"
	ApplicationDtoStatusAPPLICATIONPENDINGAPPROVAL string = "APPLICATION_PENDING_APPROVAL"

	// ApplicationDtoStatusEDITAPPLICATIONPENDINGAPPROVAL captures enum value "EDIT_APPLICATION_PENDING_APPROVAL"
	ApplicationDtoStatusEDITAPPLICATIONPENDINGAPPROVAL string = "EDIT_APPLICATION_PENDING_APPROVAL"

	// ApplicationDtoStatusDELETEAPPLICATIONPENDINGAPPROVAL captures enum value "DELETE_APPLICATION_PENDING_APPROVAL"
	ApplicationDtoStatusDELETEAPPLICATIONPENDINGAPPROVAL string = "DELETE_APPLICATION_PENDING_APPROVAL"

	// ApplicationDtoStatusREJECTED captures enum value "REJECTED"
	ApplicationDtoStatusREJECTED string = "REJECTED"

	// ApplicationDtoStatusINCOMPLETE captures enum value "INCOMPLETE"
	ApplicationDtoStatusINCOMPLETE string = "INCOMPLETE"
)

// prop value enum
func (m *ApplicationDto) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationDtoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationDto) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationDto) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this application dto based on context it is used
func (m *ApplicationDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationDto) UnmarshalBinary(b []byte) error {
	var res ApplicationDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
