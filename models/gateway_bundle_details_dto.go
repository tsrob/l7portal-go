// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GatewayBundleDetailsDto gateway bundle details dto
//
// swagger:model GatewayBundleDetailsDto
type GatewayBundleDetailsDto struct {

	// links
	Links *GatewayBundleDetailsDtoLinks `json:"_links,omitempty"`

	// build create ts
	BuildCreateTs int64 `json:"buildCreateTs,omitempty"`

	// create ts
	CreateTs int64 `json:"createTs,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// group name
	GroupName string `json:"groupName,omitempty"`

	// l7 template
	L7Template string `json:"l7Template,omitempty"`

	// meta version
	MetaVersion string `json:"metaVersion,omitempty"`

	// module name
	ModuleName string `json:"moduleName,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// redeployable
	Redeployable string `json:"redeployable,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this gateway bundle details dto
func (m *GatewayBundleDetailsDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayBundleDetailsDto) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this gateway bundle details dto based on the context it is used
func (m *GatewayBundleDetailsDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayBundleDetailsDto) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GatewayBundleDetailsDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayBundleDetailsDto) UnmarshalBinary(b []byte) error {
	var res GatewayBundleDetailsDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GatewayBundleDetailsDtoLinks gateway bundle details dto links
//
// swagger:model GatewayBundleDetailsDtoLinks
type GatewayBundleDetailsDtoLinks struct {

	// metadata
	Metadata *GatewayBundleDetailsDtoLinksMetadata `json:"metadata,omitempty"`
}

// Validate validates this gateway bundle details dto links
func (m *GatewayBundleDetailsDtoLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayBundleDetailsDtoLinks) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this gateway bundle details dto links based on the context it is used
func (m *GatewayBundleDetailsDtoLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayBundleDetailsDtoLinks) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GatewayBundleDetailsDtoLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayBundleDetailsDtoLinks) UnmarshalBinary(b []byte) error {
	var res GatewayBundleDetailsDtoLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GatewayBundleDetailsDtoLinksMetadata gateway bundle details dto links metadata
//
// swagger:model GatewayBundleDetailsDtoLinksMetadata
type GatewayBundleDetailsDtoLinksMetadata struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this gateway bundle details dto links metadata
func (m *GatewayBundleDetailsDtoLinksMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this gateway bundle details dto links metadata based on context it is used
func (m *GatewayBundleDetailsDtoLinksMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GatewayBundleDetailsDtoLinksMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayBundleDetailsDtoLinksMetadata) UnmarshalBinary(b []byte) error {
	var res GatewayBundleDetailsDtoLinksMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
