// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIBasic Api basic
// Example: {"AccessStatus":"PUBLIC","ApiEulaUuid":"c9406345-eb76-11e3-b0cd-000nosaj86a8","ApiLocationUrl":"here.com","AuthenticationParameters":"{}","AuthenticationType":"NONE","CustomFieldValues":{"results":[{"CustomFieldUuid":"ad3d5f44-133a-44f3-8c10-0e7305feedf0","EntityUuid":"{{GENERATED_UUID}}","Uuid":"{{GENERATED_UUID}}","Value":"option1"}]},"Description":"","Name":"apiName2","OrgUuid":"4c35f9cd-8eb2-11e3-ae6b-000c2911a4db","PolicyTemplateArguments":{"results":[{"ApiUuid":"{{GENERATED_UUID}}","Label":"Debug Mode","Name":"debugMode","PolicyTemplateUuid":"72093738-871a-45bd-b114-ad3a61893ac0","Type":"boolean","Value":"false"},{"ApiUuid":"{{GENERATED_UUID}}","Label":"SSL","Name":"sslEnabled","PolicyTemplateUuid":"72093738-871a-45bd-b114-ad3a61893ac0","Type":"boolean","Value":"false"}]},"PolicyTemplateUuid":"72093738-871a-45bd-b114-ad3a61893ac0","PrivateDescription":"","SpecContent":"data:;base64,ew0KICAic3dhZ2dlciI6ICIyLjAiLA0KICAiaW5mbyI6IHsNCiAgICAidmVyc2lvbiI6ICIxLjAuMCIsDQogICAgInRpdGxlIjogIlN3YWdnZXIgUGV0c3RvcmUiLA0KICAgICJkZXNjcmlwdGlvbiI6ICJBIHNhbXBsZSBBUEkgdGhhdCB1c2VzIGEgcGV0c3RvcmUgYXMgYW4gZXhhbXBsZSB0byBkZW1vbnN0cmF0ZSBmZWF0dXJlcyBpbiB0aGUgc3dhZ2dlci0yLjAgc3BlY2lmaWNhdGlvbiIsDQogICAgInRlcm1zT2ZTZXJ2aWNlIjogImh0dHA6Ly9zd2FnZ2VyLmlvL3Rlcm1zLyIsDQogICAgImNvbnRhY3QiOiB7DQogICAgICAibmFtZSI6ICJTd2FnZ2VyIEFQSSBUZWFtIg0KICAgIH0sDQogICAgImxpY2Vuc2UiOiB7DQogICAgICAibmFtZSI6ICJNSVQiDQogICAgfQ0KICB9LA0KICAiaG9zdCI6ICJwZXRzdG9yZS5zd2FnZ2VyLmlvIiwNCiAgImJhc2VQYXRoIjogIi9hcGkiLA0KICAic2NoZW1lcyI6IFsNCiAgICAiaHR0cCINCiAgXSwNCiAgImNvbnN1bWVzIjogWw0KICAgICJhcHBsaWNhdGlvbi9qc29uIg0KICBdLA0KICAicHJvZHVjZXMiOiBbDQogICAgImFwcGxpY2F0aW9uL2pzb24iDQogIF0sDQogICJwYXRocyI6IHsNCiAgICAiL3BldHMiOiB7DQogICAgICAiZ2V0Ijogew0KICAgICAgICAiZGVzY3JpcHRpb24iOiAiUmV0dXJucyBhbGwgcGV0cyBmcm9tIHRoZSBzeXN0ZW0gdGhhdCB0aGUgdXNlciBoYXMgYWNjZXNzIHRvIiwNCiAgICAgICAgInByb2R1Y2VzIjogWw0KICAgICAgICAgICJhcHBsaWNhdGlvbi9qc29uIg0KICAgICAgICBdLA0KICAgICAgICAicmVzcG9uc2VzIjogew0KICAgICAgICAgICIyMDAiOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQSBsaXN0IG9mIHBldHMuIiwNCiAgICAgICAgICAgICJzY2hlbWEiOiB7DQogICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwNCiAgICAgICAgICAgICAgIml0ZW1zIjogew0KICAgICAgICAgICAgICAgICIkcmVmIjogIiMvZGVmaW5pdGlvbnMvUGV0Ig0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9DQogICAgfQ0KICB9LA0KICAiZGVmaW5pdGlvbnMiOiB7DQogICAgIlBldCI6IHsNCiAgICAgICJ0eXBlIjogIm9iamVjdCIsDQogICAgICAicmVxdWlyZWQiOiBbDQogICAgICAgICJpZCIsDQogICAgICAgICJuYW1lIg0KICAgICAgXSwNCiAgICAgICJwcm9wZXJ0aWVzIjogew0KICAgICAgICAiaWQiOiB7DQogICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsDQogICAgICAgICAgImZvcm1hdCI6ICJpbnQ2NCINCiAgICAgICAgfSwNCiAgICAgICAgIm5hbWUiOiB7DQogICAgICAgICAgInR5cGUiOiAic3RyaW5nIg0KICAgICAgICB9LA0KICAgICAgICAidGFnIjogew0KICAgICAgICAgICJ0eXBlIjogInN0cmluZyINCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgfQ0KfQ==","SpecFilename":"swagger.json","SpecFilesize":1438,"SsgUrl":"proxyUrl1","Uuid":"{{GENERATED_GUID}}","Version":"2"}
//
// swagger:model ApiBasic
type APIBasic struct {

	// Indicates whether the API is public or private. A private API is only available to organizations that have it in their account plan. public APIs are public and available to all organizations. You cannot change the AccessStatus if an application is using the API. If not specified, it sets the default AccessStatus to PRIVATE.
	// Required: true
	// Enum: [PUBLIC PRIVATE]
	AccessStatus *string `json:"AccessStatus"`

	// The uuid of the End-User License Agreement applied to the API. The EULA of an API currently used by an application/s cannot be changed
	// Required: true
	APIEulaUUID *string `json:"ApiEulaUuid"`

	// Application calls are forwarded to this url. The url must be valid.
	// Required: true
	APILocationURL *string `json:"ApiLocationUrl"`

	// Specifies the Authentication type (for API Explorer usage).
	// Required: true
	AuthenticationType *string `json:"AuthenticationType"`

	// Name of API which must be unique.
	// Required: true
	// Max Length: 255
	Name *string `json:"Name"`

	// The uuid of the Organization that owns this API. It is optional and can be modified.
	OrgUUID string `json:"OrgUuid,omitempty"`

	// The uuid of the Policy Template applied to the API. Only applies if the API is portal published.
	// Required: true
	PolicyTemplateUUID *string `json:"PolicyTemplateUuid"`

	// The proxy URL. Developers use this URL in their applications to send requests to the API. The SsgUrl must be unique. Only applies if the API is portal published. Once created, it cannot be changed. The proxy URL for Portal Published APIs does not require the / in the beginning and * at the end since those are created in the Gateway. For Gateway Published APIs, the / in the beginning and the * at the end is present in the proxy URL since the value gets set as part of the sync.
	// Required: true
	SsgURL *string `json:"SsgUrl"`

	// Unique key for this entity which conforms to the UUID standard according to RFC 4122.
	// Required: true
	UUID *string `json:"Uuid"`

	// The published version of the API. If not specified, it sets the Version to 1.0
	// Required: true
	// Max Length: 50
	Version *string `json:"Version"`
}

// Validate validates this Api basic
func (m *APIBasic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIEulaUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPILocationURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyTemplateUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSsgURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var apiBasicTypeAccessStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PUBLIC","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiBasicTypeAccessStatusPropEnum = append(apiBasicTypeAccessStatusPropEnum, v)
	}
}

const (

	// APIBasicAccessStatusPUBLIC captures enum value "PUBLIC"
	APIBasicAccessStatusPUBLIC string = "PUBLIC"

	// APIBasicAccessStatusPRIVATE captures enum value "PRIVATE"
	APIBasicAccessStatusPRIVATE string = "PRIVATE"
)

// prop value enum
func (m *APIBasic) validateAccessStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiBasicTypeAccessStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIBasic) validateAccessStatus(formats strfmt.Registry) error {

	if err := validate.Required("AccessStatus", "body", m.AccessStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccessStatusEnum("AccessStatus", "body", *m.AccessStatus); err != nil {
		return err
	}

	return nil
}

func (m *APIBasic) validateAPIEulaUUID(formats strfmt.Registry) error {

	if err := validate.Required("ApiEulaUuid", "body", m.APIEulaUUID); err != nil {
		return err
	}

	return nil
}

func (m *APIBasic) validateAPILocationURL(formats strfmt.Registry) error {

	if err := validate.Required("ApiLocationUrl", "body", m.APILocationURL); err != nil {
		return err
	}

	return nil
}

func (m *APIBasic) validateAuthenticationType(formats strfmt.Registry) error {

	if err := validate.Required("AuthenticationType", "body", m.AuthenticationType); err != nil {
		return err
	}

	return nil
}

func (m *APIBasic) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 255); err != nil {
		return err
	}

	return nil
}

func (m *APIBasic) validatePolicyTemplateUUID(formats strfmt.Registry) error {

	if err := validate.Required("PolicyTemplateUuid", "body", m.PolicyTemplateUUID); err != nil {
		return err
	}

	return nil
}

func (m *APIBasic) validateSsgURL(formats strfmt.Registry) error {

	if err := validate.Required("SsgUrl", "body", m.SsgURL); err != nil {
		return err
	}

	return nil
}

func (m *APIBasic) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("Uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

func (m *APIBasic) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("Version", "body", m.Version); err != nil {
		return err
	}

	if err := validate.MaxLength("Version", "body", *m.Version, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Api basic based on context it is used
func (m *APIBasic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIBasic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIBasic) UnmarshalBinary(b []byte) error {
	var res APIBasic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
