// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoleMappingBasic role mapping basic
//
// swagger:model RoleMappingBasic
type RoleMappingBasic struct {

	// The uuid of the organization the user will belong to. It is mandatory only for developer type users i.e. users with roles 00000005-0005-0005-0005-000000000005,00000006-0006-0006-0006-000000000006
	OrgUUID string `json:"orgUuid,omitempty"`

	// The uuid which identifies the role
	// Required: true
	RoleUUID *string `json:"roleUuid"`

	// The uuid which identifies the user uniquely
	// Required: true
	UserUUID *string `json:"userUuid"`
}

// Validate validates this role mapping basic
func (m *RoleMappingBasic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoleUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleMappingBasic) validateRoleUUID(formats strfmt.Registry) error {

	if err := validate.Required("roleUuid", "body", m.RoleUUID); err != nil {
		return err
	}

	return nil
}

func (m *RoleMappingBasic) validateUserUUID(formats strfmt.Registry) error {

	if err := validate.Required("userUuid", "body", m.UserUUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this role mapping basic based on context it is used
func (m *RoleMappingBasic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RoleMappingBasic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleMappingBasic) UnmarshalBinary(b []byte) error {
	var res RoleMappingBasic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
