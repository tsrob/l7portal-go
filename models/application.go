// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Application application
//
// swagger:model Application
type Application struct {

	// Api Api plan ids
	APIAPIPlanIds *ApplicationAPIAPIPlanIds `json:"ApiApiPlanIds,omitempty"`

	// Api group ids
	APIGroupIds *ApplicationAPIGroupIds `json:"ApiGroupIds,omitempty"`

	// Api ids
	APIIds *ApplicationAPIIds `json:"ApiIds,omitempty"`

	// The API Proxy generates a unique API key after adding an application. Later, the developers must add the API key to the application so that the application can use the APIs. Once added into an application, it cannot be changed.
	APIKey string `json:"ApiKey,omitempty"`

	// custom field values
	CustomFieldValues *ApplicationCustomFieldValues `json:"CustomFieldValues,omitempty"`

	// description
	// Max Length: 65000
	Description string `json:"Description,omitempty"`

	// If the Application has been set to a DISABLED status, this property identifies the type of the user who change the status.
	// Enum: [INTERNAL EXTERNAL]
	DisabledByType string `json:"DisabledByType,omitempty"`

	// A key between the Application and it's containing API/APIs. Once added into an application, it cannot be changed.
	KeySecret string `json:"KeySecret,omitempty"`

	// The API Proxy generates a unique Master client key to be used for Mobile SSO feature in the Mobile Access Gateway after adding an application. Later, the developers must add this key to the MAG SDK application so that the application can use the APIs. Once added into an application, it cannot be changed.
	MagMasterKey string `json:"MagMasterKey,omitempty"`

	// The MAG scope field is for scope or feature to be enabled with the Mobile SSO authentication. If you enter multiple scope values, separate them with spaces.
	// Max Length: 1024
	MagScope string `json:"MagScope,omitempty"`

	// Name of Application which must be unique.
	// Required: true
	// Max Length: 50
	Name *string `json:"Name"`

	// If you enter multiple callback URLs, separate them with commas.
	// Max Length: 255
	OauthCallbackURL string `json:"OauthCallbackUrl,omitempty"`

	// If you enter multiple scope values, separate them with spaces.
	// Max Length: 255
	OauthScope string `json:"OauthScope,omitempty"`

	// The OAuth 2.0 client type this Application conforms to. Set the type to Public or Confidential, depending on the OAuth requirements of the APIs.
	// Enum: [null public confidential]
	OauthType string `json:"OauthType,omitempty"`

	// The name of the Organization that owns this Application. Once added into an application, it cannot be changed.
	OrganizationName string `json:"OrganizationName,omitempty"`

	// The uuid of the Organization that owns this Application. Once added into an application, it cannot be changed.
	// Required: true
	OrganizationUUID *string `json:"OrganizationUuid"`

	// reason
	Reason string `json:"Reason,omitempty"`

	// Indicates whether the Application is currently active or not. A disabled Application cannot be used to access APIs.
	// Enum: [ENABLED DISABLED]
	Status string `json:"Status,omitempty"`

	// Unique key for this entity which conforms to the UUID standard according to RFC 4122.
	// Required: true
	UUID *string `json:"Uuid"`
}

// Validate validates this application
func (m *Application) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIAPIPlanIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIGroupIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomFieldValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisabledByType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMagScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOauthCallbackURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOauthScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOauthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Application) validateAPIAPIPlanIds(formats strfmt.Registry) error {
	if swag.IsZero(m.APIAPIPlanIds) { // not required
		return nil
	}

	if m.APIAPIPlanIds != nil {
		if err := m.APIAPIPlanIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApiApiPlanIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ApiApiPlanIds")
			}
			return err
		}
	}

	return nil
}

func (m *Application) validateAPIGroupIds(formats strfmt.Registry) error {
	if swag.IsZero(m.APIGroupIds) { // not required
		return nil
	}

	if m.APIGroupIds != nil {
		if err := m.APIGroupIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApiGroupIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ApiGroupIds")
			}
			return err
		}
	}

	return nil
}

func (m *Application) validateAPIIds(formats strfmt.Registry) error {
	if swag.IsZero(m.APIIds) { // not required
		return nil
	}

	if m.APIIds != nil {
		if err := m.APIIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApiIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ApiIds")
			}
			return err
		}
	}

	return nil
}

func (m *Application) validateCustomFieldValues(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomFieldValues) { // not required
		return nil
	}

	if m.CustomFieldValues != nil {
		if err := m.CustomFieldValues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CustomFieldValues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CustomFieldValues")
			}
			return err
		}
	}

	return nil
}

func (m *Application) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("Description", "body", m.Description, 65000); err != nil {
		return err
	}

	return nil
}

var applicationTypeDisabledByTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INTERNAL","EXTERNAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationTypeDisabledByTypePropEnum = append(applicationTypeDisabledByTypePropEnum, v)
	}
}

const (

	// ApplicationDisabledByTypeINTERNAL captures enum value "INTERNAL"
	ApplicationDisabledByTypeINTERNAL string = "INTERNAL"

	// ApplicationDisabledByTypeEXTERNAL captures enum value "EXTERNAL"
	ApplicationDisabledByTypeEXTERNAL string = "EXTERNAL"
)

// prop value enum
func (m *Application) validateDisabledByTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationTypeDisabledByTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Application) validateDisabledByType(formats strfmt.Registry) error {
	if swag.IsZero(m.DisabledByType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDisabledByTypeEnum("DisabledByType", "body", m.DisabledByType); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateMagScope(formats strfmt.Registry) error {
	if swag.IsZero(m.MagScope) { // not required
		return nil
	}

	if err := validate.MaxLength("MagScope", "body", m.MagScope, 1024); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 50); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateOauthCallbackURL(formats strfmt.Registry) error {
	if swag.IsZero(m.OauthCallbackURL) { // not required
		return nil
	}

	if err := validate.MaxLength("OauthCallbackUrl", "body", m.OauthCallbackURL, 255); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateOauthScope(formats strfmt.Registry) error {
	if swag.IsZero(m.OauthScope) { // not required
		return nil
	}

	if err := validate.MaxLength("OauthScope", "body", m.OauthScope, 255); err != nil {
		return err
	}

	return nil
}

var applicationTypeOauthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["null","public","confidential"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationTypeOauthTypePropEnum = append(applicationTypeOauthTypePropEnum, v)
	}
}

const (

	// ApplicationOauthTypeNull captures enum value "null"
	ApplicationOauthTypeNull string = "null"

	// ApplicationOauthTypePublic captures enum value "public"
	ApplicationOauthTypePublic string = "public"

	// ApplicationOauthTypeConfidential captures enum value "confidential"
	ApplicationOauthTypeConfidential string = "confidential"
)

// prop value enum
func (m *Application) validateOauthTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationTypeOauthTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Application) validateOauthType(formats strfmt.Registry) error {
	if swag.IsZero(m.OauthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOauthTypeEnum("OauthType", "body", m.OauthType); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateOrganizationUUID(formats strfmt.Registry) error {

	if err := validate.Required("OrganizationUuid", "body", m.OrganizationUUID); err != nil {
		return err
	}

	return nil
}

var applicationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationTypeStatusPropEnum = append(applicationTypeStatusPropEnum, v)
	}
}

const (

	// ApplicationStatusENABLED captures enum value "ENABLED"
	ApplicationStatusENABLED string = "ENABLED"

	// ApplicationStatusDISABLED captures enum value "DISABLED"
	ApplicationStatusDISABLED string = "DISABLED"
)

// prop value enum
func (m *Application) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Application) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("Uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this application based on the context it is used
func (m *Application) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPIAPIPlanIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPIGroupIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPIIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomFieldValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Application) contextValidateAPIAPIPlanIds(ctx context.Context, formats strfmt.Registry) error {

	if m.APIAPIPlanIds != nil {
		if err := m.APIAPIPlanIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApiApiPlanIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ApiApiPlanIds")
			}
			return err
		}
	}

	return nil
}

func (m *Application) contextValidateAPIGroupIds(ctx context.Context, formats strfmt.Registry) error {

	if m.APIGroupIds != nil {
		if err := m.APIGroupIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApiGroupIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ApiGroupIds")
			}
			return err
		}
	}

	return nil
}

func (m *Application) contextValidateAPIIds(ctx context.Context, formats strfmt.Registry) error {

	if m.APIIds != nil {
		if err := m.APIIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApiIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ApiIds")
			}
			return err
		}
	}

	return nil
}

func (m *Application) contextValidateCustomFieldValues(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomFieldValues != nil {
		if err := m.CustomFieldValues.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CustomFieldValues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CustomFieldValues")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Application) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Application) UnmarshalBinary(b []byte) error {
	var res Application
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ApplicationAPIAPIPlanIds A list of association of API Ids and API Plan Ids. An Application should have at least one API which may associated with API Plan. Only APIs that are enabled can be added into an Application.
//
// swagger:model ApplicationAPIAPIPlanIds
type ApplicationAPIAPIPlanIds struct {

	// results
	Results APIPlanApis `json:"results,omitempty"`
}

// Validate validates this application API API plan ids
func (m *ApplicationAPIAPIPlanIds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationAPIAPIPlanIds) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(m.Results) { // not required
		return nil
	}

	if err := m.Results.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ApiApiPlanIds" + "." + "results")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ApiApiPlanIds" + "." + "results")
		}
		return err
	}

	return nil
}

// ContextValidate validate this application API API plan ids based on the context it is used
func (m *ApplicationAPIAPIPlanIds) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationAPIAPIPlanIds) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Results.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ApiApiPlanIds" + "." + "results")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ApiApiPlanIds" + "." + "results")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationAPIAPIPlanIds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationAPIAPIPlanIds) UnmarshalBinary(b []byte) error {
	var res ApplicationAPIAPIPlanIds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ApplicationAPIGroupIds A list of API Group Ids that this Application uses. An Application should have at least one API or API Group attached to it. Only API group that are enabled and contains all enabled APIs in same Organization as Application can be added into an Application.
//
// swagger:model ApplicationAPIGroupIds
type ApplicationAPIGroupIds struct {

	// results
	Results []string `json:"results"`
}

// Validate validates this application API group ids
func (m *ApplicationAPIGroupIds) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this application API group ids based on context it is used
func (m *ApplicationAPIGroupIds) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationAPIGroupIds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationAPIGroupIds) UnmarshalBinary(b []byte) error {
	var res ApplicationAPIGroupIds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ApplicationAPIIds A list of API Ids that this Application uses. An Application should have at least one API or API Group attached to it. Only APIs that are enabled can be added into an Application.
//
// swagger:model ApplicationAPIIds
type ApplicationAPIIds struct {

	// results
	Results []string `json:"results"`
}

// Validate validates this application API ids
func (m *ApplicationAPIIds) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this application API ids based on context it is used
func (m *ApplicationAPIIds) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationAPIIds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationAPIIds) UnmarshalBinary(b []byte) error {
	var res ApplicationAPIIds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ApplicationCustomFieldValues Custom Fields add additional metadata to the Application. If a Custom Field is required, you must put a value in it when creating or changing an Application.
//
// swagger:model ApplicationCustomFieldValues
type ApplicationCustomFieldValues struct {

	// results
	Results []*CustomFieldValue `json:"results"`
}

// Validate validates this application custom field values
func (m *ApplicationCustomFieldValues) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationCustomFieldValues) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CustomFieldValues" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CustomFieldValues" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this application custom field values based on the context it is used
func (m *ApplicationCustomFieldValues) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationCustomFieldValues) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Results); i++ {

		if m.Results[i] != nil {
			if err := m.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CustomFieldValues" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CustomFieldValues" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationCustomFieldValues) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationCustomFieldValues) UnmarshalBinary(b []byte) error {
	var res ApplicationCustomFieldValues
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
