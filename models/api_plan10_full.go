// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIPlan10Full Api plan1 0 full
// Example: {"_links":{"self":{"href":"/api-management/1.0/api-plans/7d90b568-4820-4cfc-9f7a-626643fcc4ed"}},"description":"desc","name":"API Plan Name","quota":1000000000,"quotaInterval":"DAY","rateLimit":10,"uuid":"7d90b568-4820-4cfc-9f7a-626643fcc4ed"}
//
// swagger:model ApiPlan1.0Full
type APIPlan10Full struct {

	// API Plan detail description
	// Max Length: 500
	Description string `json:"description,omitempty"`

	// Name of API Plan
	// Required: true
	// Max Length: 50
	Name *string `json:"name"`

	// Quota per proxy.  Do not set if there is no limit
	// Maximum: 2e+09
	// Minimum: 1
	Quota int64 `json:"quota,omitempty"`

	// The interval determines when the quota will be reset
	// Enum: [DAY MONTH]
	QuotaInterval string `json:"quotaInterval,omitempty"`

	// Throughput per proxy.  Do not set if there is no limit
	// Maximum: 2e+09
	// Minimum: 1
	RateLimit int64 `json:"rateLimit,omitempty"`
}

// Validate validates this Api plan1 0 full
func (m *APIPlan10Full) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuota(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotaInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIPlan10Full) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 500); err != nil {
		return err
	}

	return nil
}

func (m *APIPlan10Full) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 50); err != nil {
		return err
	}

	return nil
}

func (m *APIPlan10Full) validateQuota(formats strfmt.Registry) error {
	if swag.IsZero(m.Quota) { // not required
		return nil
	}

	if err := validate.MinimumInt("quota", "body", m.Quota, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("quota", "body", m.Quota, 2e+09, false); err != nil {
		return err
	}

	return nil
}

var apiPlan10FullTypeQuotaIntervalPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DAY","MONTH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiPlan10FullTypeQuotaIntervalPropEnum = append(apiPlan10FullTypeQuotaIntervalPropEnum, v)
	}
}

const (

	// APIPlan10FullQuotaIntervalDAY captures enum value "DAY"
	APIPlan10FullQuotaIntervalDAY string = "DAY"

	// APIPlan10FullQuotaIntervalMONTH captures enum value "MONTH"
	APIPlan10FullQuotaIntervalMONTH string = "MONTH"
)

// prop value enum
func (m *APIPlan10Full) validateQuotaIntervalEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiPlan10FullTypeQuotaIntervalPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIPlan10Full) validateQuotaInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.QuotaInterval) { // not required
		return nil
	}

	// value enum
	if err := m.validateQuotaIntervalEnum("quotaInterval", "body", m.QuotaInterval); err != nil {
		return err
	}

	return nil
}

func (m *APIPlan10Full) validateRateLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.RateLimit) { // not required
		return nil
	}

	if err := validate.MinimumInt("rateLimit", "body", m.RateLimit, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("rateLimit", "body", m.RateLimit, 2e+09, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Api plan1 0 full based on context it is used
func (m *APIPlan10Full) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIPlan10Full) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIPlan10Full) UnmarshalBinary(b []byte) error {
	var res APIPlan10Full
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
