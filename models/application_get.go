// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationGet application get
//
// swagger:model ApplicationGet
type ApplicationGet struct {

	// Name of Application which must be unique.
	// Max Length: 50
	Name string `json:"name,omitempty"`

	// The name of the organization that the application belongs to.
	OrganizationName string `json:"organizationName,omitempty"`

	// The uuid of the Organization that owns this Application. Once added into an application, it cannot be changed.
	OrganizationUUID string `json:"organizationUuid,omitempty"`

	// status
	// Enum: [ENABLED DISABLED]
	Status string `json:"status,omitempty"`

	// Unique key for this entity which conforms to the UUID standard according to RFC 4122.
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this application get
func (m *ApplicationGet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationGet) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", m.Name, 50); err != nil {
		return err
	}

	return nil
}

var applicationGetTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationGetTypeStatusPropEnum = append(applicationGetTypeStatusPropEnum, v)
	}
}

const (

	// ApplicationGetStatusENABLED captures enum value "ENABLED"
	ApplicationGetStatusENABLED string = "ENABLED"

	// ApplicationGetStatusDISABLED captures enum value "DISABLED"
	ApplicationGetStatusDISABLED string = "DISABLED"
)

// prop value enum
func (m *ApplicationGet) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationGetTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationGet) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this application get based on context it is used
func (m *ApplicationGet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationGet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationGet) UnmarshalBinary(b []byte) error {
	var res ApplicationGet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
