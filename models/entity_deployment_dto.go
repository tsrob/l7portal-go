// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EntityDeploymentDto entity deployment dto
//
// swagger:model EntityDeploymentDto
type EntityDeploymentDto struct {

	// The number of entity records defined in Portal.
	DefinedEntityCount float64 `json:"definedEntityCount,omitempty"`

	// The number of entity records deployed to Gateway.
	DeployedEntityCount float64 `json:"deployedEntityCount,omitempty"`

	// The entity deployment message which can be used to communicate details relating to the status of the deployment.
	DeploymentResult string `json:"deploymentResult,omitempty"`

	// The UUID of the entity for the deployment.
	EntityUUID string `json:"entityUuid,omitempty"`

	// The timestamp of last attempted entity deployment.
	LastTimeDeployed string `json:"lastTimeDeployed,omitempty"`

	// The date and time of the last attempted entity deployment. (format: yyyy-MM-dd'T'HH:mm:ssZ)
	LastTimeDeployedDate string `json:"lastTimeDeployedDate,omitempty"`

	// The name of the proxy for the deployment.
	ProxyName string `json:"proxyName,omitempty"`

	// The UUID of the proxy for the deployment.
	ProxyUUID string `json:"proxyUuid,omitempty"`

	// The status of API deployment.
	// Enum: [DEPLOYED PENDING_DEPLOYMENT ERROR PENDING_UNDEPLOYMENT]
	Status string `json:"status,omitempty"`
}

// Validate validates this entity deployment dto
func (m *EntityDeploymentDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var entityDeploymentDtoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEPLOYED","PENDING_DEPLOYMENT","ERROR","PENDING_UNDEPLOYMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		entityDeploymentDtoTypeStatusPropEnum = append(entityDeploymentDtoTypeStatusPropEnum, v)
	}
}

const (

	// EntityDeploymentDtoStatusDEPLOYED captures enum value "DEPLOYED"
	EntityDeploymentDtoStatusDEPLOYED string = "DEPLOYED"

	// EntityDeploymentDtoStatusPENDINGDEPLOYMENT captures enum value "PENDING_DEPLOYMENT"
	EntityDeploymentDtoStatusPENDINGDEPLOYMENT string = "PENDING_DEPLOYMENT"

	// EntityDeploymentDtoStatusERROR captures enum value "ERROR"
	EntityDeploymentDtoStatusERROR string = "ERROR"

	// EntityDeploymentDtoStatusPENDINGUNDEPLOYMENT captures enum value "PENDING_UNDEPLOYMENT"
	EntityDeploymentDtoStatusPENDINGUNDEPLOYMENT string = "PENDING_UNDEPLOYMENT"
)

// prop value enum
func (m *EntityDeploymentDto) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, entityDeploymentDtoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EntityDeploymentDto) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this entity deployment dto based on context it is used
func (m *EntityDeploymentDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EntityDeploymentDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntityDeploymentDto) UnmarshalBinary(b []byte) error {
	var res EntityDeploymentDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
