// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationUpdate application update
//
// swagger:model ApplicationUpdate
type ApplicationUpdate struct {
	Application

	// The name of the Organization that owns this Application. Once added into an application, it cannot be changed.
	// Required: true
	OrganizationName *string `json:"OrganizationName"`

	// Indicates whether the Application is currently active or not. A disabled Application cannot be used to access APIs.
	// Required: true
	// Enum: [ENABLED DISABLED]
	Status *string `json:"Status"`

	ApplicationUpdateAllOf2
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ApplicationUpdate) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Application
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Application = aO0

	// AO1
	var dataAO1 struct {
		OrganizationName *string `json:"OrganizationName"`

		Status *string `json:"Status"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.OrganizationName = dataAO1.OrganizationName

	m.Status = dataAO1.Status

	// AO2
	var aO2 ApplicationUpdateAllOf2
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.ApplicationUpdateAllOf2 = aO2

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ApplicationUpdate) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.Application)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		OrganizationName *string `json:"OrganizationName"`

		Status *string `json:"Status"`
	}

	dataAO1.OrganizationName = m.OrganizationName

	dataAO1.Status = m.Status

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	aO2, err := swag.WriteJSON(m.ApplicationUpdateAllOf2)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this application update
func (m *ApplicationUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Application
	if err := m.Application.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with ApplicationUpdateAllOf2

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationUpdate) validateOrganizationName(formats strfmt.Registry) error {

	if err := validate.Required("OrganizationName", "body", m.OrganizationName); err != nil {
		return err
	}

	return nil
}

var applicationUpdateTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationUpdateTypeStatusPropEnum = append(applicationUpdateTypeStatusPropEnum, v)
	}
}

// property enum
func (m *ApplicationUpdate) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationUpdateTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationUpdate) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("Status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this application update based on the context it is used
func (m *ApplicationUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Application
	if err := m.Application.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ApplicationUpdateAllOf2

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationUpdate) UnmarshalBinary(b []byte) error {
	var res ApplicationUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ApplicationUpdateAllOf2 application update all of2
// Example: {"ApiApiPlanIds":{"results":[{"ApiPlanUuid":"c79636bc-8c50-4157-94b3-6c799da35388","ApiUuid":"1e544644-7e3a-402c-9b50-f1af4a77bbbf"},{"ApiPlanUuid":"c79636bc-8c50-4157-94b3-6c799da35388","ApiUuid":"538f3e7c-6e17-47a6-9903-1dcee3e3d3f3"}]},"ApiGroupIds":{"results":["8b2f796e-2d3f-482c-85d7-30420109f170"]},"ApiIds":{"results":["1e544644-7e3a-402c-9b50-f1af4a77bbbf","538f3e7c-6e17-47a6-9903-1dcee3e3d3f3"]},"ApiKey":"l7xx67167af2f7b1417480cc5824a298c7f2","CustomFieldValues":{"results":[{"CustomFieldUuid":"ad3d5f44-133a-44f3-8c10-0e7305feedf2","EntityUuid":"UUID_OF_APP","Uuid":"6d0a1735-3821-4516-a8ad-aa6961d882ae","Value":"Staging"}]},"Description":"Public description of my new app, now updated","KeySecret":"aee5f76d3b43420eb24129af3a66b62a","MagMasterKey":"99e78c83-02d6-4c8b-8e55-eb0db53ae789","MagScope":"oob","Name":"my updated app","OauthCallbackUrl":"https://myportal.dev.ca.com/admin/oauthCallback","OauthScope":"","OauthType":"confidential","OrganizationUuid":"4c35f9cd-8eb2-11e3-ae6b-000c2911a4db","Status":"ENABLED","Uuid":"UUID_OF_APP"}
//
// swagger:model ApplicationUpdateAllOf2
type ApplicationUpdateAllOf2 interface{}
